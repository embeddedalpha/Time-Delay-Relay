
Time_Delay_Relay_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d28  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004eb0  08004eb0  00005eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec0  08004ec0  00006004  2**0
                  CONTENTS
  4 .ARM          00000000  08004ec0  08004ec0  00006004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ec0  08004ec0  00006004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec0  08004ec0  00005ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ec4  08004ec4  00005ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08004ec8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006004  2**0
                  CONTENTS
 10 .bss          000001b0  20000004  20000004  00006004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001b4  200001b4  00006004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a535  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001011  00000000  00000000  00010569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000468  00000000  00000000  00011580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000036c  00000000  00000000  000119e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e61  00000000  00000000  00011d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000819a  00000000  00000000  00012bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090727  00000000  00000000  0001ad4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ab476  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010d8  00000000  00000000  000ab4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000ac594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e98 	.word	0x08004e98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08004e98 	.word	0x08004e98

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000208:	4b60      	ldr	r3, [pc, #384]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a60      	ldr	r2, [pc, #384]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 800020e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000210:	4b5f      	ldr	r3, [pc, #380]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d015      	beq.n	8000248 <DMA1_Stream0_IRQHandler+0x44>
	{

		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800021c:	4b5d      	ldr	r3, [pc, #372]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	69db      	ldr	r3, [r3, #28]
 8000222:	2280      	movs	r2, #128	@ 0x80
 8000224:	4013      	ands	r3, r2
 8000226:	2b00      	cmp	r3, #0
 8000228:	d00e      	beq.n	8000248 <DMA1_Stream0_IRQHandler+0x44>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800022a:	4b5a      	ldr	r3, [pc, #360]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000230:	2b00      	cmp	r3, #0
 8000232:	d009      	beq.n	8000248 <DMA1_Stream0_IRQHandler+0x44>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000234:	4b57      	ldr	r3, [pc, #348]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800023a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 800023c:	4b53      	ldr	r3, [pc, #332]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a52      	ldr	r2, [pc, #328]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000248:	4b51      	ldr	r3, [pc, #324]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f003 0304 	and.w	r3, r3, #4
 8000250:	2b00      	cmp	r3, #0
 8000252:	d015      	beq.n	8000280 <DMA1_Stream0_IRQHandler+0x7c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000254:	4b4f      	ldr	r3, [pc, #316]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	69db      	ldr	r3, [r3, #28]
 800025a:	2202      	movs	r2, #2
 800025c:	4013      	ands	r3, r2
 800025e:	2b00      	cmp	r3, #0
 8000260:	d00e      	beq.n	8000280 <DMA1_Stream0_IRQHandler+0x7c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000262:	4b4c      	ldr	r3, [pc, #304]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000268:	2b00      	cmp	r3, #0
 800026a:	d009      	beq.n	8000280 <DMA1_Stream0_IRQHandler+0x7c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800026c:	4b49      	ldr	r3, [pc, #292]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000272:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000274:	4b45      	ldr	r3, [pc, #276]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a44      	ldr	r2, [pc, #272]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800027a:	f043 0304 	orr.w	r3, r3, #4
 800027e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000280:	4b43      	ldr	r3, [pc, #268]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f003 0308 	and.w	r3, r3, #8
 8000288:	2b00      	cmp	r3, #0
 800028a:	d015      	beq.n	80002b8 <DMA1_Stream0_IRQHandler+0xb4>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800028c:	4b41      	ldr	r3, [pc, #260]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	69db      	ldr	r3, [r3, #28]
 8000292:	2204      	movs	r2, #4
 8000294:	4013      	ands	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	d00e      	beq.n	80002b8 <DMA1_Stream0_IRQHandler+0xb4>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800029a:	4b3e      	ldr	r3, [pc, #248]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d009      	beq.n	80002b8 <DMA1_Stream0_IRQHandler+0xb4>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80002a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002aa:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80002ac:	4b37      	ldr	r3, [pc, #220]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a36      	ldr	r2, [pc, #216]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 80002b8:	4b35      	ldr	r3, [pc, #212]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 0310 	and.w	r3, r3, #16
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d02d      	beq.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80002c4:	4b33      	ldr	r3, [pc, #204]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	2208      	movs	r2, #8
 80002cc:	4013      	ands	r3, r2
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d026      	beq.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80002d2:	4b30      	ldr	r3, [pc, #192]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d021      	beq.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80002dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002e2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80002e4:	4b29      	ldr	r3, [pc, #164]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a28      	ldr	r2, [pc, #160]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002ea:	f043 0310 	orr.w	r3, r3, #16
 80002ee:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80002f0:	4b28      	ldr	r3, [pc, #160]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80002f6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d110      	bne.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80002fe:	4b25      	ldr	r3, [pc, #148]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800030a:	2b00      	cmp	r3, #0
 800030c:	d004      	beq.n	8000318 <DMA1_Stream0_IRQHandler+0x114>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800030e:	4b21      	ldr	r3, [pc, #132]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000314:	4798      	blx	r3
 8000316:	e003      	b.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000318:	4b1e      	ldr	r3, [pc, #120]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800031e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000320:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	2b00      	cmp	r3, #0
 800032a:	d02d      	beq.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800032c:	4b19      	ldr	r3, [pc, #100]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	2210      	movs	r2, #16
 8000334:	4013      	ands	r3, r2
 8000336:	2b00      	cmp	r3, #0
 8000338:	d026      	beq.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800033a:	4b16      	ldr	r3, [pc, #88]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000340:	2b00      	cmp	r3, #0
 8000342:	d021      	beq.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000344:	4b13      	ldr	r3, [pc, #76]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800034a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4a0e      	ldr	r2, [pc, #56]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000358:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800035e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000362:	4293      	cmp	r3, r2
 8000364:	d110      	bne.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000372:	2b00      	cmp	r3, #0
 8000374:	d004      	beq.n	8000380 <DMA1_Stream0_IRQHandler+0x17c>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000376:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800037c:	4798      	blx	r3
				}
			}
		}

	}
}
 800037e:	e003      	b.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000380:	4b04      	ldr	r3, [pc, #16]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000386:	4798      	blx	r3
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40026000 	.word	0x40026000
 8000390:	20000060 	.word	0x20000060
 8000394:	20000020 	.word	0x20000020

08000398 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 800039c:	4b60      	ldr	r3, [pc, #384]	@ (8000520 <DMA1_Stream1_IRQHandler+0x188>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a60      	ldr	r2, [pc, #384]	@ (8000524 <DMA1_Stream1_IRQHandler+0x18c>)
 80003a2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 80003a4:	4b5f      	ldr	r3, [pc, #380]	@ (8000524 <DMA1_Stream1_IRQHandler+0x18c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d015      	beq.n	80003dc <DMA1_Stream1_IRQHandler+0x44>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80003b0:	4b5d      	ldr	r3, [pc, #372]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	2280      	movs	r2, #128	@ 0x80
 80003b8:	4013      	ands	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d00e      	beq.n	80003dc <DMA1_Stream1_IRQHandler+0x44>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80003be:	4b5a      	ldr	r3, [pc, #360]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d009      	beq.n	80003dc <DMA1_Stream1_IRQHandler+0x44>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80003c8:	4b57      	ldr	r3, [pc, #348]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003ce:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80003d0:	4b53      	ldr	r3, [pc, #332]	@ (8000520 <DMA1_Stream1_IRQHandler+0x188>)
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a52      	ldr	r2, [pc, #328]	@ (8000520 <DMA1_Stream1_IRQHandler+0x188>)
 80003d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003da:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 80003dc:	4b51      	ldr	r3, [pc, #324]	@ (8000524 <DMA1_Stream1_IRQHandler+0x18c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d015      	beq.n	8000414 <DMA1_Stream1_IRQHandler+0x7c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80003e8:	4b4f      	ldr	r3, [pc, #316]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	2202      	movs	r2, #2
 80003f0:	4013      	ands	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d00e      	beq.n	8000414 <DMA1_Stream1_IRQHandler+0x7c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80003f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d009      	beq.n	8000414 <DMA1_Stream1_IRQHandler+0x7c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000400:	4b49      	ldr	r3, [pc, #292]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000406:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000408:	4b45      	ldr	r3, [pc, #276]	@ (8000520 <DMA1_Stream1_IRQHandler+0x188>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	4a44      	ldr	r2, [pc, #272]	@ (8000520 <DMA1_Stream1_IRQHandler+0x188>)
 800040e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000412:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8000414:	4b43      	ldr	r3, [pc, #268]	@ (8000524 <DMA1_Stream1_IRQHandler+0x18c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800041c:	2b00      	cmp	r3, #0
 800041e:	d015      	beq.n	800044c <DMA1_Stream1_IRQHandler+0xb4>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000420:	4b41      	ldr	r3, [pc, #260]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	2204      	movs	r2, #4
 8000428:	4013      	ands	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d00e      	beq.n	800044c <DMA1_Stream1_IRQHandler+0xb4>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800042e:	4b3e      	ldr	r3, [pc, #248]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000434:	2b00      	cmp	r3, #0
 8000436:	d009      	beq.n	800044c <DMA1_Stream1_IRQHandler+0xb4>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000438:	4b3b      	ldr	r3, [pc, #236]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800043e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000440:	4b37      	ldr	r3, [pc, #220]	@ (8000520 <DMA1_Stream1_IRQHandler+0x188>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	4a36      	ldr	r2, [pc, #216]	@ (8000520 <DMA1_Stream1_IRQHandler+0x188>)
 8000446:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800044a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 800044c:	4b35      	ldr	r3, [pc, #212]	@ (8000524 <DMA1_Stream1_IRQHandler+0x18c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000454:	2b00      	cmp	r3, #0
 8000456:	d02d      	beq.n	80004b4 <DMA1_Stream1_IRQHandler+0x11c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000458:	4b33      	ldr	r3, [pc, #204]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	2208      	movs	r2, #8
 8000460:	4013      	ands	r3, r2
 8000462:	2b00      	cmp	r3, #0
 8000464:	d026      	beq.n	80004b4 <DMA1_Stream1_IRQHandler+0x11c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000466:	4b30      	ldr	r3, [pc, #192]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800046c:	2b00      	cmp	r3, #0
 800046e:	d021      	beq.n	80004b4 <DMA1_Stream1_IRQHandler+0x11c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000470:	4b2d      	ldr	r3, [pc, #180]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000476:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000478:	4b29      	ldr	r3, [pc, #164]	@ (8000520 <DMA1_Stream1_IRQHandler+0x188>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a28      	ldr	r2, [pc, #160]	@ (8000520 <DMA1_Stream1_IRQHandler+0x188>)
 800047e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000482:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000484:	4b28      	ldr	r3, [pc, #160]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800048a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800048e:	4293      	cmp	r3, r2
 8000490:	d110      	bne.n	80004b4 <DMA1_Stream1_IRQHandler+0x11c>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000492:	4b25      	ldr	r3, [pc, #148]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d004      	beq.n	80004ac <DMA1_Stream1_IRQHandler+0x114>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80004a2:	4b21      	ldr	r3, [pc, #132]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80004a8:	4798      	blx	r3
 80004aa:	e003      	b.n	80004b4 <DMA1_Stream1_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80004ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80004b2:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 80004b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000524 <DMA1_Stream1_IRQHandler+0x18c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d02d      	beq.n	800051c <DMA1_Stream1_IRQHandler+0x184>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80004c0:	4b19      	ldr	r3, [pc, #100]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	2210      	movs	r2, #16
 80004c8:	4013      	ands	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d026      	beq.n	800051c <DMA1_Stream1_IRQHandler+0x184>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80004ce:	4b16      	ldr	r3, [pc, #88]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d021      	beq.n	800051c <DMA1_Stream1_IRQHandler+0x184>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80004d8:	4b13      	ldr	r3, [pc, #76]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004de:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <DMA1_Stream1_IRQHandler+0x188>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000520 <DMA1_Stream1_IRQHandler+0x188>)
 80004e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004ea:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80004ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80004f2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d110      	bne.n	800051c <DMA1_Stream1_IRQHandler+0x184>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80004fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000506:	2b00      	cmp	r3, #0
 8000508:	d004      	beq.n	8000514 <DMA1_Stream1_IRQHandler+0x17c>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800050a:	4b07      	ldr	r3, [pc, #28]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000510:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8000512:	e003      	b.n	800051c <DMA1_Stream1_IRQHandler+0x184>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000514:	4b04      	ldr	r3, [pc, #16]	@ (8000528 <DMA1_Stream1_IRQHandler+0x190>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800051a:	4798      	blx	r3
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40026000 	.word	0x40026000
 8000524:	20000060 	.word	0x20000060
 8000528:	20000024 	.word	0x20000024

0800052c <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000530:	4b64      	ldr	r3, [pc, #400]	@ (80006c4 <DMA1_Stream2_IRQHandler+0x198>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a64      	ldr	r2, [pc, #400]	@ (80006c8 <DMA1_Stream2_IRQHandler+0x19c>)
 8000536:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8000538:	4b63      	ldr	r3, [pc, #396]	@ (80006c8 <DMA1_Stream2_IRQHandler+0x19c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d015      	beq.n	8000570 <DMA1_Stream2_IRQHandler+0x44>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000544:	4b61      	ldr	r3, [pc, #388]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	2280      	movs	r2, #128	@ 0x80
 800054c:	4013      	ands	r3, r2
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00e      	beq.n	8000570 <DMA1_Stream2_IRQHandler+0x44>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000552:	4b5e      	ldr	r3, [pc, #376]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000558:	2b00      	cmp	r3, #0
 800055a:	d009      	beq.n	8000570 <DMA1_Stream2_IRQHandler+0x44>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800055c:	4b5b      	ldr	r3, [pc, #364]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000562:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000564:	4b57      	ldr	r3, [pc, #348]	@ (80006c4 <DMA1_Stream2_IRQHandler+0x198>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	4a56      	ldr	r2, [pc, #344]	@ (80006c4 <DMA1_Stream2_IRQHandler+0x198>)
 800056a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800056e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8000570:	4b55      	ldr	r3, [pc, #340]	@ (80006c8 <DMA1_Stream2_IRQHandler+0x19c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000578:	2b00      	cmp	r3, #0
 800057a:	d015      	beq.n	80005a8 <DMA1_Stream2_IRQHandler+0x7c>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800057c:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	2202      	movs	r2, #2
 8000584:	4013      	ands	r3, r2
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00e      	beq.n	80005a8 <DMA1_Stream2_IRQHandler+0x7c>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800058a:	4b50      	ldr	r3, [pc, #320]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	2b00      	cmp	r3, #0
 8000592:	d009      	beq.n	80005a8 <DMA1_Stream2_IRQHandler+0x7c>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000594:	4b4d      	ldr	r3, [pc, #308]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 800059c:	4b49      	ldr	r3, [pc, #292]	@ (80006c4 <DMA1_Stream2_IRQHandler+0x198>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4a48      	ldr	r2, [pc, #288]	@ (80006c4 <DMA1_Stream2_IRQHandler+0x198>)
 80005a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005a6:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 80005a8:	4b47      	ldr	r3, [pc, #284]	@ (80006c8 <DMA1_Stream2_IRQHandler+0x19c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d01c      	beq.n	80005ee <DMA1_Stream2_IRQHandler+0xc2>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80005b4:	4b45      	ldr	r3, [pc, #276]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	2204      	movs	r2, #4
 80005bc:	4013      	ands	r3, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d015      	beq.n	80005ee <DMA1_Stream2_IRQHandler+0xc2>
		{
			if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80005c2:	4b42      	ldr	r3, [pc, #264]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	2204      	movs	r2, #4
 80005ca:	4013      	ands	r3, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00e      	beq.n	80005ee <DMA1_Stream2_IRQHandler+0xc2>
			{
				if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80005d0:	4b3e      	ldr	r3, [pc, #248]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d009      	beq.n	80005ee <DMA1_Stream2_IRQHandler+0xc2>
				{
					__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80005da:	4b3c      	ldr	r3, [pc, #240]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005e0:	4798      	blx	r3
					DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 80005e2:	4b38      	ldr	r3, [pc, #224]	@ (80006c4 <DMA1_Stream2_IRQHandler+0x198>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	4a37      	ldr	r2, [pc, #220]	@ (80006c4 <DMA1_Stream2_IRQHandler+0x198>)
 80005e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005ec:	6093      	str	r3, [r2, #8]
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 80005ee:	4b36      	ldr	r3, [pc, #216]	@ (80006c8 <DMA1_Stream2_IRQHandler+0x19c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d02d      	beq.n	8000656 <DMA1_Stream2_IRQHandler+0x12a>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80005fa:	4b34      	ldr	r3, [pc, #208]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	2208      	movs	r2, #8
 8000602:	4013      	ands	r3, r2
 8000604:	2b00      	cmp	r3, #0
 8000606:	d026      	beq.n	8000656 <DMA1_Stream2_IRQHandler+0x12a>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000608:	4b30      	ldr	r3, [pc, #192]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800060e:	2b00      	cmp	r3, #0
 8000610:	d021      	beq.n	8000656 <DMA1_Stream2_IRQHandler+0x12a>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000612:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000618:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 800061a:	4b2a      	ldr	r3, [pc, #168]	@ (80006c4 <DMA1_Stream2_IRQHandler+0x198>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	4a29      	ldr	r2, [pc, #164]	@ (80006c4 <DMA1_Stream2_IRQHandler+0x198>)
 8000620:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000624:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000626:	4b29      	ldr	r3, [pc, #164]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800062c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000630:	4293      	cmp	r3, r2
 8000632:	d110      	bne.n	8000656 <DMA1_Stream2_IRQHandler+0x12a>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000634:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000640:	2b00      	cmp	r3, #0
 8000642:	d004      	beq.n	800064e <DMA1_Stream2_IRQHandler+0x122>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800064a:	4798      	blx	r3
 800064c:	e003      	b.n	8000656 <DMA1_Stream2_IRQHandler+0x12a>
					}
					else
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800064e:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000654:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8000656:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <DMA1_Stream2_IRQHandler+0x19c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d02d      	beq.n	80006be <DMA1_Stream2_IRQHandler+0x192>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	2208      	movs	r2, #8
 800066a:	4013      	ands	r3, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	d026      	beq.n	80006be <DMA1_Stream2_IRQHandler+0x192>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	2b00      	cmp	r3, #0
 8000678:	d021      	beq.n	80006be <DMA1_Stream2_IRQHandler+0x192>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000680:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <DMA1_Stream2_IRQHandler+0x198>)
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	4a0f      	ldr	r2, [pc, #60]	@ (80006c4 <DMA1_Stream2_IRQHandler+0x198>)
 8000688:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800068c:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000694:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000698:	4293      	cmp	r3, r2
 800069a:	d110      	bne.n	80006be <DMA1_Stream2_IRQHandler+0x192>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800069c:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d004      	beq.n	80006b6 <DMA1_Stream2_IRQHandler+0x18a>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80006b2:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 80006b4:	e003      	b.n	80006be <DMA1_Stream2_IRQHandler+0x192>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80006b6:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <DMA1_Stream2_IRQHandler+0x1a0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80006bc:	4798      	blx	r3
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40026000 	.word	0x40026000
 80006c8:	20000060 	.word	0x20000060
 80006cc:	20000028 	.word	0x20000028

080006d0 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 80006d4:	4b60      	ldr	r3, [pc, #384]	@ (8000858 <DMA1_Stream3_IRQHandler+0x188>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a60      	ldr	r2, [pc, #384]	@ (800085c <DMA1_Stream3_IRQHandler+0x18c>)
 80006da:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 80006dc:	4b5f      	ldr	r3, [pc, #380]	@ (800085c <DMA1_Stream3_IRQHandler+0x18c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d015      	beq.n	8000714 <DMA1_Stream3_IRQHandler+0x44>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80006e8:	4b5d      	ldr	r3, [pc, #372]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	2280      	movs	r2, #128	@ 0x80
 80006f0:	4013      	ands	r3, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d00e      	beq.n	8000714 <DMA1_Stream3_IRQHandler+0x44>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80006f6:	4b5a      	ldr	r3, [pc, #360]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d009      	beq.n	8000714 <DMA1_Stream3_IRQHandler+0x44>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000700:	4b57      	ldr	r3, [pc, #348]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000706:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8000708:	4b53      	ldr	r3, [pc, #332]	@ (8000858 <DMA1_Stream3_IRQHandler+0x188>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	4a52      	ldr	r2, [pc, #328]	@ (8000858 <DMA1_Stream3_IRQHandler+0x188>)
 800070e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000712:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8000714:	4b51      	ldr	r3, [pc, #324]	@ (800085c <DMA1_Stream3_IRQHandler+0x18c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d015      	beq.n	800074c <DMA1_Stream3_IRQHandler+0x7c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000720:	4b4f      	ldr	r3, [pc, #316]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	2202      	movs	r2, #2
 8000728:	4013      	ands	r3, r2
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00e      	beq.n	800074c <DMA1_Stream3_IRQHandler+0x7c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800072e:	4b4c      	ldr	r3, [pc, #304]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	2b00      	cmp	r3, #0
 8000736:	d009      	beq.n	800074c <DMA1_Stream3_IRQHandler+0x7c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000738:	4b49      	ldr	r3, [pc, #292]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8000740:	4b45      	ldr	r3, [pc, #276]	@ (8000858 <DMA1_Stream3_IRQHandler+0x188>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	4a44      	ldr	r2, [pc, #272]	@ (8000858 <DMA1_Stream3_IRQHandler+0x188>)
 8000746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800074a:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 800074c:	4b43      	ldr	r3, [pc, #268]	@ (800085c <DMA1_Stream3_IRQHandler+0x18c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000754:	2b00      	cmp	r3, #0
 8000756:	d015      	beq.n	8000784 <DMA1_Stream3_IRQHandler+0xb4>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000758:	4b41      	ldr	r3, [pc, #260]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	2204      	movs	r2, #4
 8000760:	4013      	ands	r3, r2
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00e      	beq.n	8000784 <DMA1_Stream3_IRQHandler+0xb4>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000766:	4b3e      	ldr	r3, [pc, #248]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076c:	2b00      	cmp	r3, #0
 800076e:	d009      	beq.n	8000784 <DMA1_Stream3_IRQHandler+0xb4>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000770:	4b3b      	ldr	r3, [pc, #236]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000776:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8000778:	4b37      	ldr	r3, [pc, #220]	@ (8000858 <DMA1_Stream3_IRQHandler+0x188>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	4a36      	ldr	r2, [pc, #216]	@ (8000858 <DMA1_Stream3_IRQHandler+0x188>)
 800077e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000782:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8000784:	4b35      	ldr	r3, [pc, #212]	@ (800085c <DMA1_Stream3_IRQHandler+0x18c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800078c:	2b00      	cmp	r3, #0
 800078e:	d02d      	beq.n	80007ec <DMA1_Stream3_IRQHandler+0x11c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000790:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	2208      	movs	r2, #8
 8000798:	4013      	ands	r3, r2
 800079a:	2b00      	cmp	r3, #0
 800079c:	d026      	beq.n	80007ec <DMA1_Stream3_IRQHandler+0x11c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800079e:	4b30      	ldr	r3, [pc, #192]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d021      	beq.n	80007ec <DMA1_Stream3_IRQHandler+0x11c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80007a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ae:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80007b0:	4b29      	ldr	r3, [pc, #164]	@ (8000858 <DMA1_Stream3_IRQHandler+0x188>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	4a28      	ldr	r2, [pc, #160]	@ (8000858 <DMA1_Stream3_IRQHandler+0x188>)
 80007b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007ba:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80007bc:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007c2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d110      	bne.n	80007ec <DMA1_Stream3_IRQHandler+0x11c>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80007ca:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <DMA1_Stream3_IRQHandler+0x114>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80007da:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80007e0:	4798      	blx	r3
 80007e2:	e003      	b.n	80007ec <DMA1_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80007e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80007ea:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <DMA1_Stream3_IRQHandler+0x18c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d02d      	beq.n	8000854 <DMA1_Stream3_IRQHandler+0x184>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80007f8:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	2210      	movs	r2, #16
 8000800:	4013      	ands	r3, r2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d026      	beq.n	8000854 <DMA1_Stream3_IRQHandler+0x184>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080c:	2b00      	cmp	r3, #0
 800080e:	d021      	beq.n	8000854 <DMA1_Stream3_IRQHandler+0x184>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000816:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <DMA1_Stream3_IRQHandler+0x188>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	4a0e      	ldr	r2, [pc, #56]	@ (8000858 <DMA1_Stream3_IRQHandler+0x188>)
 800081e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000822:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800082a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800082e:	4293      	cmp	r3, r2
 8000830:	d110      	bne.n	8000854 <DMA1_Stream3_IRQHandler+0x184>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800083e:	2b00      	cmp	r3, #0
 8000840:	d004      	beq.n	800084c <DMA1_Stream3_IRQHandler+0x17c>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000848:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 800084a:	e003      	b.n	8000854 <DMA1_Stream3_IRQHandler+0x184>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800084c:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <DMA1_Stream3_IRQHandler+0x190>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000852:	4798      	blx	r3
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40026000 	.word	0x40026000
 800085c:	20000060 	.word	0x20000060
 8000860:	2000002c 	.word	0x2000002c

08000864 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000868:	4b4f      	ldr	r3, [pc, #316]	@ (80009a8 <DMA1_Stream4_IRQHandler+0x144>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	4a4f      	ldr	r2, [pc, #316]	@ (80009ac <DMA1_Stream4_IRQHandler+0x148>)
 800086e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8000870:	4b4e      	ldr	r3, [pc, #312]	@ (80009ac <DMA1_Stream4_IRQHandler+0x148>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	2b00      	cmp	r3, #0
 800087a:	d00e      	beq.n	800089a <DMA1_Stream4_IRQHandler+0x36>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800087c:	4b4c      	ldr	r3, [pc, #304]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000882:	2b00      	cmp	r3, #0
 8000884:	d009      	beq.n	800089a <DMA1_Stream4_IRQHandler+0x36>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000886:	4b4a      	ldr	r3, [pc, #296]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800088c:	4798      	blx	r3
			DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 800088e:	4b46      	ldr	r3, [pc, #280]	@ (80009a8 <DMA1_Stream4_IRQHandler+0x144>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	4a45      	ldr	r2, [pc, #276]	@ (80009a8 <DMA1_Stream4_IRQHandler+0x144>)
 8000894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000898:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 800089a:	4b44      	ldr	r3, [pc, #272]	@ (80009ac <DMA1_Stream4_IRQHandler+0x148>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00e      	beq.n	80008c4 <DMA1_Stream4_IRQHandler+0x60>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80008a6:	4b42      	ldr	r3, [pc, #264]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d009      	beq.n	80008c4 <DMA1_Stream4_IRQHandler+0x60>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80008b0:	4b3f      	ldr	r3, [pc, #252]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <DMA1_Stream4_IRQHandler+0x144>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	4a3a      	ldr	r2, [pc, #232]	@ (80009a8 <DMA1_Stream4_IRQHandler+0x144>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80008c4:	4b39      	ldr	r3, [pc, #228]	@ (80009ac <DMA1_Stream4_IRQHandler+0x148>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 0308 	and.w	r3, r3, #8
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00e      	beq.n	80008ee <DMA1_Stream4_IRQHandler+0x8a>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80008d0:	4b37      	ldr	r3, [pc, #220]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d009      	beq.n	80008ee <DMA1_Stream4_IRQHandler+0x8a>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80008da:	4b35      	ldr	r3, [pc, #212]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e0:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80008e2:	4b31      	ldr	r3, [pc, #196]	@ (80009a8 <DMA1_Stream4_IRQHandler+0x144>)
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	4a30      	ldr	r2, [pc, #192]	@ (80009a8 <DMA1_Stream4_IRQHandler+0x144>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 80008ee:	4b2f      	ldr	r3, [pc, #188]	@ (80009ac <DMA1_Stream4_IRQHandler+0x148>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d026      	beq.n	8000948 <DMA1_Stream4_IRQHandler+0xe4>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80008fa:	4b2d      	ldr	r3, [pc, #180]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000900:	2b00      	cmp	r3, #0
 8000902:	d021      	beq.n	8000948 <DMA1_Stream4_IRQHandler+0xe4>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000904:	4b2a      	ldr	r3, [pc, #168]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800090a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 800090c:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <DMA1_Stream4_IRQHandler+0x144>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	4a25      	ldr	r2, [pc, #148]	@ (80009a8 <DMA1_Stream4_IRQHandler+0x144>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000918:	4b25      	ldr	r3, [pc, #148]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800091e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000922:	4293      	cmp	r3, r2
 8000924:	d110      	bne.n	8000948 <DMA1_Stream4_IRQHandler+0xe4>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000926:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000932:	2b00      	cmp	r3, #0
 8000934:	d004      	beq.n	8000940 <DMA1_Stream4_IRQHandler+0xdc>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000936:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800093c:	4798      	blx	r3
 800093e:	e003      	b.n	8000948 <DMA1_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000940:	4b1b      	ldr	r3, [pc, #108]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000946:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8000948:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <DMA1_Stream4_IRQHandler+0x148>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 0320 	and.w	r3, r3, #32
 8000950:	2b00      	cmp	r3, #0
 8000952:	d026      	beq.n	80009a2 <DMA1_Stream4_IRQHandler+0x13e>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000954:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	2b00      	cmp	r3, #0
 800095c:	d021      	beq.n	80009a2 <DMA1_Stream4_IRQHandler+0x13e>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000964:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <DMA1_Stream4_IRQHandler+0x144>)
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <DMA1_Stream4_IRQHandler+0x144>)
 800096c:	f043 0320 	orr.w	r3, r3, #32
 8000970:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000978:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800097c:	4293      	cmp	r3, r2
 800097e:	d110      	bne.n	80009a2 <DMA1_Stream4_IRQHandler+0x13e>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000980:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d004      	beq.n	800099a <DMA1_Stream4_IRQHandler+0x136>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000996:	4798      	blx	r3
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000998:	e003      	b.n	80009a2 <DMA1_Stream4_IRQHandler+0x13e>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800099a:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <DMA1_Stream4_IRQHandler+0x14c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009a0:	4798      	blx	r3
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40026000 	.word	0x40026000
 80009ac:	20000064 	.word	0x20000064
 80009b0:	20000030 	.word	0x20000030

080009b4 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80009b8:	4b4f      	ldr	r3, [pc, #316]	@ (8000af8 <DMA1_Stream5_IRQHandler+0x144>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	4a4f      	ldr	r2, [pc, #316]	@ (8000afc <DMA1_Stream5_IRQHandler+0x148>)
 80009be:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80009c0:	4b4e      	ldr	r3, [pc, #312]	@ (8000afc <DMA1_Stream5_IRQHandler+0x148>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d00e      	beq.n	80009ea <DMA1_Stream5_IRQHandler+0x36>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80009cc:	4b4c      	ldr	r3, [pc, #304]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d009      	beq.n	80009ea <DMA1_Stream5_IRQHandler+0x36>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80009d6:	4b4a      	ldr	r3, [pc, #296]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009dc:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80009de:	4b46      	ldr	r3, [pc, #280]	@ (8000af8 <DMA1_Stream5_IRQHandler+0x144>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	4a45      	ldr	r2, [pc, #276]	@ (8000af8 <DMA1_Stream5_IRQHandler+0x144>)
 80009e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 80009ea:	4b44      	ldr	r3, [pc, #272]	@ (8000afc <DMA1_Stream5_IRQHandler+0x148>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00e      	beq.n	8000a14 <DMA1_Stream5_IRQHandler+0x60>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80009f6:	4b42      	ldr	r3, [pc, #264]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d009      	beq.n	8000a14 <DMA1_Stream5_IRQHandler+0x60>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000a00:	4b3f      	ldr	r3, [pc, #252]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8000a08:	4b3b      	ldr	r3, [pc, #236]	@ (8000af8 <DMA1_Stream5_IRQHandler+0x144>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8000af8 <DMA1_Stream5_IRQHandler+0x144>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a12:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8000a14:	4b39      	ldr	r3, [pc, #228]	@ (8000afc <DMA1_Stream5_IRQHandler+0x148>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00e      	beq.n	8000a3e <DMA1_Stream5_IRQHandler+0x8a>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000a20:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d009      	beq.n	8000a3e <DMA1_Stream5_IRQHandler+0x8a>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000a2a:	4b35      	ldr	r3, [pc, #212]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a30:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8000a32:	4b31      	ldr	r3, [pc, #196]	@ (8000af8 <DMA1_Stream5_IRQHandler+0x144>)
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	4a30      	ldr	r2, [pc, #192]	@ (8000af8 <DMA1_Stream5_IRQHandler+0x144>)
 8000a38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a3c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000afc <DMA1_Stream5_IRQHandler+0x148>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d026      	beq.n	8000a98 <DMA1_Stream5_IRQHandler+0xe4>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d021      	beq.n	8000a98 <DMA1_Stream5_IRQHandler+0xe4>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000a54:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a5a:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <DMA1_Stream5_IRQHandler+0x144>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	4a25      	ldr	r2, [pc, #148]	@ (8000af8 <DMA1_Stream5_IRQHandler+0x144>)
 8000a62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a66:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000a68:	4b25      	ldr	r3, [pc, #148]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a6e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d110      	bne.n	8000a98 <DMA1_Stream5_IRQHandler+0xe4>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000a76:	4b22      	ldr	r3, [pc, #136]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d004      	beq.n	8000a90 <DMA1_Stream5_IRQHandler+0xdc>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000a86:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a8c:	4798      	blx	r3
 8000a8e:	e003      	b.n	8000a98 <DMA1_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000a90:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a96:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <DMA1_Stream5_IRQHandler+0x148>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d026      	beq.n	8000af2 <DMA1_Stream5_IRQHandler+0x13e>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000aa4:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d021      	beq.n	8000af2 <DMA1_Stream5_IRQHandler+0x13e>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ab4:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <DMA1_Stream5_IRQHandler+0x144>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	4a0f      	ldr	r2, [pc, #60]	@ (8000af8 <DMA1_Stream5_IRQHandler+0x144>)
 8000abc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ac0:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ac8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d110      	bne.n	8000af2 <DMA1_Stream5_IRQHandler+0x13e>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d004      	beq.n	8000aea <DMA1_Stream5_IRQHandler+0x136>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ae6:	4798      	blx	r3
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000ae8:	e003      	b.n	8000af2 <DMA1_Stream5_IRQHandler+0x13e>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000aea:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <DMA1_Stream5_IRQHandler+0x14c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000af0:	4798      	blx	r3
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40026000 	.word	0x40026000
 8000afc:	20000064 	.word	0x20000064
 8000b00:	20000034 	.word	0x20000034

08000b04 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000b08:	4b4f      	ldr	r3, [pc, #316]	@ (8000c48 <DMA1_Stream6_IRQHandler+0x144>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8000c4c <DMA1_Stream6_IRQHandler+0x148>)
 8000b0e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8000b10:	4b4e      	ldr	r3, [pc, #312]	@ (8000c4c <DMA1_Stream6_IRQHandler+0x148>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00e      	beq.n	8000b3a <DMA1_Stream6_IRQHandler+0x36>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d009      	beq.n	8000b3a <DMA1_Stream6_IRQHandler+0x36>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000b26:	4b4a      	ldr	r3, [pc, #296]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b2c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000b2e:	4b46      	ldr	r3, [pc, #280]	@ (8000c48 <DMA1_Stream6_IRQHandler+0x144>)
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	4a45      	ldr	r2, [pc, #276]	@ (8000c48 <DMA1_Stream6_IRQHandler+0x144>)
 8000b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b38:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8000b3a:	4b44      	ldr	r3, [pc, #272]	@ (8000c4c <DMA1_Stream6_IRQHandler+0x148>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00e      	beq.n	8000b64 <DMA1_Stream6_IRQHandler+0x60>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000b46:	4b42      	ldr	r3, [pc, #264]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d009      	beq.n	8000b64 <DMA1_Stream6_IRQHandler+0x60>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000b50:	4b3f      	ldr	r3, [pc, #252]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000b58:	4b3b      	ldr	r3, [pc, #236]	@ (8000c48 <DMA1_Stream6_IRQHandler+0x144>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8000c48 <DMA1_Stream6_IRQHandler+0x144>)
 8000b5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b62:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8000b64:	4b39      	ldr	r3, [pc, #228]	@ (8000c4c <DMA1_Stream6_IRQHandler+0x148>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00e      	beq.n	8000b8e <DMA1_Stream6_IRQHandler+0x8a>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000b70:	4b37      	ldr	r3, [pc, #220]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d009      	beq.n	8000b8e <DMA1_Stream6_IRQHandler+0x8a>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000b7a:	4b35      	ldr	r3, [pc, #212]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b80:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000b82:	4b31      	ldr	r3, [pc, #196]	@ (8000c48 <DMA1_Stream6_IRQHandler+0x144>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	4a30      	ldr	r2, [pc, #192]	@ (8000c48 <DMA1_Stream6_IRQHandler+0x144>)
 8000b88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b8c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <DMA1_Stream6_IRQHandler+0x148>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d026      	beq.n	8000be8 <DMA1_Stream6_IRQHandler+0xe4>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d021      	beq.n	8000be8 <DMA1_Stream6_IRQHandler+0xe4>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000baa:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000bac:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <DMA1_Stream6_IRQHandler+0x144>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	4a25      	ldr	r2, [pc, #148]	@ (8000c48 <DMA1_Stream6_IRQHandler+0x144>)
 8000bb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bb6:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000bb8:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bbe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d110      	bne.n	8000be8 <DMA1_Stream6_IRQHandler+0xe4>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000bc6:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d004      	beq.n	8000be0 <DMA1_Stream6_IRQHandler+0xdc>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000bdc:	4798      	blx	r3
 8000bde:	e003      	b.n	8000be8 <DMA1_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000be6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8000be8:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <DMA1_Stream6_IRQHandler+0x148>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d026      	beq.n	8000c42 <DMA1_Stream6_IRQHandler+0x13e>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d021      	beq.n	8000c42 <DMA1_Stream6_IRQHandler+0x13e>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c04:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <DMA1_Stream6_IRQHandler+0x144>)
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c48 <DMA1_Stream6_IRQHandler+0x144>)
 8000c0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c10:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c18:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d110      	bne.n	8000c42 <DMA1_Stream6_IRQHandler+0x13e>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d004      	beq.n	8000c3a <DMA1_Stream6_IRQHandler+0x136>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c36:	4798      	blx	r3
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000c38:	e003      	b.n	8000c42 <DMA1_Stream6_IRQHandler+0x13e>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000c3a:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <DMA1_Stream6_IRQHandler+0x14c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c40:	4798      	blx	r3
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40026000 	.word	0x40026000
 8000c4c:	20000064 	.word	0x20000064
 8000c50:	20000038 	.word	0x20000038

08000c54 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000c58:	4b4f      	ldr	r3, [pc, #316]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x144>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	4a4f      	ldr	r2, [pc, #316]	@ (8000d9c <DMA1_Stream7_IRQHandler+0x148>)
 8000c5e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8000c60:	4b4e      	ldr	r3, [pc, #312]	@ (8000d9c <DMA1_Stream7_IRQHandler+0x148>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00e      	beq.n	8000c8a <DMA1_Stream7_IRQHandler+0x36>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d009      	beq.n	8000c8a <DMA1_Stream7_IRQHandler+0x36>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000c76:	4b4a      	ldr	r3, [pc, #296]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c7c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000c7e:	4b46      	ldr	r3, [pc, #280]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x144>)
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	4a45      	ldr	r2, [pc, #276]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x144>)
 8000c84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c88:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8000c8a:	4b44      	ldr	r3, [pc, #272]	@ (8000d9c <DMA1_Stream7_IRQHandler+0x148>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00e      	beq.n	8000cb4 <DMA1_Stream7_IRQHandler+0x60>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000c96:	4b42      	ldr	r3, [pc, #264]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d009      	beq.n	8000cb4 <DMA1_Stream7_IRQHandler+0x60>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000ca0:	4b3f      	ldr	r3, [pc, #252]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x144>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	4a3a      	ldr	r2, [pc, #232]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x144>)
 8000cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cb2:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8000cb4:	4b39      	ldr	r3, [pc, #228]	@ (8000d9c <DMA1_Stream7_IRQHandler+0x148>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00e      	beq.n	8000cde <DMA1_Stream7_IRQHandler+0x8a>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000cc0:	4b37      	ldr	r3, [pc, #220]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d009      	beq.n	8000cde <DMA1_Stream7_IRQHandler+0x8a>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000cca:	4b35      	ldr	r3, [pc, #212]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd0:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x144>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	4a30      	ldr	r2, [pc, #192]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x144>)
 8000cd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cdc:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8000cde:	4b2f      	ldr	r3, [pc, #188]	@ (8000d9c <DMA1_Stream7_IRQHandler+0x148>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d026      	beq.n	8000d38 <DMA1_Stream7_IRQHandler+0xe4>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000cea:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d021      	beq.n	8000d38 <DMA1_Stream7_IRQHandler+0xe4>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cfa:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000cfc:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x144>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	4a25      	ldr	r2, [pc, #148]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x144>)
 8000d02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d06:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000d08:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d0e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d110      	bne.n	8000d38 <DMA1_Stream7_IRQHandler+0xe4>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000d16:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <DMA1_Stream7_IRQHandler+0xdc>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000d26:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d2c:	4798      	blx	r3
 8000d2e:	e003      	b.n	8000d38 <DMA1_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000d30:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d36:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <DMA1_Stream7_IRQHandler+0x148>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d026      	beq.n	8000d92 <DMA1_Stream7_IRQHandler+0x13e>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d021      	beq.n	8000d92 <DMA1_Stream7_IRQHandler+0x13e>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000d4e:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d54:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x144>)
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d98 <DMA1_Stream7_IRQHandler+0x144>)
 8000d5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d60:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d68:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d110      	bne.n	8000d92 <DMA1_Stream7_IRQHandler+0x13e>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000d70:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d004      	beq.n	8000d8a <DMA1_Stream7_IRQHandler+0x136>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000d80:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d86:	4798      	blx	r3
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8000d88:	e003      	b.n	8000d92 <DMA1_Stream7_IRQHandler+0x13e>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000d8a:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <DMA1_Stream7_IRQHandler+0x14c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d90:	4798      	blx	r3
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40026000 	.word	0x40026000
 8000d9c:	20000064 	.word	0x20000064
 8000da0:	2000003c 	.word	0x2000003c

08000da4 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000da8:	4b60      	ldr	r3, [pc, #384]	@ (8000f2c <DMA2_Stream0_IRQHandler+0x188>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a60      	ldr	r2, [pc, #384]	@ (8000f30 <DMA2_Stream0_IRQHandler+0x18c>)
 8000dae:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000db0:	4b5f      	ldr	r3, [pc, #380]	@ (8000f30 <DMA2_Stream0_IRQHandler+0x18c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d015      	beq.n	8000de8 <DMA2_Stream0_IRQHandler+0x44>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000dbc:	4b5d      	ldr	r3, [pc, #372]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	2280      	movs	r2, #128	@ 0x80
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00e      	beq.n	8000de8 <DMA2_Stream0_IRQHandler+0x44>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000dca:	4b5a      	ldr	r3, [pc, #360]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d009      	beq.n	8000de8 <DMA2_Stream0_IRQHandler+0x44>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000dd4:	4b57      	ldr	r3, [pc, #348]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dda:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000ddc:	4b53      	ldr	r3, [pc, #332]	@ (8000f2c <DMA2_Stream0_IRQHandler+0x188>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4a52      	ldr	r2, [pc, #328]	@ (8000f2c <DMA2_Stream0_IRQHandler+0x188>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000de8:	4b51      	ldr	r3, [pc, #324]	@ (8000f30 <DMA2_Stream0_IRQHandler+0x18c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d015      	beq.n	8000e20 <DMA2_Stream0_IRQHandler+0x7c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000df4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00e      	beq.n	8000e20 <DMA2_Stream0_IRQHandler+0x7c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000e02:	4b4c      	ldr	r3, [pc, #304]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d009      	beq.n	8000e20 <DMA2_Stream0_IRQHandler+0x7c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000e0c:	4b49      	ldr	r3, [pc, #292]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000e14:	4b45      	ldr	r3, [pc, #276]	@ (8000f2c <DMA2_Stream0_IRQHandler+0x188>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4a44      	ldr	r2, [pc, #272]	@ (8000f2c <DMA2_Stream0_IRQHandler+0x188>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000e20:	4b43      	ldr	r3, [pc, #268]	@ (8000f30 <DMA2_Stream0_IRQHandler+0x18c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d015      	beq.n	8000e58 <DMA2_Stream0_IRQHandler+0xb4>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000e2c:	4b41      	ldr	r3, [pc, #260]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	2204      	movs	r2, #4
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00e      	beq.n	8000e58 <DMA2_Stream0_IRQHandler+0xb4>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d009      	beq.n	8000e58 <DMA2_Stream0_IRQHandler+0xb4>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000e44:	4b3b      	ldr	r3, [pc, #236]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000e4c:	4b37      	ldr	r3, [pc, #220]	@ (8000f2c <DMA2_Stream0_IRQHandler+0x188>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	4a36      	ldr	r2, [pc, #216]	@ (8000f2c <DMA2_Stream0_IRQHandler+0x188>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000e58:	4b35      	ldr	r3, [pc, #212]	@ (8000f30 <DMA2_Stream0_IRQHandler+0x18c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d02d      	beq.n	8000ec0 <DMA2_Stream0_IRQHandler+0x11c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000e64:	4b33      	ldr	r3, [pc, #204]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d026      	beq.n	8000ec0 <DMA2_Stream0_IRQHandler+0x11c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000e72:	4b30      	ldr	r3, [pc, #192]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d021      	beq.n	8000ec0 <DMA2_Stream0_IRQHandler+0x11c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e82:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000e84:	4b29      	ldr	r3, [pc, #164]	@ (8000f2c <DMA2_Stream0_IRQHandler+0x188>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	4a28      	ldr	r2, [pc, #160]	@ (8000f2c <DMA2_Stream0_IRQHandler+0x188>)
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000e90:	4b28      	ldr	r3, [pc, #160]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e96:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d110      	bne.n	8000ec0 <DMA2_Stream0_IRQHandler+0x11c>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000e9e:	4b25      	ldr	r3, [pc, #148]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d004      	beq.n	8000eb8 <DMA2_Stream0_IRQHandler+0x114>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000eae:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000eb4:	4798      	blx	r3
 8000eb6:	e003      	b.n	8000ec0 <DMA2_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ebe:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <DMA2_Stream0_IRQHandler+0x18c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0320 	and.w	r3, r3, #32
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d02d      	beq.n	8000f28 <DMA2_Stream0_IRQHandler+0x184>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000ecc:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	2210      	movs	r2, #16
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d026      	beq.n	8000f28 <DMA2_Stream0_IRQHandler+0x184>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d021      	beq.n	8000f28 <DMA2_Stream0_IRQHandler+0x184>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000ee4:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <DMA2_Stream0_IRQHandler+0x188>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8000f2c <DMA2_Stream0_IRQHandler+0x188>)
 8000ef2:	f043 0320 	orr.w	r3, r3, #32
 8000ef6:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000efe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d110      	bne.n	8000f28 <DMA2_Stream0_IRQHandler+0x184>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f06:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d004      	beq.n	8000f20 <DMA2_Stream0_IRQHandler+0x17c>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f16:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f1c:	4798      	blx	r3
				}
			}
		}

	}
}
 8000f1e:	e003      	b.n	8000f28 <DMA2_Stream0_IRQHandler+0x184>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f20:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <DMA2_Stream0_IRQHandler+0x190>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f26:	4798      	blx	r3
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40026400 	.word	0x40026400
 8000f30:	20000060 	.word	0x20000060
 8000f34:	20000040 	.word	0x20000040

08000f38 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800107c <DMA2_Stream1_IRQHandler+0x144>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a4f      	ldr	r2, [pc, #316]	@ (8001080 <DMA2_Stream1_IRQHandler+0x148>)
 8000f42:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8000f44:	4b4e      	ldr	r3, [pc, #312]	@ (8001080 <DMA2_Stream1_IRQHandler+0x148>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00e      	beq.n	8000f6e <DMA2_Stream1_IRQHandler+0x36>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000f50:	4b4c      	ldr	r3, [pc, #304]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d009      	beq.n	8000f6e <DMA2_Stream1_IRQHandler+0x36>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f60:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000f62:	4b46      	ldr	r3, [pc, #280]	@ (800107c <DMA2_Stream1_IRQHandler+0x144>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	4a45      	ldr	r2, [pc, #276]	@ (800107c <DMA2_Stream1_IRQHandler+0x144>)
 8000f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f6c:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8000f6e:	4b44      	ldr	r3, [pc, #272]	@ (8001080 <DMA2_Stream1_IRQHandler+0x148>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00e      	beq.n	8000f98 <DMA2_Stream1_IRQHandler+0x60>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000f7a:	4b42      	ldr	r3, [pc, #264]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d009      	beq.n	8000f98 <DMA2_Stream1_IRQHandler+0x60>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000f84:	4b3f      	ldr	r3, [pc, #252]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800107c <DMA2_Stream1_IRQHandler+0x144>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	4a3a      	ldr	r2, [pc, #232]	@ (800107c <DMA2_Stream1_IRQHandler+0x144>)
 8000f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f96:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8000f98:	4b39      	ldr	r3, [pc, #228]	@ (8001080 <DMA2_Stream1_IRQHandler+0x148>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00e      	beq.n	8000fc2 <DMA2_Stream1_IRQHandler+0x8a>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000fa4:	4b37      	ldr	r3, [pc, #220]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d009      	beq.n	8000fc2 <DMA2_Stream1_IRQHandler+0x8a>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000fae:	4b35      	ldr	r3, [pc, #212]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb4:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000fb6:	4b31      	ldr	r3, [pc, #196]	@ (800107c <DMA2_Stream1_IRQHandler+0x144>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	4a30      	ldr	r2, [pc, #192]	@ (800107c <DMA2_Stream1_IRQHandler+0x144>)
 8000fbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fc0:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001080 <DMA2_Stream1_IRQHandler+0x148>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d026      	beq.n	800101c <DMA2_Stream1_IRQHandler+0xe4>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000fce:	4b2d      	ldr	r3, [pc, #180]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d021      	beq.n	800101c <DMA2_Stream1_IRQHandler+0xe4>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fde:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	@ (800107c <DMA2_Stream1_IRQHandler+0x144>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	4a25      	ldr	r2, [pc, #148]	@ (800107c <DMA2_Stream1_IRQHandler+0x144>)
 8000fe6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fea:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000fec:	4b25      	ldr	r3, [pc, #148]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ff2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d110      	bne.n	800101c <DMA2_Stream1_IRQHandler+0xe4>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000ffa:	4b22      	ldr	r3, [pc, #136]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <DMA2_Stream1_IRQHandler+0xdc>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800100a:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001010:	4798      	blx	r3
 8001012:	e003      	b.n	800101c <DMA2_Stream1_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001014:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800101a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 800101c:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <DMA2_Stream1_IRQHandler+0x148>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001024:	2b00      	cmp	r3, #0
 8001026:	d026      	beq.n	8001076 <DMA2_Stream1_IRQHandler+0x13e>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	2b00      	cmp	r3, #0
 8001030:	d021      	beq.n	8001076 <DMA2_Stream1_IRQHandler+0x13e>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001032:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001038:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <DMA2_Stream1_IRQHandler+0x144>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <DMA2_Stream1_IRQHandler+0x144>)
 8001040:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001044:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001046:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800104c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001050:	4293      	cmp	r3, r2
 8001052:	d110      	bne.n	8001076 <DMA2_Stream1_IRQHandler+0x13e>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d004      	beq.n	800106e <DMA2_Stream1_IRQHandler+0x136>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800106a:	4798      	blx	r3
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 800106c:	e003      	b.n	8001076 <DMA2_Stream1_IRQHandler+0x13e>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800106e:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <DMA2_Stream1_IRQHandler+0x14c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001074:	4798      	blx	r3
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40026400 	.word	0x40026400
 8001080:	20000060 	.word	0x20000060
 8001084:	20000044 	.word	0x20000044

08001088 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 800108c:	4b4f      	ldr	r3, [pc, #316]	@ (80011cc <DMA2_Stream2_IRQHandler+0x144>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a4f      	ldr	r2, [pc, #316]	@ (80011d0 <DMA2_Stream2_IRQHandler+0x148>)
 8001092:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8001094:	4b4e      	ldr	r3, [pc, #312]	@ (80011d0 <DMA2_Stream2_IRQHandler+0x148>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00e      	beq.n	80010be <DMA2_Stream2_IRQHandler+0x36>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80010a0:	4b4c      	ldr	r3, [pc, #304]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d009      	beq.n	80010be <DMA2_Stream2_IRQHandler+0x36>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80010aa:	4b4a      	ldr	r3, [pc, #296]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010b0:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80010b2:	4b46      	ldr	r3, [pc, #280]	@ (80011cc <DMA2_Stream2_IRQHandler+0x144>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	4a45      	ldr	r2, [pc, #276]	@ (80011cc <DMA2_Stream2_IRQHandler+0x144>)
 80010b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010bc:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 80010be:	4b44      	ldr	r3, [pc, #272]	@ (80011d0 <DMA2_Stream2_IRQHandler+0x148>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00e      	beq.n	80010e8 <DMA2_Stream2_IRQHandler+0x60>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80010ca:	4b42      	ldr	r3, [pc, #264]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d009      	beq.n	80010e8 <DMA2_Stream2_IRQHandler+0x60>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80010d4:	4b3f      	ldr	r3, [pc, #252]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80010dc:	4b3b      	ldr	r3, [pc, #236]	@ (80011cc <DMA2_Stream2_IRQHandler+0x144>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a3a      	ldr	r2, [pc, #232]	@ (80011cc <DMA2_Stream2_IRQHandler+0x144>)
 80010e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e6:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 80010e8:	4b39      	ldr	r3, [pc, #228]	@ (80011d0 <DMA2_Stream2_IRQHandler+0x148>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00e      	beq.n	8001112 <DMA2_Stream2_IRQHandler+0x8a>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80010f4:	4b37      	ldr	r3, [pc, #220]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d009      	beq.n	8001112 <DMA2_Stream2_IRQHandler+0x8a>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80010fe:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001104:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001106:	4b31      	ldr	r3, [pc, #196]	@ (80011cc <DMA2_Stream2_IRQHandler+0x144>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	4a30      	ldr	r2, [pc, #192]	@ (80011cc <DMA2_Stream2_IRQHandler+0x144>)
 800110c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001110:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001112:	4b2f      	ldr	r3, [pc, #188]	@ (80011d0 <DMA2_Stream2_IRQHandler+0x148>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d026      	beq.n	800116c <DMA2_Stream2_IRQHandler+0xe4>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800111e:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001124:	2b00      	cmp	r3, #0
 8001126:	d021      	beq.n	800116c <DMA2_Stream2_IRQHandler+0xe4>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001128:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800112e:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001130:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <DMA2_Stream2_IRQHandler+0x144>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a25      	ldr	r2, [pc, #148]	@ (80011cc <DMA2_Stream2_IRQHandler+0x144>)
 8001136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800113a:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001142:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001146:	4293      	cmp	r3, r2
 8001148:	d110      	bne.n	800116c <DMA2_Stream2_IRQHandler+0xe4>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800114a:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <DMA2_Stream2_IRQHandler+0xdc>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800115a:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001160:	4798      	blx	r3
 8001162:	e003      	b.n	800116c <DMA2_Stream2_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800116a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <DMA2_Stream2_IRQHandler+0x148>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d026      	beq.n	80011c6 <DMA2_Stream2_IRQHandler+0x13e>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	2b00      	cmp	r3, #0
 8001180:	d021      	beq.n	80011c6 <DMA2_Stream2_IRQHandler+0x13e>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001188:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <DMA2_Stream2_IRQHandler+0x144>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4a0f      	ldr	r2, [pc, #60]	@ (80011cc <DMA2_Stream2_IRQHandler+0x144>)
 8001190:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001194:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d110      	bne.n	80011c6 <DMA2_Stream2_IRQHandler+0x13e>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <DMA2_Stream2_IRQHandler+0x136>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ba:	4798      	blx	r3
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80011bc:	e003      	b.n	80011c6 <DMA2_Stream2_IRQHandler+0x13e>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <DMA2_Stream2_IRQHandler+0x14c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c4:	4798      	blx	r3
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40026400 	.word	0x40026400
 80011d0:	20000060 	.word	0x20000060
 80011d4:	20000048 	.word	0x20000048

080011d8 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 80011dc:	4b60      	ldr	r3, [pc, #384]	@ (8001360 <DMA2_Stream3_IRQHandler+0x188>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a60      	ldr	r2, [pc, #384]	@ (8001364 <DMA2_Stream3_IRQHandler+0x18c>)
 80011e2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 80011e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001364 <DMA2_Stream3_IRQHandler+0x18c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d015      	beq.n	800121c <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80011f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	2280      	movs	r2, #128	@ 0x80
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00e      	beq.n	800121c <DMA2_Stream3_IRQHandler+0x44>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80011fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <DMA2_Stream3_IRQHandler+0x44>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001208:	4b57      	ldr	r3, [pc, #348]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800120e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001210:	4b53      	ldr	r3, [pc, #332]	@ (8001360 <DMA2_Stream3_IRQHandler+0x188>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a52      	ldr	r2, [pc, #328]	@ (8001360 <DMA2_Stream3_IRQHandler+0x188>)
 8001216:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800121a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 800121c:	4b51      	ldr	r3, [pc, #324]	@ (8001364 <DMA2_Stream3_IRQHandler+0x18c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d015      	beq.n	8001254 <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001228:	4b4f      	ldr	r3, [pc, #316]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2202      	movs	r2, #2
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00e      	beq.n	8001254 <DMA2_Stream3_IRQHandler+0x7c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001236:	4b4c      	ldr	r3, [pc, #304]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	2b00      	cmp	r3, #0
 800123e:	d009      	beq.n	8001254 <DMA2_Stream3_IRQHandler+0x7c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001240:	4b49      	ldr	r3, [pc, #292]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001248:	4b45      	ldr	r3, [pc, #276]	@ (8001360 <DMA2_Stream3_IRQHandler+0x188>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4a44      	ldr	r2, [pc, #272]	@ (8001360 <DMA2_Stream3_IRQHandler+0x188>)
 800124e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001252:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001254:	4b43      	ldr	r3, [pc, #268]	@ (8001364 <DMA2_Stream3_IRQHandler+0x18c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d015      	beq.n	800128c <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001260:	4b41      	ldr	r3, [pc, #260]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	2204      	movs	r2, #4
 8001268:	4013      	ands	r3, r2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00e      	beq.n	800128c <DMA2_Stream3_IRQHandler+0xb4>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800126e:	4b3e      	ldr	r3, [pc, #248]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001274:	2b00      	cmp	r3, #0
 8001276:	d009      	beq.n	800128c <DMA2_Stream3_IRQHandler+0xb4>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001278:	4b3b      	ldr	r3, [pc, #236]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001280:	4b37      	ldr	r3, [pc, #220]	@ (8001360 <DMA2_Stream3_IRQHandler+0x188>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	4a36      	ldr	r2, [pc, #216]	@ (8001360 <DMA2_Stream3_IRQHandler+0x188>)
 8001286:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800128a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 800128c:	4b35      	ldr	r3, [pc, #212]	@ (8001364 <DMA2_Stream3_IRQHandler+0x18c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d02d      	beq.n	80012f4 <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001298:	4b33      	ldr	r3, [pc, #204]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2208      	movs	r2, #8
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d026      	beq.n	80012f4 <DMA2_Stream3_IRQHandler+0x11c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80012a6:	4b30      	ldr	r3, [pc, #192]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d021      	beq.n	80012f4 <DMA2_Stream3_IRQHandler+0x11c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80012b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012b6:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80012b8:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <DMA2_Stream3_IRQHandler+0x188>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a28      	ldr	r2, [pc, #160]	@ (8001360 <DMA2_Stream3_IRQHandler+0x188>)
 80012be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012c2:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80012c4:	4b28      	ldr	r3, [pc, #160]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ca:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d110      	bne.n	80012f4 <DMA2_Stream3_IRQHandler+0x11c>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80012d2:	4b25      	ldr	r3, [pc, #148]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <DMA2_Stream3_IRQHandler+0x114>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012e8:	4798      	blx	r3
 80012ea:	e003      	b.n	80012f4 <DMA2_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80012ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012f2:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <DMA2_Stream3_IRQHandler+0x18c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d02d      	beq.n	800135c <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2210      	movs	r2, #16
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d026      	beq.n	800135c <DMA2_Stream3_IRQHandler+0x184>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001314:	2b00      	cmp	r3, #0
 8001316:	d021      	beq.n	800135c <DMA2_Stream3_IRQHandler+0x184>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <DMA2_Stream3_IRQHandler+0x188>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <DMA2_Stream3_IRQHandler+0x188>)
 8001326:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800132a:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800132c:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001332:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001336:	4293      	cmp	r3, r2
 8001338:	d110      	bne.n	800135c <DMA2_Stream3_IRQHandler+0x184>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800133a:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d004      	beq.n	8001354 <DMA2_Stream3_IRQHandler+0x17c>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001350:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8001352:	e003      	b.n	800135c <DMA2_Stream3_IRQHandler+0x184>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <DMA2_Stream3_IRQHandler+0x190>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800135a:	4798      	blx	r3
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40026400 	.word	0x40026400
 8001364:	20000060 	.word	0x20000060
 8001368:	2000004c 	.word	0x2000004c

0800136c <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001370:	4b4f      	ldr	r3, [pc, #316]	@ (80014b0 <DMA2_Stream4_IRQHandler+0x144>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	@ (80014b4 <DMA2_Stream4_IRQHandler+0x148>)
 8001376:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8001378:	4b4e      	ldr	r3, [pc, #312]	@ (80014b4 <DMA2_Stream4_IRQHandler+0x148>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00e      	beq.n	80013a2 <DMA2_Stream4_IRQHandler+0x36>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001384:	4b4c      	ldr	r3, [pc, #304]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <DMA2_Stream4_IRQHandler+0x36>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800138e:	4b4a      	ldr	r3, [pc, #296]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001394:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8001396:	4b46      	ldr	r3, [pc, #280]	@ (80014b0 <DMA2_Stream4_IRQHandler+0x144>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4a45      	ldr	r2, [pc, #276]	@ (80014b0 <DMA2_Stream4_IRQHandler+0x144>)
 800139c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a0:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 80013a2:	4b44      	ldr	r3, [pc, #272]	@ (80014b4 <DMA2_Stream4_IRQHandler+0x148>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00e      	beq.n	80013cc <DMA2_Stream4_IRQHandler+0x60>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80013ae:	4b42      	ldr	r3, [pc, #264]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d009      	beq.n	80013cc <DMA2_Stream4_IRQHandler+0x60>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80013b8:	4b3f      	ldr	r3, [pc, #252]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80013c0:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <DMA2_Stream4_IRQHandler+0x144>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4a3a      	ldr	r2, [pc, #232]	@ (80014b0 <DMA2_Stream4_IRQHandler+0x144>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80013cc:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <DMA2_Stream4_IRQHandler+0x148>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00e      	beq.n	80013f6 <DMA2_Stream4_IRQHandler+0x8a>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80013d8:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <DMA2_Stream4_IRQHandler+0x8a>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80013e2:	4b35      	ldr	r3, [pc, #212]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80013ea:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <DMA2_Stream4_IRQHandler+0x144>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	4a30      	ldr	r2, [pc, #192]	@ (80014b0 <DMA2_Stream4_IRQHandler+0x144>)
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 80013f6:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <DMA2_Stream4_IRQHandler+0x148>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d026      	beq.n	8001450 <DMA2_Stream4_IRQHandler+0xe4>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001402:	4b2d      	ldr	r3, [pc, #180]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001408:	2b00      	cmp	r3, #0
 800140a:	d021      	beq.n	8001450 <DMA2_Stream4_IRQHandler+0xe4>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800140c:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001412:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001414:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <DMA2_Stream4_IRQHandler+0x144>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a25      	ldr	r2, [pc, #148]	@ (80014b0 <DMA2_Stream4_IRQHandler+0x144>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001420:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001426:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800142a:	4293      	cmp	r3, r2
 800142c:	d110      	bne.n	8001450 <DMA2_Stream4_IRQHandler+0xe4>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800142e:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <DMA2_Stream4_IRQHandler+0xdc>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800143e:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001444:	4798      	blx	r3
 8001446:	e003      	b.n	8001450 <DMA2_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001448:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8001450:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <DMA2_Stream4_IRQHandler+0x148>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	2b00      	cmp	r3, #0
 800145a:	d026      	beq.n	80014aa <DMA2_Stream4_IRQHandler+0x13e>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	2b00      	cmp	r3, #0
 8001464:	d021      	beq.n	80014aa <DMA2_Stream4_IRQHandler+0x13e>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800146c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <DMA2_Stream4_IRQHandler+0x144>)
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	4a0f      	ldr	r2, [pc, #60]	@ (80014b0 <DMA2_Stream4_IRQHandler+0x144>)
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001480:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001484:	4293      	cmp	r3, r2
 8001486:	d110      	bne.n	80014aa <DMA2_Stream4_IRQHandler+0x13e>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <DMA2_Stream4_IRQHandler+0x136>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001498:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800149e:	4798      	blx	r3
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80014a0:	e003      	b.n	80014aa <DMA2_Stream4_IRQHandler+0x13e>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80014a2:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <DMA2_Stream4_IRQHandler+0x14c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a8:	4798      	blx	r3
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40026400 	.word	0x40026400
 80014b4:	20000064 	.word	0x20000064
 80014b8:	20000050 	.word	0x20000050

080014bc <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80014c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001600 <DMA2_Stream5_IRQHandler+0x144>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001604 <DMA2_Stream5_IRQHandler+0x148>)
 80014c6:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80014c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001604 <DMA2_Stream5_IRQHandler+0x148>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00e      	beq.n	80014f2 <DMA2_Stream5_IRQHandler+0x36>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80014d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <DMA2_Stream5_IRQHandler+0x36>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80014de:	4b4a      	ldr	r3, [pc, #296]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80014e6:	4b46      	ldr	r3, [pc, #280]	@ (8001600 <DMA2_Stream5_IRQHandler+0x144>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	4a45      	ldr	r2, [pc, #276]	@ (8001600 <DMA2_Stream5_IRQHandler+0x144>)
 80014ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014f0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 80014f2:	4b44      	ldr	r3, [pc, #272]	@ (8001604 <DMA2_Stream5_IRQHandler+0x148>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00e      	beq.n	800151c <DMA2_Stream5_IRQHandler+0x60>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80014fe:	4b42      	ldr	r3, [pc, #264]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <DMA2_Stream5_IRQHandler+0x60>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001508:	4b3f      	ldr	r3, [pc, #252]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001510:	4b3b      	ldr	r3, [pc, #236]	@ (8001600 <DMA2_Stream5_IRQHandler+0x144>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4a3a      	ldr	r2, [pc, #232]	@ (8001600 <DMA2_Stream5_IRQHandler+0x144>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 800151c:	4b39      	ldr	r3, [pc, #228]	@ (8001604 <DMA2_Stream5_IRQHandler+0x148>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00e      	beq.n	8001546 <DMA2_Stream5_IRQHandler+0x8a>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001528:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <DMA2_Stream5_IRQHandler+0x8a>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001532:	4b35      	ldr	r3, [pc, #212]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001538:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800153a:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <DMA2_Stream5_IRQHandler+0x144>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	4a30      	ldr	r2, [pc, #192]	@ (8001600 <DMA2_Stream5_IRQHandler+0x144>)
 8001540:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001544:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8001546:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <DMA2_Stream5_IRQHandler+0x148>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800154e:	2b00      	cmp	r3, #0
 8001550:	d026      	beq.n	80015a0 <DMA2_Stream5_IRQHandler+0xe4>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001552:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001558:	2b00      	cmp	r3, #0
 800155a:	d021      	beq.n	80015a0 <DMA2_Stream5_IRQHandler+0xe4>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800155c:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001562:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001564:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <DMA2_Stream5_IRQHandler+0x144>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4a25      	ldr	r2, [pc, #148]	@ (8001600 <DMA2_Stream5_IRQHandler+0x144>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156e:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001570:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001576:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800157a:	4293      	cmp	r3, r2
 800157c:	d110      	bne.n	80015a0 <DMA2_Stream5_IRQHandler+0xe4>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800157e:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d004      	beq.n	8001598 <DMA2_Stream5_IRQHandler+0xdc>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001594:	4798      	blx	r3
 8001596:	e003      	b.n	80015a0 <DMA2_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <DMA2_Stream5_IRQHandler+0x148>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d026      	beq.n	80015fa <DMA2_Stream5_IRQHandler+0x13e>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d021      	beq.n	80015fa <DMA2_Stream5_IRQHandler+0x13e>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015bc:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <DMA2_Stream5_IRQHandler+0x144>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001600 <DMA2_Stream5_IRQHandler+0x144>)
 80015c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015c8:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d110      	bne.n	80015fa <DMA2_Stream5_IRQHandler+0x13e>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d004      	beq.n	80015f2 <DMA2_Stream5_IRQHandler+0x136>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ee:	4798      	blx	r3
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80015f0:	e003      	b.n	80015fa <DMA2_Stream5_IRQHandler+0x13e>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80015f2:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <DMA2_Stream5_IRQHandler+0x14c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f8:	4798      	blx	r3
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40026400 	.word	0x40026400
 8001604:	20000064 	.word	0x20000064
 8001608:	20000054 	.word	0x20000054

0800160c <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001610:	4b4f      	ldr	r3, [pc, #316]	@ (8001750 <DMA2_Stream6_IRQHandler+0x144>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a4f      	ldr	r2, [pc, #316]	@ (8001754 <DMA2_Stream6_IRQHandler+0x148>)
 8001616:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8001618:	4b4e      	ldr	r3, [pc, #312]	@ (8001754 <DMA2_Stream6_IRQHandler+0x148>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00e      	beq.n	8001642 <DMA2_Stream6_IRQHandler+0x36>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001624:	4b4c      	ldr	r3, [pc, #304]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <DMA2_Stream6_IRQHandler+0x36>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800162e:	4b4a      	ldr	r3, [pc, #296]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001634:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001636:	4b46      	ldr	r3, [pc, #280]	@ (8001750 <DMA2_Stream6_IRQHandler+0x144>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	4a45      	ldr	r2, [pc, #276]	@ (8001750 <DMA2_Stream6_IRQHandler+0x144>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001640:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8001642:	4b44      	ldr	r3, [pc, #272]	@ (8001754 <DMA2_Stream6_IRQHandler+0x148>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00e      	beq.n	800166c <DMA2_Stream6_IRQHandler+0x60>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800164e:	4b42      	ldr	r3, [pc, #264]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	2b00      	cmp	r3, #0
 8001656:	d009      	beq.n	800166c <DMA2_Stream6_IRQHandler+0x60>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001658:	4b3f      	ldr	r3, [pc, #252]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001660:	4b3b      	ldr	r3, [pc, #236]	@ (8001750 <DMA2_Stream6_IRQHandler+0x144>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a3a      	ldr	r2, [pc, #232]	@ (8001750 <DMA2_Stream6_IRQHandler+0x144>)
 8001666:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800166a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 800166c:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <DMA2_Stream6_IRQHandler+0x148>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00e      	beq.n	8001696 <DMA2_Stream6_IRQHandler+0x8a>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001678:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <DMA2_Stream6_IRQHandler+0x8a>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001682:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001688:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 800168a:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <DMA2_Stream6_IRQHandler+0x144>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	4a30      	ldr	r2, [pc, #192]	@ (8001750 <DMA2_Stream6_IRQHandler+0x144>)
 8001690:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001694:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8001696:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <DMA2_Stream6_IRQHandler+0x148>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d026      	beq.n	80016f0 <DMA2_Stream6_IRQHandler+0xe4>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80016a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d021      	beq.n	80016f0 <DMA2_Stream6_IRQHandler+0xe4>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80016ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b2:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 80016b4:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <DMA2_Stream6_IRQHandler+0x144>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a25      	ldr	r2, [pc, #148]	@ (8001750 <DMA2_Stream6_IRQHandler+0x144>)
 80016ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016be:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80016c0:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d110      	bne.n	80016f0 <DMA2_Stream6_IRQHandler+0xe4>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80016ce:	4b22      	ldr	r3, [pc, #136]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d004      	beq.n	80016e8 <DMA2_Stream6_IRQHandler+0xdc>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80016de:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016e4:	4798      	blx	r3
 80016e6:	e003      	b.n	80016f0 <DMA2_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ee:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <DMA2_Stream6_IRQHandler+0x148>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d026      	beq.n	800174a <DMA2_Stream6_IRQHandler+0x13e>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	2b00      	cmp	r3, #0
 8001704:	d021      	beq.n	800174a <DMA2_Stream6_IRQHandler+0x13e>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800170c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <DMA2_Stream6_IRQHandler+0x144>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	4a0f      	ldr	r2, [pc, #60]	@ (8001750 <DMA2_Stream6_IRQHandler+0x144>)
 8001714:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001718:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001720:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001724:	4293      	cmp	r3, r2
 8001726:	d110      	bne.n	800174a <DMA2_Stream6_IRQHandler+0x13e>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d004      	beq.n	8001742 <DMA2_Stream6_IRQHandler+0x136>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800173e:	4798      	blx	r3
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001740:	e003      	b.n	800174a <DMA2_Stream6_IRQHandler+0x13e>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <DMA2_Stream6_IRQHandler+0x14c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001748:	4798      	blx	r3
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40026400 	.word	0x40026400
 8001754:	20000064 	.word	0x20000064
 8001758:	20000058 	.word	0x20000058

0800175c <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001760:	4b4f      	ldr	r3, [pc, #316]	@ (80018a0 <DMA2_Stream7_IRQHandler+0x144>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a4f      	ldr	r2, [pc, #316]	@ (80018a4 <DMA2_Stream7_IRQHandler+0x148>)
 8001766:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8001768:	4b4e      	ldr	r3, [pc, #312]	@ (80018a4 <DMA2_Stream7_IRQHandler+0x148>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <DMA2_Stream7_IRQHandler+0x36>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001774:	4b4c      	ldr	r3, [pc, #304]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d009      	beq.n	8001792 <DMA2_Stream7_IRQHandler+0x36>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800177e:	4b4a      	ldr	r3, [pc, #296]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001784:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001786:	4b46      	ldr	r3, [pc, #280]	@ (80018a0 <DMA2_Stream7_IRQHandler+0x144>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	4a45      	ldr	r2, [pc, #276]	@ (80018a0 <DMA2_Stream7_IRQHandler+0x144>)
 800178c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001790:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8001792:	4b44      	ldr	r3, [pc, #272]	@ (80018a4 <DMA2_Stream7_IRQHandler+0x148>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00e      	beq.n	80017bc <DMA2_Stream7_IRQHandler+0x60>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800179e:	4b42      	ldr	r3, [pc, #264]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d009      	beq.n	80017bc <DMA2_Stream7_IRQHandler+0x60>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80017a8:	4b3f      	ldr	r3, [pc, #252]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80017b0:	4b3b      	ldr	r3, [pc, #236]	@ (80018a0 <DMA2_Stream7_IRQHandler+0x144>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a3a      	ldr	r2, [pc, #232]	@ (80018a0 <DMA2_Stream7_IRQHandler+0x144>)
 80017b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ba:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 80017bc:	4b39      	ldr	r3, [pc, #228]	@ (80018a4 <DMA2_Stream7_IRQHandler+0x148>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00e      	beq.n	80017e6 <DMA2_Stream7_IRQHandler+0x8a>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80017c8:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <DMA2_Stream7_IRQHandler+0x8a>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80017d2:	4b35      	ldr	r3, [pc, #212]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d8:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80017da:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <DMA2_Stream7_IRQHandler+0x144>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	4a30      	ldr	r2, [pc, #192]	@ (80018a0 <DMA2_Stream7_IRQHandler+0x144>)
 80017e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017e4:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 80017e6:	4b2f      	ldr	r3, [pc, #188]	@ (80018a4 <DMA2_Stream7_IRQHandler+0x148>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d026      	beq.n	8001840 <DMA2_Stream7_IRQHandler+0xe4>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80017f2:	4b2d      	ldr	r3, [pc, #180]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d021      	beq.n	8001840 <DMA2_Stream7_IRQHandler+0xe4>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80017fc:	4b2a      	ldr	r3, [pc, #168]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001802:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001804:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <DMA2_Stream7_IRQHandler+0x144>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4a25      	ldr	r2, [pc, #148]	@ (80018a0 <DMA2_Stream7_IRQHandler+0x144>)
 800180a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800180e:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001810:	4b25      	ldr	r3, [pc, #148]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001816:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800181a:	4293      	cmp	r3, r2
 800181c:	d110      	bne.n	8001840 <DMA2_Stream7_IRQHandler+0xe4>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800181e:	4b22      	ldr	r3, [pc, #136]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <DMA2_Stream7_IRQHandler+0xdc>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800182e:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001834:	4798      	blx	r3
 8001836:	e003      	b.n	8001840 <DMA2_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <DMA2_Stream7_IRQHandler+0x148>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d026      	beq.n	800189a <DMA2_Stream7_IRQHandler+0x13e>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	2b00      	cmp	r3, #0
 8001854:	d021      	beq.n	800189a <DMA2_Stream7_IRQHandler+0x13e>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001856:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800185c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <DMA2_Stream7_IRQHandler+0x144>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	4a0f      	ldr	r2, [pc, #60]	@ (80018a0 <DMA2_Stream7_IRQHandler+0x144>)
 8001864:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001868:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001870:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001874:	4293      	cmp	r3, r2
 8001876:	d110      	bne.n	800189a <DMA2_Stream7_IRQHandler+0x13e>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <DMA2_Stream7_IRQHandler+0x136>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001888:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800188e:	4798      	blx	r3
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001890:	e003      	b.n	800189a <DMA2_Stream7_IRQHandler+0x13e>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001892:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <DMA2_Stream7_IRQHandler+0x14c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001898:	4798      	blx	r3
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40026400 	.word	0x40026400
 80018a4:	20000064 	.word	0x20000064
 80018a8:	2000005c 	.word	0x2000005c

080018ac <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0c      	ldr	r2, [pc, #48]	@ (80018ec <DMA_Clock_Enable+0x40>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d105      	bne.n	80018ca <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <DMA_Clock_Enable+0x44>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a0b      	ldr	r2, [pc, #44]	@ (80018f0 <DMA_Clock_Enable+0x44>)
 80018c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <DMA_Clock_Enable+0x48>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d105      	bne.n	80018e0 <DMA_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <DMA_Clock_Enable+0x44>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d8:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <DMA_Clock_Enable+0x44>)
 80018da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018de:	6313      	str	r3, [r2, #48]	@ 0x30
	}
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40026000 	.word	0x40026000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40026400 	.word	0x40026400

080018f8 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	//	DMA_Clock_Disable(config);
	DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ffd3 	bl	80018ac <DMA_Clock_Enable>

	if (config->Request.Stream->CR & DMA_SxCR_EN)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00f      	beq.n	8001934 <DMA_Init+0x3c>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_EN;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
		while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 8001924:	bf00      	nop
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f8      	bne.n	8001926 <DMA_Init+0x2e>
	}


	config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	6819      	ldr	r1, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7a1b      	ldrb	r3, [r3, #8]
 800193e:	065a      	lsls	r2, r3, #25
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	6819      	ldr	r1, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->flow_control;  // Set flow control
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->priority_level;  // Set priority level
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	430a      	orrs	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	6819      	ldr	r1, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	6819      	ldr	r1, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

	// Configure DMA interrupts if enabled


	if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	2200      	movs	r2, #0
 80019ba:	4293      	cmp	r3, r2
 80019bc:	f000 8110 	beq.w	8001be0 <DMA_Init+0x2e8>
	{

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2280      	movs	r2, #128	@ 0x80
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <DMA_Init+0xe6>
		{
			config->Request.Stream->FCR |= config->interrupts;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	6959      	ldr	r1, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	430a      	orrs	r2, r1
 80019dc:	615a      	str	r2, [r3, #20]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	2210      	movs	r2, #16
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <DMA_Init+0x102>
		{
			config->Request.Stream->CR |= DMA_SxCR_TCIE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f042 0210 	orr.w	r2, r2, #16
 80019f8:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	2208      	movs	r2, #8
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <DMA_Init+0x11e>
		{
			config->Request.Stream->CR |= DMA_SxCR_HTIE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f042 0208 	orr.w	r2, r2, #8
 8001a14:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <DMA_Init+0x13a>
		{
			config->Request.Stream->CR |= DMA_SxCR_TEIE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f042 0204 	orr.w	r2, r2, #4
 8001a30:	601a      	str	r2, [r3, #0]
		}
		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	2202      	movs	r2, #2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <DMA_Init+0x156>
		{
			config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f042 0202 	orr.w	r2, r2, #2
 8001a4c:	601a      	str	r2, [r3, #0]
		}

		// Enable the corresponding NVIC interrupt for the DMA stream
		if(config->Request.Controller == DMA1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a80      	ldr	r2, [pc, #512]	@ (8001c54 <DMA_Init+0x35c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d15f      	bne.n	8001b18 <DMA_Init+0x220>
		{
			if(config->Request.Stream == DMA1_Stream0){
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4a7e      	ldr	r2, [pc, #504]	@ (8001c58 <DMA_Init+0x360>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d106      	bne.n	8001a70 <DMA_Init+0x178>
				__DMA1_Stream0_Config__ = config;
 8001a62:	4a7e      	ldr	r2, [pc, #504]	@ (8001c5c <DMA_Init+0x364>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a68:	200b      	movs	r0, #11
 8001a6a:	f7fe fbad 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a6e:	e0b7      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream1){
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a7a      	ldr	r2, [pc, #488]	@ (8001c60 <DMA_Init+0x368>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d106      	bne.n	8001a88 <DMA_Init+0x190>
				__DMA1_Stream1_Config__ = config;
 8001a7a:	4a7a      	ldr	r2, [pc, #488]	@ (8001c64 <DMA_Init+0x36c>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a80:	200c      	movs	r0, #12
 8001a82:	f7fe fba1 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a86:	e0ab      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream2){
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a76      	ldr	r2, [pc, #472]	@ (8001c68 <DMA_Init+0x370>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d106      	bne.n	8001aa0 <DMA_Init+0x1a8>
				__DMA1_Stream2_Config__ = config;
 8001a92:	4a76      	ldr	r2, [pc, #472]	@ (8001c6c <DMA_Init+0x374>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a98:	200d      	movs	r0, #13
 8001a9a:	f7fe fb95 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a9e:	e09f      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream3){
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a72      	ldr	r2, [pc, #456]	@ (8001c70 <DMA_Init+0x378>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d106      	bne.n	8001ab8 <DMA_Init+0x1c0>
				__DMA1_Stream3_Config__ = config;
 8001aaa:	4a72      	ldr	r2, [pc, #456]	@ (8001c74 <DMA_Init+0x37c>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ab0:	200e      	movs	r0, #14
 8001ab2:	f7fe fb89 	bl	80001c8 <__NVIC_EnableIRQ>
 8001ab6:	e093      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream4){
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a6e      	ldr	r2, [pc, #440]	@ (8001c78 <DMA_Init+0x380>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d106      	bne.n	8001ad0 <DMA_Init+0x1d8>
				__DMA1_Stream4_Config__ = config;
 8001ac2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c7c <DMA_Init+0x384>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001ac8:	200f      	movs	r0, #15
 8001aca:	f7fe fb7d 	bl	80001c8 <__NVIC_EnableIRQ>
 8001ace:	e087      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream5){
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a6a      	ldr	r2, [pc, #424]	@ (8001c80 <DMA_Init+0x388>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d106      	bne.n	8001ae8 <DMA_Init+0x1f0>
				__DMA1_Stream5_Config__ = config;
 8001ada:	4a6a      	ldr	r2, [pc, #424]	@ (8001c84 <DMA_Init+0x38c>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ae0:	2010      	movs	r0, #16
 8001ae2:	f7fe fb71 	bl	80001c8 <__NVIC_EnableIRQ>
 8001ae6:	e07b      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream6) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a66      	ldr	r2, [pc, #408]	@ (8001c88 <DMA_Init+0x390>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d106      	bne.n	8001b00 <DMA_Init+0x208>
				__DMA1_Stream6_Config__ = config;
 8001af2:	4a66      	ldr	r2, [pc, #408]	@ (8001c8c <DMA_Init+0x394>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001af8:	2011      	movs	r0, #17
 8001afa:	f7fe fb65 	bl	80001c8 <__NVIC_EnableIRQ>
 8001afe:	e06f      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream7){
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a62      	ldr	r2, [pc, #392]	@ (8001c90 <DMA_Init+0x398>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d16a      	bne.n	8001be0 <DMA_Init+0x2e8>
				__DMA1_Stream7_Config__ = config;
 8001b0a:	4a62      	ldr	r2, [pc, #392]	@ (8001c94 <DMA_Init+0x39c>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001b10:	202f      	movs	r0, #47	@ 0x2f
 8001b12:	f7fe fb59 	bl	80001c8 <__NVIC_EnableIRQ>
 8001b16:	e063      	b.n	8001be0 <DMA_Init+0x2e8>
			}
		}
		else if(config->Request.Controller == DMA2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a5e      	ldr	r2, [pc, #376]	@ (8001c98 <DMA_Init+0x3a0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d15e      	bne.n	8001be0 <DMA_Init+0x2e8>
		{
			if(config->Request.Stream == DMA2_Stream0){
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4a5d      	ldr	r2, [pc, #372]	@ (8001c9c <DMA_Init+0x3a4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d106      	bne.n	8001b3a <DMA_Init+0x242>
				__DMA2_Stream0_Config__ = config;
 8001b2c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca0 <DMA_Init+0x3a8>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b32:	2038      	movs	r0, #56	@ 0x38
 8001b34:	f7fe fb48 	bl	80001c8 <__NVIC_EnableIRQ>
 8001b38:	e052      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream1){
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4a59      	ldr	r2, [pc, #356]	@ (8001ca4 <DMA_Init+0x3ac>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d106      	bne.n	8001b52 <DMA_Init+0x25a>
				__DMA2_Stream1_Config__ = config;
 8001b44:	4a58      	ldr	r2, [pc, #352]	@ (8001ca8 <DMA_Init+0x3b0>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b4a:	2039      	movs	r0, #57	@ 0x39
 8001b4c:	f7fe fb3c 	bl	80001c8 <__NVIC_EnableIRQ>
 8001b50:	e046      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream2){
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a55      	ldr	r2, [pc, #340]	@ (8001cac <DMA_Init+0x3b4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d106      	bne.n	8001b6a <DMA_Init+0x272>
				__DMA2_Stream2_Config__ = config;
 8001b5c:	4a54      	ldr	r2, [pc, #336]	@ (8001cb0 <DMA_Init+0x3b8>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b62:	203a      	movs	r0, #58	@ 0x3a
 8001b64:	f7fe fb30 	bl	80001c8 <__NVIC_EnableIRQ>
 8001b68:	e03a      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream3){
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a51      	ldr	r2, [pc, #324]	@ (8001cb4 <DMA_Init+0x3bc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d106      	bne.n	8001b82 <DMA_Init+0x28a>
				__DMA2_Stream3_Config__ = config;
 8001b74:	4a50      	ldr	r2, [pc, #320]	@ (8001cb8 <DMA_Init+0x3c0>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001b7a:	203b      	movs	r0, #59	@ 0x3b
 8001b7c:	f7fe fb24 	bl	80001c8 <__NVIC_EnableIRQ>
 8001b80:	e02e      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream4){
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4a4d      	ldr	r2, [pc, #308]	@ (8001cbc <DMA_Init+0x3c4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d106      	bne.n	8001b9a <DMA_Init+0x2a2>
				__DMA2_Stream4_Config__ = config;
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001cc0 <DMA_Init+0x3c8>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001b92:	203c      	movs	r0, #60	@ 0x3c
 8001b94:	f7fe fb18 	bl	80001c8 <__NVIC_EnableIRQ>
 8001b98:	e022      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream5){
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4a49      	ldr	r2, [pc, #292]	@ (8001cc4 <DMA_Init+0x3cc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d106      	bne.n	8001bb2 <DMA_Init+0x2ba>
				__DMA2_Stream5_Config__ = config;
 8001ba4:	4a48      	ldr	r2, [pc, #288]	@ (8001cc8 <DMA_Init+0x3d0>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001baa:	2044      	movs	r0, #68	@ 0x44
 8001bac:	f7fe fb0c 	bl	80001c8 <__NVIC_EnableIRQ>
 8001bb0:	e016      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream6){
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4a45      	ldr	r2, [pc, #276]	@ (8001ccc <DMA_Init+0x3d4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d106      	bne.n	8001bca <DMA_Init+0x2d2>
				__DMA2_Stream6_Config__ = config;
 8001bbc:	4a44      	ldr	r2, [pc, #272]	@ (8001cd0 <DMA_Init+0x3d8>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001bc2:	2045      	movs	r0, #69	@ 0x45
 8001bc4:	f7fe fb00 	bl	80001c8 <__NVIC_EnableIRQ>
 8001bc8:	e00a      	b.n	8001be0 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream7){
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4a41      	ldr	r2, [pc, #260]	@ (8001cd4 <DMA_Init+0x3dc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d105      	bne.n	8001be0 <DMA_Init+0x2e8>
				__DMA2_Stream7_Config__ = config;
 8001bd4:	4a40      	ldr	r2, [pc, #256]	@ (8001cd8 <DMA_Init+0x3e0>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
				//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
				NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001bda:	2046      	movs	r0, #70	@ 0x46
 8001bdc:	f7fe faf4 	bl	80001c8 <__NVIC_EnableIRQ>
			}
		}
	}

	// Configure memory and peripheral pointer increments
	config->Request.Stream->CR |= config->memory_pointer_increment;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	8c1b      	ldrh	r3, [r3, #32]
 8001bea:	4619      	mov	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001bfe:	4619      	mov	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

	// Configure circular mode
	if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d108      	bne.n	8001c26 <DMA_Init+0x32e>
	{
		config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e010      	b.n	8001c48 <DMA_Init+0x350>
	}
	else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d108      	bne.n	8001c42 <DMA_Init+0x34a>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e002      	b.n	8001c48 <DMA_Init+0x350>
	}
	else
	{
		return -1;  // Return -1 if circular mode configuration is invalid
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e000      	b.n	8001c4a <DMA_Init+0x352>
	}

	return 1;  // Return 1 on successful initialization
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40026000 	.word	0x40026000
 8001c58:	40026010 	.word	0x40026010
 8001c5c:	20000020 	.word	0x20000020
 8001c60:	40026028 	.word	0x40026028
 8001c64:	20000024 	.word	0x20000024
 8001c68:	40026040 	.word	0x40026040
 8001c6c:	20000028 	.word	0x20000028
 8001c70:	40026058 	.word	0x40026058
 8001c74:	2000002c 	.word	0x2000002c
 8001c78:	40026070 	.word	0x40026070
 8001c7c:	20000030 	.word	0x20000030
 8001c80:	40026088 	.word	0x40026088
 8001c84:	20000034 	.word	0x20000034
 8001c88:	400260a0 	.word	0x400260a0
 8001c8c:	20000038 	.word	0x20000038
 8001c90:	400260b8 	.word	0x400260b8
 8001c94:	2000003c 	.word	0x2000003c
 8001c98:	40026400 	.word	0x40026400
 8001c9c:	40026410 	.word	0x40026410
 8001ca0:	20000040 	.word	0x20000040
 8001ca4:	40026428 	.word	0x40026428
 8001ca8:	20000044 	.word	0x20000044
 8001cac:	40026440 	.word	0x40026440
 8001cb0:	20000048 	.word	0x20000048
 8001cb4:	40026458 	.word	0x40026458
 8001cb8:	2000004c 	.word	0x2000004c
 8001cbc:	40026470 	.word	0x40026470
 8001cc0:	20000050 	.word	0x20000050
 8001cc4:	40026488 	.word	0x40026488
 8001cc8:	20000054 	.word	0x20000054
 8001ccc:	400264a0 	.word	0x400264a0
 8001cd0:	20000058 	.word	0x20000058
 8001cd4:	400264b8 	.word	0x400264b8
 8001cd8:	2000005c 	.word	0x2000005c

08001cdc <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8001ce0:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <EXTI0_IRQHandler+0x24>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <EXTI0_IRQHandler+0x12>
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <EXTI0_IRQHandler+0x24>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <EXTI0_IRQHandler+0x28>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4a04      	ldr	r2, [pc, #16]	@ (8001d04 <EXTI0_IRQHandler+0x28>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6153      	str	r3, [r2, #20]
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000068 	.word	0x20000068
 8001d04:	40013c00 	.word	0x40013c00

08001d08 <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <EXTI1_IRQHandler+0x24>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <EXTI1_IRQHandler+0x12>
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <EXTI1_IRQHandler+0x24>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8001d1a:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <EXTI1_IRQHandler+0x28>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <EXTI1_IRQHandler+0x28>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6153      	str	r3, [r2, #20]
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000068 	.word	0x20000068
 8001d30:	40013c00 	.word	0x40013c00

08001d34 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8001d38:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <EXTI2_IRQHandler+0x24>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <EXTI2_IRQHandler+0x12>
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <EXTI2_IRQHandler+0x24>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8001d46:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <EXTI2_IRQHandler+0x28>)
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	4a04      	ldr	r2, [pc, #16]	@ (8001d5c <EXTI2_IRQHandler+0x28>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6153      	str	r3, [r2, #20]
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000068 	.word	0x20000068
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8001d64:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <EXTI3_IRQHandler+0x24>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <EXTI3_IRQHandler+0x12>
 8001d6c:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <EXTI3_IRQHandler+0x24>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8001d72:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <EXTI3_IRQHandler+0x28>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <EXTI3_IRQHandler+0x28>)
 8001d78:	f043 0308 	orr.w	r3, r3, #8
 8001d7c:	6153      	str	r3, [r2, #20]
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000068 	.word	0x20000068
 8001d88:	40013c00 	.word	0x40013c00

08001d8c <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8001d90:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <EXTI4_IRQHandler+0x24>)
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <EXTI4_IRQHandler+0x12>
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <EXTI4_IRQHandler+0x24>)
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8001d9e:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <EXTI4_IRQHandler+0x28>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <EXTI4_IRQHandler+0x28>)
 8001da4:	f043 0310 	orr.w	r3, r3, #16
 8001da8:	6153      	str	r3, [r2, #20]
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000068 	.word	0x20000068
 8001db4:	40013c00 	.word	0x40013c00

08001db8 <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	e020      	b.n	8001e06 <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <EXTI9_5_IRQHandler+0x60>)
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d014      	beq.n	8001e00 <EXTI9_5_IRQHandler+0x48>
 8001dd6:	4a11      	ldr	r2, [pc, #68]	@ (8001e1c <EXTI9_5_IRQHandler+0x64>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00e      	beq.n	8001e00 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001de2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e1c <EXTI9_5_IRQHandler+0x64>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dea:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001dec:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <EXTI9_5_IRQHandler+0x60>)
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	2101      	movs	r1, #1
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <EXTI9_5_IRQHandler+0x60>)
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3301      	adds	r3, #1
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b09      	cmp	r3, #9
 8001e0a:	dddb      	ble.n	8001dc4 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40013c00 	.word	0x40013c00
 8001e1c:	20000068 	.word	0x20000068

08001e20 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 8001e26:	230a      	movs	r3, #10
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	e020      	b.n	8001e6e <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001e2c:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <EXTI15_10_IRQHandler+0x60>)
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	2101      	movs	r1, #1
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d014      	beq.n	8001e68 <EXTI15_10_IRQHandler+0x48>
 8001e3e:	4a11      	ldr	r2, [pc, #68]	@ (8001e84 <EXTI15_10_IRQHandler+0x64>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00e      	beq.n	8001e68 <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e84 <EXTI15_10_IRQHandler+0x64>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001e54:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <EXTI15_10_IRQHandler+0x60>)
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e60:	4611      	mov	r1, r2
 8001e62:	4a07      	ldr	r2, [pc, #28]	@ (8001e80 <EXTI15_10_IRQHandler+0x60>)
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b0f      	cmp	r3, #15
 8001e72:	dddb      	ble.n	8001e2c <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40013c00 	.word	0x40013c00
 8001e84:	20000068 	.word	0x20000068

08001e88 <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a30      	ldr	r2, [pc, #192]	@ (8001f54 <GPIO_Clock_Enable+0xcc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d04b      	beq.n	8001f30 <GPIO_Clock_Enable+0xa8>
 8001e98:	4a2e      	ldr	r2, [pc, #184]	@ (8001f54 <GPIO_Clock_Enable+0xcc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d84f      	bhi.n	8001f3e <GPIO_Clock_Enable+0xb6>
 8001e9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001f58 <GPIO_Clock_Enable+0xd0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d03e      	beq.n	8001f22 <GPIO_Clock_Enable+0x9a>
 8001ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8001f58 <GPIO_Clock_Enable+0xd0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d849      	bhi.n	8001f3e <GPIO_Clock_Enable+0xb6>
 8001eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8001f5c <GPIO_Clock_Enable+0xd4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d031      	beq.n	8001f14 <GPIO_Clock_Enable+0x8c>
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f5c <GPIO_Clock_Enable+0xd4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d843      	bhi.n	8001f3e <GPIO_Clock_Enable+0xb6>
 8001eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f60 <GPIO_Clock_Enable+0xd8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d024      	beq.n	8001f06 <GPIO_Clock_Enable+0x7e>
 8001ebc:	4a28      	ldr	r2, [pc, #160]	@ (8001f60 <GPIO_Clock_Enable+0xd8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d83d      	bhi.n	8001f3e <GPIO_Clock_Enable+0xb6>
 8001ec2:	4a28      	ldr	r2, [pc, #160]	@ (8001f64 <GPIO_Clock_Enable+0xdc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d017      	beq.n	8001ef8 <GPIO_Clock_Enable+0x70>
 8001ec8:	4a26      	ldr	r2, [pc, #152]	@ (8001f64 <GPIO_Clock_Enable+0xdc>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d837      	bhi.n	8001f3e <GPIO_Clock_Enable+0xb6>
 8001ece:	4a26      	ldr	r2, [pc, #152]	@ (8001f68 <GPIO_Clock_Enable+0xe0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d003      	beq.n	8001edc <GPIO_Clock_Enable+0x54>
 8001ed4:	4a25      	ldr	r2, [pc, #148]	@ (8001f6c <GPIO_Clock_Enable+0xe4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <GPIO_Clock_Enable+0x62>
 8001eda:	e030      	b.n	8001f3e <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8001edc:	4b24      	ldr	r3, [pc, #144]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee0:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee8:	e02c      	b.n	8001f44 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8001eea:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	4a20      	ldr	r2, [pc, #128]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef6:	e025      	b.n	8001f44 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f04:	e01e      	b.n	8001f44 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a19      	ldr	r2, [pc, #100]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	e017      	b.n	8001f44 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8001f14:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	4a15      	ldr	r2, [pc, #84]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001f1a:	f043 0310 	orr.w	r3, r3, #16
 8001f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f20:	e010      	b.n	8001f44 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8001f22:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001f28:	f043 0320 	orr.w	r3, r3, #32
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	e009      	b.n	8001f44 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	4a0e      	ldr	r2, [pc, #56]	@ (8001f70 <GPIO_Clock_Enable+0xe8>)
 8001f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3c:	e002      	b.n	8001f44 <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e000      	b.n	8001f46 <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021c00 	.word	0x40021c00
 8001f58:	40021400 	.word	0x40021400
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40023800 	.word	0x40023800

08001f74 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	4611      	mov	r1, r2
 8001f80:	461a      	mov	r2, r3
 8001f82:	4603      	mov	r3, r0
 8001f84:	70fb      	strb	r3, [r7, #3]
 8001f86:	460b      	mov	r3, r1
 8001f88:	70bb      	strb	r3, [r7, #2]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ff7a 	bl	8001e88 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	0052      	lsls	r2, r2, #1
 8001f9c:	2103      	movs	r1, #3
 8001f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa2:	43d2      	mvns	r2, r2
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	78b9      	ldrb	r1, [r7, #2]
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	0052      	lsls	r2, r2, #1
 8001fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	43d2      	mvns	r2, r2
 8001fcc:	401a      	ands	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d008      	beq.n	8001fec <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	7879      	ldrb	r1, [r7, #1]
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	0052      	lsls	r2, r2, #1
 8001ff4:	2103      	movs	r1, #3
 8001ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffa:	43d2      	mvns	r2, r2
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 8002002:	2204      	movs	r2, #4
 8002004:	7c3b      	ldrb	r3, [r7, #16]
 8002006:	4293      	cmp	r3, r2
 8002008:	d009      	beq.n	800201e <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	7c39      	ldrb	r1, [r7, #16]
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	0052      	lsls	r2, r2, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	0052      	lsls	r2, r2, #1
 8002026:	2103      	movs	r1, #3
 8002028:	fa01 f202 	lsl.w	r2, r1, r2
 800202c:	43d2      	mvns	r2, r2
 800202e:	401a      	ands	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 8002034:	2204      	movs	r2, #4
 8002036:	7d3b      	ldrb	r3, [r7, #20]
 8002038:	4293      	cmp	r3, r2
 800203a:	d009      	beq.n	8002050 <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	7d39      	ldrb	r1, [r7, #20]
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	0052      	lsls	r2, r2, #1
 8002046:	fa01 f202 	lsl.w	r2, r1, r2
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 8002050:	2202      	movs	r2, #2
 8002052:	78bb      	ldrb	r3, [r7, #2]
 8002054:	4293      	cmp	r3, r2
 8002056:	d12f      	bne.n	80020b8 <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	2b07      	cmp	r3, #7
 800205c:	d815      	bhi.n	800208a <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	210f      	movs	r1, #15
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	43d2      	mvns	r2, r2
 800206e:	401a      	ands	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	7e39      	ldrb	r1, [r7, #24]
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	fa01 f202 	lsl.w	r2, r1, r2
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	621a      	str	r2, [r3, #32]
 8002088:	e016      	b.n	80020b8 <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	3a08      	subs	r2, #8
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	210f      	movs	r1, #15
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	43d2      	mvns	r2, r2
 800209c:	401a      	ands	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	7e39      	ldrb	r1, [r7, #24]
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	3a08      	subs	r2, #8
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	fa01 f202 	lsl.w	r2, r1, r2
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <__NVIC_EnableIRQ>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	db0b      	blt.n	80020ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4907      	ldr	r1, [pc, #28]	@ (80020fc <__NVIC_EnableIRQ+0x38>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	2001      	movs	r0, #1
 80020e6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100

08002100 <TIM1_BRK_TIM9_IRQHandler>:
Timer_Config *__timer_13_config__;
Timer_Config *__timer_14_config__;



void TIM1_BRK_TIM9_IRQHandler(void) {
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	if (__timer_1_config__ ->ISR_Routines.Break_ISR) {
 8002104:	4b2b      	ldr	r3, [pc, #172]	@ (80021b4 <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <TIM1_BRK_TIM9_IRQHandler+0x26>
		TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 8002110:	4b29      	ldr	r3, [pc, #164]	@ (80021b8 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	4a28      	ldr	r2, [pc, #160]	@ (80021b8 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8002116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800211a:	6113      	str	r3, [r2, #16]
		__timer_1_config__ ->ISR_Routines.Break_ISR();
 800211c:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002124:	4798      	blx	r3

	}

	if (__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 8002126:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <TIM1_BRK_TIM9_IRQHandler+0x48>
		TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 8002132:	4b23      	ldr	r3, [pc, #140]	@ (80021c0 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	4a22      	ldr	r2, [pc, #136]	@ (80021c0 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8002138:	f023 0302 	bic.w	r3, r3, #2
 800213c:	6113      	str	r3, [r2, #16]
		__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800213e:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	4798      	blx	r3

	}

	if (__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 8002148:	4b1c      	ldr	r3, [pc, #112]	@ (80021bc <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <TIM1_BRK_TIM9_IRQHandler+0x6a>
		TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 8002154:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	6113      	str	r3, [r2, #16]
		__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8002160:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002168:	4798      	blx	r3

	}

	if (__timer_9_config__ ->ISR_Routines.Update_ISR){
 800216a:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <TIM1_BRK_TIM9_IRQHandler+0x8c>
		__timer_9_config__ ->ISR_Routines.Update_ISR();
 8002176:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800217e:	4798      	blx	r3
		TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 8002180:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	4a0e      	ldr	r2, [pc, #56]	@ (80021c0 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	6113      	str	r3, [r2, #16]
	}

	if (__timer_9_config__ ->ISR_Routines.Trigger_ISR){
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <TIM1_BRK_TIM9_IRQHandler+0xae>
		TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 8002198:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 800219e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021a2:	6113      	str	r3, [r2, #16]
		__timer_9_config__ ->ISR_Routines.Trigger_ISR();
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80021ac:	4798      	blx	r3
	}

}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200000a8 	.word	0x200000a8
 80021b8:	40010000 	.word	0x40010000
 80021bc:	200000c8 	.word	0x200000c8
 80021c0:	40014000 	.word	0x40014000

080021c4 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 80021c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <TIM1_UP_TIM10_IRQHandler+0x70>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <TIM1_UP_TIM10_IRQHandler+0x26>
		__timer_1_config__ ->ISR_Routines.Update_ISR();
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <TIM1_UP_TIM10_IRQHandler+0x70>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021dc:	4798      	blx	r3
		TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 80021de:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <TIM1_UP_TIM10_IRQHandler+0x74>)
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	4a15      	ldr	r2, [pc, #84]	@ (8002238 <TIM1_UP_TIM10_IRQHandler+0x74>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6113      	str	r3, [r2, #16]
	}

	if (__timer_10_config__ ->ISR_Routines.Update_ISR) {
 80021ea:	4b14      	ldr	r3, [pc, #80]	@ (800223c <TIM1_UP_TIM10_IRQHandler+0x78>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <TIM1_UP_TIM10_IRQHandler+0x48>
		__timer_10_config__ ->ISR_Routines.Update_ISR();
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <TIM1_UP_TIM10_IRQHandler+0x78>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021fe:	4798      	blx	r3
		TIM10->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8002200:	4b0f      	ldr	r3, [pc, #60]	@ (8002240 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	4a0e      	ldr	r2, [pc, #56]	@ (8002240 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	6113      	str	r3, [r2, #16]
	}

	if (__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 800220c:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <TIM1_UP_TIM10_IRQHandler+0x78>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <TIM1_UP_TIM10_IRQHandler+0x6a>
		__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <TIM1_UP_TIM10_IRQHandler+0x78>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002220:	4798      	blx	r3
		TIM10->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8002222:	4b07      	ldr	r3, [pc, #28]	@ (8002240 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	4a06      	ldr	r2, [pc, #24]	@ (8002240 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8002228:	f023 0302 	bic.w	r3, r3, #2
 800222c:	6113      	str	r3, [r2, #16]
	}

}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200000a8 	.word	0x200000a8
 8002238:	40010000 	.word	0x40010000
 800223c:	200000cc 	.word	0x200000cc
 8002240:	40014400 	.word	0x40014400

08002244 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	if (__timer_1_config__ ->ISR_Routines.Trigger_ISR) {
 8002248:	4b22      	ldr	r3, [pc, #136]	@ (80022d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
		TIM1->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 8002254:	4b20      	ldr	r3, [pc, #128]	@ (80022d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	4a1f      	ldr	r2, [pc, #124]	@ (80022d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 800225a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800225e:	6113      	str	r3, [r2, #16]
		__timer_1_config__ ->ISR_Routines.Trigger_ISR();
 8002260:	4b1c      	ldr	r3, [pc, #112]	@ (80022d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002268:	4798      	blx	r3

	}

	if (__timer_1_config__ ->ISR_Routines.Commutation_ISR) {
 800226a:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <TIM1_TRG_COM_TIM11_IRQHandler+0x48>
		TIM1->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 8002276:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	4a17      	ldr	r2, [pc, #92]	@ (80022d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 800227c:	f023 0320 	bic.w	r3, r3, #32
 8002280:	6113      	str	r3, [r2, #16]
		__timer_1_config__ ->ISR_Routines.Commutation_ISR();
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800228a:	4798      	blx	r3

	}

	if (__timer_11_config__ ->ISR_Routines.Update_ISR) {
 800228c:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <TIM1_TRG_COM_TIM11_IRQHandler+0x6a>
		TIM11->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	4a10      	ldr	r2, [pc, #64]	@ (80022e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	6113      	str	r3, [r2, #16]
		__timer_11_config__ ->ISR_Routines.Update_ISR();
 80022a4:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022ac:	4798      	blx	r3
	}

	if (__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80022ae:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x8c>
		TIM11->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 80022ba:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	4a08      	ldr	r2, [pc, #32]	@ (80022e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80022c0:	f023 0302 	bic.w	r3, r3, #2
 80022c4:	6113      	str	r3, [r2, #16]
		__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80022c6:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ce:	4798      	blx	r3
	}

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200000a8 	.word	0x200000a8
 80022d8:	40010000 	.word	0x40010000
 80022dc:	200000d0 	.word	0x200000d0
 80022e0:	40014800 	.word	0x40014800

080022e4 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	if (__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80022e8:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <TIM1_CC_IRQHandler+0x90>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <TIM1_CC_IRQHandler+0x26>
		TIM1->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 80022f4:	4b20      	ldr	r3, [pc, #128]	@ (8002378 <TIM1_CC_IRQHandler+0x94>)
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <TIM1_CC_IRQHandler+0x94>)
 80022fa:	f023 0302 	bic.w	r3, r3, #2
 80022fe:	6113      	str	r3, [r2, #16]
		__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002300:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <TIM1_CC_IRQHandler+0x90>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002308:	4798      	blx	r3

	}

	if (__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 800230a:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <TIM1_CC_IRQHandler+0x90>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <TIM1_CC_IRQHandler+0x48>
		TIM1->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8002316:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <TIM1_CC_IRQHandler+0x94>)
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	4a17      	ldr	r2, [pc, #92]	@ (8002378 <TIM1_CC_IRQHandler+0x94>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6113      	str	r3, [r2, #16]
		__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8002322:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <TIM1_CC_IRQHandler+0x90>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800232a:	4798      	blx	r3

	}

	if (__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <TIM1_CC_IRQHandler+0x90>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <TIM1_CC_IRQHandler+0x6a>

		TIM1->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8002338:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <TIM1_CC_IRQHandler+0x94>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4a0e      	ldr	r2, [pc, #56]	@ (8002378 <TIM1_CC_IRQHandler+0x94>)
 800233e:	f023 0308 	bic.w	r3, r3, #8
 8002342:	6113      	str	r3, [r2, #16]
		__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <TIM1_CC_IRQHandler+0x90>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800234c:	4798      	blx	r3

	}

	if (__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 800234e:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <TIM1_CC_IRQHandler+0x90>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <TIM1_CC_IRQHandler+0x8c>

		TIM1->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 800235a:	4b07      	ldr	r3, [pc, #28]	@ (8002378 <TIM1_CC_IRQHandler+0x94>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	4a06      	ldr	r2, [pc, #24]	@ (8002378 <TIM1_CC_IRQHandler+0x94>)
 8002360:	f023 0310 	bic.w	r3, r3, #16
 8002364:	6113      	str	r3, [r2, #16]
		__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8002366:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <TIM1_CC_IRQHandler+0x90>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800236e:	4798      	blx	r3

	}
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200000a8 	.word	0x200000a8
 8002378:	40010000 	.word	0x40010000

0800237c <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	if (__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8002380:	4b39      	ldr	r3, [pc, #228]	@ (8002468 <TIM2_IRQHandler+0xec>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00c      	beq.n	80023a6 <TIM2_IRQHandler+0x2a>
		__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800238c:	4b36      	ldr	r3, [pc, #216]	@ (8002468 <TIM2_IRQHandler+0xec>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002394:	4798      	blx	r3

		TIM2->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8002396:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023a0:	f023 0302 	bic.w	r3, r3, #2
 80023a4:	6113      	str	r3, [r2, #16]
	}
	if (__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 80023a6:	4b30      	ldr	r3, [pc, #192]	@ (8002468 <TIM2_IRQHandler+0xec>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00c      	beq.n	80023cc <TIM2_IRQHandler+0x50>
		TIM2->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80023b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	6113      	str	r3, [r2, #16]
		__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80023c2:	4b29      	ldr	r3, [pc, #164]	@ (8002468 <TIM2_IRQHandler+0xec>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ca:	4798      	blx	r3

	}
	if (__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 80023cc:	4b26      	ldr	r3, [pc, #152]	@ (8002468 <TIM2_IRQHandler+0xec>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00c      	beq.n	80023f2 <TIM2_IRQHandler+0x76>

		TIM2->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 80023d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023e2:	f023 0308 	bic.w	r3, r3, #8
 80023e6:	6113      	str	r3, [r2, #16]
		__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80023e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <TIM2_IRQHandler+0xec>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023f0:	4798      	blx	r3

	}
	if (__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80023f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <TIM2_IRQHandler+0xec>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <TIM2_IRQHandler+0x9c>

		TIM2->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80023fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002408:	f023 0310 	bic.w	r3, r3, #16
 800240c:	6113      	str	r3, [r2, #16]
		__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 800240e:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <TIM2_IRQHandler+0xec>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002416:	4798      	blx	r3

	}
	if (__timer_2_config__ ->ISR_Routines.Update_ISR) {
 8002418:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <TIM2_IRQHandler+0xec>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00c      	beq.n	800243e <TIM2_IRQHandler+0xc2>

		TIM2->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8002424:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	6113      	str	r3, [r2, #16]
		__timer_2_config__ ->ISR_Routines.Update_ISR();
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <TIM2_IRQHandler+0xec>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800243c:	4798      	blx	r3

	}
	if (__timer_2_config__ ->ISR_Routines.Trigger_ISR) {
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <TIM2_IRQHandler+0xec>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00c      	beq.n	8002464 <TIM2_IRQHandler+0xe8>

		TIM2->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 800244a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002458:	6113      	str	r3, [r2, #16]
		__timer_2_config__ ->ISR_Routines.Trigger_ISR();
 800245a:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <TIM2_IRQHandler+0xec>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002462:	4798      	blx	r3

	}
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200000ac 	.word	0x200000ac

0800246c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	if (__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8002470:	4b33      	ldr	r3, [pc, #204]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <TIM3_IRQHandler+0x26>

		TIM3->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 800247c:	4b31      	ldr	r3, [pc, #196]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	4a30      	ldr	r2, [pc, #192]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 8002482:	f023 0302 	bic.w	r3, r3, #2
 8002486:	6113      	str	r3, [r2, #16]
		__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002488:	4b2d      	ldr	r3, [pc, #180]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002490:	4798      	blx	r3

	}
	if (__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8002492:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <TIM3_IRQHandler+0x48>

		TIM3->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 800249e:	4b29      	ldr	r3, [pc, #164]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	4a28      	ldr	r2, [pc, #160]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	6113      	str	r3, [r2, #16]
		__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80024aa:	4b25      	ldr	r3, [pc, #148]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b2:	4798      	blx	r3

	}
	if (__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 80024b4:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <TIM3_IRQHandler+0x6a>

		TIM3->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 80024c0:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 80024c6:	f023 0308 	bic.w	r3, r3, #8
 80024ca:	6113      	str	r3, [r2, #16]
		__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80024cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024d4:	4798      	blx	r3

	}
	if (__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <TIM3_IRQHandler+0x8c>

		TIM3->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80024e2:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	4a17      	ldr	r2, [pc, #92]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 80024e8:	f023 0310 	bic.w	r3, r3, #16
 80024ec:	6113      	str	r3, [r2, #16]
		__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80024ee:	4b14      	ldr	r3, [pc, #80]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024f6:	4798      	blx	r3

	}
	if (__timer_3_config__ ->ISR_Routines.Update_ISR) {
 80024f8:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <TIM3_IRQHandler+0xae>

		TIM3->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8002504:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	4a0e      	ldr	r2, [pc, #56]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	6113      	str	r3, [r2, #16]
		__timer_3_config__ ->ISR_Routines.Update_ISR();
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002518:	4798      	blx	r3

	}
	if (__timer_3_config__ ->ISR_Routines.Trigger_ISR) {
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <TIM3_IRQHandler+0xd0>

		TIM3->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8002526:	4b07      	ldr	r3, [pc, #28]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	4a06      	ldr	r2, [pc, #24]	@ (8002544 <TIM3_IRQHandler+0xd8>)
 800252c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002530:	6113      	str	r3, [r2, #16]
		__timer_3_config__ ->ISR_Routines.Trigger_ISR();
 8002532:	4b03      	ldr	r3, [pc, #12]	@ (8002540 <TIM3_IRQHandler+0xd4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800253a:	4798      	blx	r3

	}
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200000b0 	.word	0x200000b0
 8002544:	40000400 	.word	0x40000400

08002548 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	if (__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 800254c:	4b33      	ldr	r3, [pc, #204]	@ (800261c <TIM4_IRQHandler+0xd4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <TIM4_IRQHandler+0x26>

		TIM4->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8002558:	4b31      	ldr	r3, [pc, #196]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	4a30      	ldr	r2, [pc, #192]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 800255e:	f023 0302 	bic.w	r3, r3, #2
 8002562:	6113      	str	r3, [r2, #16]
		__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002564:	4b2d      	ldr	r3, [pc, #180]	@ (800261c <TIM4_IRQHandler+0xd4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256c:	4798      	blx	r3

	}
	if (__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 800256e:	4b2b      	ldr	r3, [pc, #172]	@ (800261c <TIM4_IRQHandler+0xd4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <TIM4_IRQHandler+0x48>

		TIM4->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 800257a:	4b29      	ldr	r3, [pc, #164]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	4a28      	ldr	r2, [pc, #160]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 8002580:	f023 0304 	bic.w	r3, r3, #4
 8002584:	6113      	str	r3, [r2, #16]
		__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8002586:	4b25      	ldr	r3, [pc, #148]	@ (800261c <TIM4_IRQHandler+0xd4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800258e:	4798      	blx	r3

	}
	if (__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8002590:	4b22      	ldr	r3, [pc, #136]	@ (800261c <TIM4_IRQHandler+0xd4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <TIM4_IRQHandler+0x6a>

		TIM4->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 800259c:	4b20      	ldr	r3, [pc, #128]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 80025a2:	f023 0308 	bic.w	r3, r3, #8
 80025a6:	6113      	str	r3, [r2, #16]
		__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80025a8:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <TIM4_IRQHandler+0xd4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025b0:	4798      	blx	r3

	}
	if (__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80025b2:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <TIM4_IRQHandler+0xd4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <TIM4_IRQHandler+0x8c>

		TIM4->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80025be:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	4a17      	ldr	r2, [pc, #92]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 80025c4:	f023 0310 	bic.w	r3, r3, #16
 80025c8:	6113      	str	r3, [r2, #16]
		__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80025ca:	4b14      	ldr	r3, [pc, #80]	@ (800261c <TIM4_IRQHandler+0xd4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025d2:	4798      	blx	r3

	}
	if (__timer_4_config__ ->ISR_Routines.Update_ISR) {
 80025d4:	4b11      	ldr	r3, [pc, #68]	@ (800261c <TIM4_IRQHandler+0xd4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <TIM4_IRQHandler+0xae>

		TIM4->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80025e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6113      	str	r3, [r2, #16]
		__timer_4_config__ ->ISR_Routines.Update_ISR();
 80025ec:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <TIM4_IRQHandler+0xd4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025f4:	4798      	blx	r3

	}
	if (__timer_4_config__ ->ISR_Routines.Trigger_ISR) {
 80025f6:	4b09      	ldr	r3, [pc, #36]	@ (800261c <TIM4_IRQHandler+0xd4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <TIM4_IRQHandler+0xd0>

		TIM4->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8002602:	4b07      	ldr	r3, [pc, #28]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	4a06      	ldr	r2, [pc, #24]	@ (8002620 <TIM4_IRQHandler+0xd8>)
 8002608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800260c:	6113      	str	r3, [r2, #16]
		__timer_4_config__ ->ISR_Routines.Trigger_ISR();
 800260e:	4b03      	ldr	r3, [pc, #12]	@ (800261c <TIM4_IRQHandler+0xd4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002616:	4798      	blx	r3

	}
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200000b4 	.word	0x200000b4
 8002620:	40000800 	.word	0x40000800

08002624 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	if (__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8002628:	4b33      	ldr	r3, [pc, #204]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <TIM5_IRQHandler+0x26>

		TIM5->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8002634:	4b31      	ldr	r3, [pc, #196]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	4a30      	ldr	r2, [pc, #192]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 800263a:	f023 0302 	bic.w	r3, r3, #2
 800263e:	6113      	str	r3, [r2, #16]
		__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002640:	4b2d      	ldr	r3, [pc, #180]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002648:	4798      	blx	r3

	}
	if (__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 800264a:	4b2b      	ldr	r3, [pc, #172]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <TIM5_IRQHandler+0x48>

		TIM5->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8002656:	4b29      	ldr	r3, [pc, #164]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	4a28      	ldr	r2, [pc, #160]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6113      	str	r3, [r2, #16]
		__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8002662:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266a:	4798      	blx	r3

	}
	if (__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 800266c:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <TIM5_IRQHandler+0x6a>

		TIM5->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8002678:	4b20      	ldr	r3, [pc, #128]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	4a1f      	ldr	r2, [pc, #124]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 800267e:	f023 0308 	bic.w	r3, r3, #8
 8002682:	6113      	str	r3, [r2, #16]
		__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8002684:	4b1c      	ldr	r3, [pc, #112]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800268c:	4798      	blx	r3

	}
	if (__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 800268e:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <TIM5_IRQHandler+0x8c>

		TIM5->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 800269a:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	4a17      	ldr	r2, [pc, #92]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 80026a0:	f023 0310 	bic.w	r3, r3, #16
 80026a4:	6113      	str	r3, [r2, #16]
		__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80026a6:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026ae:	4798      	blx	r3

	}
	if (__timer_5_config__ ->ISR_Routines.Update_ISR) {
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <TIM5_IRQHandler+0xae>

		TIM5->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80026bc:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	4a0e      	ldr	r2, [pc, #56]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6113      	str	r3, [r2, #16]
		__timer_5_config__ ->ISR_Routines.Update_ISR();
 80026c8:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026d0:	4798      	blx	r3

	}
	if (__timer_5_config__ ->ISR_Routines.Trigger_ISR) {
 80026d2:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <TIM5_IRQHandler+0xd0>

		TIM5->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 80026de:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	4a06      	ldr	r2, [pc, #24]	@ (80026fc <TIM5_IRQHandler+0xd8>)
 80026e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026e8:	6113      	str	r3, [r2, #16]
		__timer_5_config__ ->ISR_Routines.Trigger_ISR();
 80026ea:	4b03      	ldr	r3, [pc, #12]	@ (80026f8 <TIM5_IRQHandler+0xd4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026f2:	4798      	blx	r3

	}
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	200000b8 	.word	0x200000b8
 80026fc:	40000c00 	.word	0x40000c00

08002700 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	if (__timer_6_config__->ISR_Routines.Update_ISR) {
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <TIM6_DAC_IRQHandler+0x2c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <TIM6_DAC_IRQHandler+0x26>
		TIM6->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8002710:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <TIM6_DAC_IRQHandler+0x30>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	4a06      	ldr	r2, [pc, #24]	@ (8002730 <TIM6_DAC_IRQHandler+0x30>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	6113      	str	r3, [r2, #16]
		__timer_6_config__->ISR_Routines.Update_ISR();
 800271c:	4b03      	ldr	r3, [pc, #12]	@ (800272c <TIM6_DAC_IRQHandler+0x2c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002724:	4798      	blx	r3
	}
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200000bc 	.word	0x200000bc
 8002730:	40001000 	.word	0x40001000

08002734 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	if (__timer_7_config__->ISR_Routines.Update_ISR) {
 8002738:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <TIM7_IRQHandler+0x2c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <TIM7_IRQHandler+0x26>
		TIM7->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8002744:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <TIM7_IRQHandler+0x30>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	4a06      	ldr	r2, [pc, #24]	@ (8002764 <TIM7_IRQHandler+0x30>)
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6113      	str	r3, [r2, #16]
		__timer_7_config__->ISR_Routines.Update_ISR();
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <TIM7_IRQHandler+0x2c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002758:	4798      	blx	r3
	}
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200000c0 	.word	0x200000c0
 8002764:	40001400 	.word	0x40001400

08002768 <TIM8_BRK_TIM12_IRQHandler>:



void TIM8_BRK_TIM12_IRQHandler(void) {
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	if (__timer_8_config__ ->ISR_Routines.Break_ISR) {
 800276c:	4b2b      	ldr	r3, [pc, #172]	@ (800281c <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <TIM8_BRK_TIM12_IRQHandler+0x26>
		__timer_8_config__ ->ISR_Routines.Break_ISR();
 8002778:	4b28      	ldr	r3, [pc, #160]	@ (800281c <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002780:	4798      	blx	r3
		TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 8002782:	4b27      	ldr	r3, [pc, #156]	@ (8002820 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	4a26      	ldr	r2, [pc, #152]	@ (8002820 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 8002788:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800278c:	6113      	str	r3, [r2, #16]
	}

	if (__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 800278e:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <TIM8_BRK_TIM12_IRQHandler+0x48>
		__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800279a:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a2:	4798      	blx	r3
		TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 80027a4:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002828 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80027aa:	f023 0302 	bic.w	r3, r3, #2
 80027ae:	6113      	str	r3, [r2, #16]
	}

	if (__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 80027b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <TIM8_BRK_TIM12_IRQHandler+0x6a>
		__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80027bc:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c4:	4798      	blx	r3
		TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 80027c6:	4b18      	ldr	r3, [pc, #96]	@ (8002828 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	4a17      	ldr	r2, [pc, #92]	@ (8002828 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	6113      	str	r3, [r2, #16]
	}

	if (__timer_12_config__ ->ISR_Routines.Update_ISR){
 80027d2:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <TIM8_BRK_TIM12_IRQHandler+0x8c>
		__timer_12_config__ ->ISR_Routines.Update_ISR();
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027e6:	4798      	blx	r3
		TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 80027e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002828 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6113      	str	r3, [r2, #16]
	}

	if (__timer_12_config__ ->ISR_Routines.Trigger_ISR){
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <TIM8_BRK_TIM12_IRQHandler+0xae>
		__timer_12_config__ ->ISR_Routines.Trigger_ISR();
 8002800:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002808:	4798      	blx	r3
		TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 800280a:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	4a06      	ldr	r2, [pc, #24]	@ (8002828 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8002810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002814:	6113      	str	r3, [r2, #16]
	}

}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200000c4 	.word	0x200000c4
 8002820:	40010000 	.word	0x40010000
 8002824:	200000d4 	.word	0x200000d4
 8002828:	40014000 	.word	0x40014000

0800282c <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
	if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 8002830:	4b1a      	ldr	r3, [pc, #104]	@ (800289c <TIM8_UP_TIM13_IRQHandler+0x70>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <TIM8_UP_TIM13_IRQHandler+0x26>
		__timer_1_config__ ->ISR_Routines.Update_ISR();
 800283c:	4b17      	ldr	r3, [pc, #92]	@ (800289c <TIM8_UP_TIM13_IRQHandler+0x70>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002844:	4798      	blx	r3
		TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8002846:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <TIM8_UP_TIM13_IRQHandler+0x74>)
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	4a15      	ldr	r2, [pc, #84]	@ (80028a0 <TIM8_UP_TIM13_IRQHandler+0x74>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6113      	str	r3, [r2, #16]
	}

	if (__timer_13_config__ ->ISR_Routines.Update_ISR) {
 8002852:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <TIM8_UP_TIM13_IRQHandler+0x48>
		__timer_13_config__ ->ISR_Routines.Update_ISR();
 800285e:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002866:	4798      	blx	r3
		TIM13->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8002868:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	4a0e      	ldr	r2, [pc, #56]	@ (80028a8 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6113      	str	r3, [r2, #16]
	}

	if (__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8002874:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <TIM8_UP_TIM13_IRQHandler+0x6a>
		__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002888:	4798      	blx	r3
		TIM13->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 800288a:	4b07      	ldr	r3, [pc, #28]	@ (80028a8 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	4a06      	ldr	r2, [pc, #24]	@ (80028a8 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8002890:	f023 0302 	bic.w	r3, r3, #2
 8002894:	6113      	str	r3, [r2, #16]
	}

}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200000a8 	.word	0x200000a8
 80028a0:	40010000 	.word	0x40010000
 80028a4:	200000d8 	.word	0x200000d8
 80028a8:	40001c00 	.word	0x40001c00

080028ac <TIM8_TRG_COM_TIM14_IRQHandler>:

void TIM8_TRG_COM_TIM14_IRQHandler(void) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
	if (__timer_8_config__ ->ISR_Routines.Trigger_ISR) {
 80028b0:	4b22      	ldr	r3, [pc, #136]	@ (800293c <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <TIM8_TRG_COM_TIM14_IRQHandler+0x26>
		__timer_8_config__ ->ISR_Routines.Trigger_ISR();
 80028bc:	4b1f      	ldr	r3, [pc, #124]	@ (800293c <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028c4:	4798      	blx	r3

		TIM8->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 80028c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002940 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 80028cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028d0:	6113      	str	r3, [r2, #16]
	}

	if (__timer_8_config__ ->ISR_Routines.Commutation_ISR) {
 80028d2:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x48>
		__timer_8_config__ ->ISR_Routines.Commutation_ISR();
 80028de:	4b17      	ldr	r3, [pc, #92]	@ (800293c <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80028e6:	4798      	blx	r3

		TIM8->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 80028e8:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	4a14      	ldr	r2, [pc, #80]	@ (8002940 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 80028ee:	f023 0320 	bic.w	r3, r3, #32
 80028f2:	6113      	str	r3, [r2, #16]
	}

	if (__timer_14_config__ ->ISR_Routines.Update_ISR) {
 80028f4:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <TIM8_TRG_COM_TIM14_IRQHandler+0x6a>
		__timer_14_config__ ->ISR_Routines.Update_ISR();
 8002900:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002908:	4798      	blx	r3
		TIM14->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 800290a:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	4a0e      	ldr	r2, [pc, #56]	@ (8002948 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	6113      	str	r3, [r2, #16]
	}

	if (__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8002916:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>
		__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002922:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292a:	4798      	blx	r3
		TIM14->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	4a05      	ldr	r2, [pc, #20]	@ (8002948 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8002932:	f023 0302 	bic.w	r3, r3, #2
 8002936:	6113      	str	r3, [r2, #16]
	}

}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200000c4 	.word	0x200000c4
 8002940:	40010400 	.word	0x40010400
 8002944:	200000dc 	.word	0x200000dc
 8002948:	40002000 	.word	0x40002000

0800294c <TIM8_CC_IRQHandler>:

void TIM8_CC_IRQHandler(void) {
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
	if (__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8002950:	4b22      	ldr	r3, [pc, #136]	@ (80029dc <TIM8_CC_IRQHandler+0x90>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <TIM8_CC_IRQHandler+0x26>
		__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800295c:	4b1f      	ldr	r3, [pc, #124]	@ (80029dc <TIM8_CC_IRQHandler+0x90>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002964:	4798      	blx	r3

		TIM8->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8002966:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <TIM8_CC_IRQHandler+0x94>)
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	4a1d      	ldr	r2, [pc, #116]	@ (80029e0 <TIM8_CC_IRQHandler+0x94>)
 800296c:	f023 0302 	bic.w	r3, r3, #2
 8002970:	6113      	str	r3, [r2, #16]
	}

	if (__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8002972:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <TIM8_CC_IRQHandler+0x90>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <TIM8_CC_IRQHandler+0x48>
		__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 800297e:	4b17      	ldr	r3, [pc, #92]	@ (80029dc <TIM8_CC_IRQHandler+0x90>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002986:	4798      	blx	r3

		TIM8->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8002988:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <TIM8_CC_IRQHandler+0x94>)
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	4a14      	ldr	r2, [pc, #80]	@ (80029e0 <TIM8_CC_IRQHandler+0x94>)
 800298e:	f023 0304 	bic.w	r3, r3, #4
 8002992:	6113      	str	r3, [r2, #16]
	}

	if (__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8002994:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <TIM8_CC_IRQHandler+0x90>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <TIM8_CC_IRQHandler+0x6a>
		__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80029a0:	4b0e      	ldr	r3, [pc, #56]	@ (80029dc <TIM8_CC_IRQHandler+0x90>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029a8:	4798      	blx	r3

		TIM8->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 80029aa:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <TIM8_CC_IRQHandler+0x94>)
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	4a0c      	ldr	r2, [pc, #48]	@ (80029e0 <TIM8_CC_IRQHandler+0x94>)
 80029b0:	f023 0308 	bic.w	r3, r3, #8
 80029b4:	6113      	str	r3, [r2, #16]
	}

	if (__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <TIM8_CC_IRQHandler+0x90>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <TIM8_CC_IRQHandler+0x8c>
		__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <TIM8_CC_IRQHandler+0x90>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029ca:	4798      	blx	r3

		TIM8->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80029cc:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <TIM8_CC_IRQHandler+0x94>)
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	4a03      	ldr	r2, [pc, #12]	@ (80029e0 <TIM8_CC_IRQHandler+0x94>)
 80029d2:	f023 0310 	bic.w	r3, r3, #16
 80029d6:	6113      	str	r3, [r2, #16]
	}
}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200000c4 	.word	0x200000c4
 80029e0:	40010400 	.word	0x40010400

080029e4 <Timer_1_Pin_Init>:


static void Timer_1_Pin_Init(Timer_Config *config)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af04      	add	r7, sp, #16
 80029ea:	6078      	str	r0, [r7, #4]

	RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 80029ec:	4b7d      	ldr	r3, [pc, #500]	@ (8002be4 <Timer_1_Pin_Init+0x200>)
 80029ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f0:	4a7c      	ldr	r2, [pc, #496]	@ (8002be4 <Timer_1_Pin_Init+0x200>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6453      	str	r3, [r2, #68]	@ 0x44


	if(config -> Channel_1.Enable ==  true)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7c1b      	ldrb	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d026      	beq.n	8002a4e <Timer_1_Pin_Init+0x6a>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH1_PA8)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8a9b      	ldrh	r3, [r3, #20]
 8002a04:	22a8      	movs	r2, #168	@ 0xa8
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10e      	bne.n	8002a28 <Timer_1_Pin_Init+0x44>
			GPIO_Pin_Init(GPIOA, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002a0a:	2002      	movs	r0, #2
 8002a0c:	2402      	movs	r4, #2
 8002a0e:	2303      	movs	r3, #3
 8002a10:	2204      	movs	r2, #4
 8002a12:	2101      	movs	r1, #1
 8002a14:	9102      	str	r1, [sp, #8]
 8002a16:	9201      	str	r2, [sp, #4]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	4623      	mov	r3, r4
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	2108      	movs	r1, #8
 8002a20:	4871      	ldr	r0, [pc, #452]	@ (8002be8 <Timer_1_Pin_Init+0x204>)
 8002a22:	f7ff faa7 	bl	8001f74 <GPIO_Pin_Init>
 8002a26:	e012      	b.n	8002a4e <Timer_1_Pin_Init+0x6a>
		else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH1_PE9)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8a9b      	ldrh	r3, [r3, #20]
 8002a2c:	22e9      	movs	r2, #233	@ 0xe9
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10d      	bne.n	8002a4e <Timer_1_Pin_Init+0x6a>
			GPIO_Pin_Init(GPIOE, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002a32:	2002      	movs	r0, #2
 8002a34:	2402      	movs	r4, #2
 8002a36:	2303      	movs	r3, #3
 8002a38:	2204      	movs	r2, #4
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	9102      	str	r1, [sp, #8]
 8002a3e:	9201      	str	r2, [sp, #4]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	4623      	mov	r3, r4
 8002a44:	4602      	mov	r2, r0
 8002a46:	2109      	movs	r1, #9
 8002a48:	4868      	ldr	r0, [pc, #416]	@ (8002bec <Timer_1_Pin_Init+0x208>)
 8002a4a:	f7ff fa93 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7d9b      	ldrb	r3, [r3, #22]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d027      	beq.n	8002aa6 <Timer_1_Pin_Init+0xc2>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH2_PA9)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8b5b      	ldrh	r3, [r3, #26]
 8002a5a:	22a9      	movs	r2, #169	@ 0xa9
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10e      	bne.n	8002a7e <Timer_1_Pin_Init+0x9a>
			GPIO_Pin_Init(GPIOA, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002a60:	2002      	movs	r0, #2
 8002a62:	2402      	movs	r4, #2
 8002a64:	2303      	movs	r3, #3
 8002a66:	2204      	movs	r2, #4
 8002a68:	2101      	movs	r1, #1
 8002a6a:	9102      	str	r1, [sp, #8]
 8002a6c:	9201      	str	r2, [sp, #4]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	4623      	mov	r3, r4
 8002a72:	4602      	mov	r2, r0
 8002a74:	2109      	movs	r1, #9
 8002a76:	485c      	ldr	r0, [pc, #368]	@ (8002be8 <Timer_1_Pin_Init+0x204>)
 8002a78:	f7ff fa7c 	bl	8001f74 <GPIO_Pin_Init>
 8002a7c:	e013      	b.n	8002aa6 <Timer_1_Pin_Init+0xc2>
		else if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH2_PE11)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	8b5b      	ldrh	r3, [r3, #26]
 8002a82:	f640 6211 	movw	r2, #3601	@ 0xe11
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10d      	bne.n	8002aa6 <Timer_1_Pin_Init+0xc2>
			GPIO_Pin_Init(GPIOE, 11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002a8a:	2002      	movs	r0, #2
 8002a8c:	2402      	movs	r4, #2
 8002a8e:	2303      	movs	r3, #3
 8002a90:	2204      	movs	r2, #4
 8002a92:	2101      	movs	r1, #1
 8002a94:	9102      	str	r1, [sp, #8]
 8002a96:	9201      	str	r2, [sp, #4]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	210b      	movs	r1, #11
 8002aa0:	4852      	ldr	r0, [pc, #328]	@ (8002bec <Timer_1_Pin_Init+0x208>)
 8002aa2:	f7ff fa67 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_3.Enable ==  true)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7f1b      	ldrb	r3, [r3, #28]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d028      	beq.n	8002b00 <Timer_1_Pin_Init+0x11c>
	{
		if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH3_PA10)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8c1b      	ldrh	r3, [r3, #32]
 8002ab2:	f44f 6221 	mov.w	r2, #2576	@ 0xa10
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10e      	bne.n	8002ad8 <Timer_1_Pin_Init+0xf4>
			GPIO_Pin_Init(GPIOA, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002aba:	2002      	movs	r0, #2
 8002abc:	2402      	movs	r4, #2
 8002abe:	2303      	movs	r3, #3
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	9102      	str	r1, [sp, #8]
 8002ac6:	9201      	str	r2, [sp, #4]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	4623      	mov	r3, r4
 8002acc:	4602      	mov	r2, r0
 8002ace:	210a      	movs	r1, #10
 8002ad0:	4845      	ldr	r0, [pc, #276]	@ (8002be8 <Timer_1_Pin_Init+0x204>)
 8002ad2:	f7ff fa4f 	bl	8001f74 <GPIO_Pin_Init>
 8002ad6:	e013      	b.n	8002b00 <Timer_1_Pin_Init+0x11c>
		else if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH3_PE13)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8c1b      	ldrh	r3, [r3, #32]
 8002adc:	f640 6213 	movw	r2, #3603	@ 0xe13
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d10d      	bne.n	8002b00 <Timer_1_Pin_Init+0x11c>
			GPIO_Pin_Init(GPIOE, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	2402      	movs	r4, #2
 8002ae8:	2303      	movs	r3, #3
 8002aea:	2204      	movs	r2, #4
 8002aec:	2101      	movs	r1, #1
 8002aee:	9102      	str	r1, [sp, #8]
 8002af0:	9201      	str	r2, [sp, #4]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4623      	mov	r3, r4
 8002af6:	4602      	mov	r2, r0
 8002af8:	210d      	movs	r1, #13
 8002afa:	483c      	ldr	r0, [pc, #240]	@ (8002bec <Timer_1_Pin_Init+0x208>)
 8002afc:	f7ff fa3a 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_4.Enable ==  true)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d028      	beq.n	8002b5c <Timer_1_Pin_Init+0x178>
	{
		if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH4_PA11)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b0e:	f640 2211 	movw	r2, #2577	@ 0xa11
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10e      	bne.n	8002b34 <Timer_1_Pin_Init+0x150>
			GPIO_Pin_Init(GPIOA, 11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002b16:	2002      	movs	r0, #2
 8002b18:	2402      	movs	r4, #2
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	2101      	movs	r1, #1
 8002b20:	9102      	str	r1, [sp, #8]
 8002b22:	9201      	str	r2, [sp, #4]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4623      	mov	r3, r4
 8002b28:	4602      	mov	r2, r0
 8002b2a:	210b      	movs	r1, #11
 8002b2c:	482e      	ldr	r0, [pc, #184]	@ (8002be8 <Timer_1_Pin_Init+0x204>)
 8002b2e:	f7ff fa21 	bl	8001f74 <GPIO_Pin_Init>
 8002b32:	e013      	b.n	8002b5c <Timer_1_Pin_Init+0x178>
		else if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH4_PE14)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b38:	f640 6214 	movw	r2, #3604	@ 0xe14
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d10d      	bne.n	8002b5c <Timer_1_Pin_Init+0x178>
			GPIO_Pin_Init(GPIOE, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002b40:	2002      	movs	r0, #2
 8002b42:	2402      	movs	r4, #2
 8002b44:	2303      	movs	r3, #3
 8002b46:	2204      	movs	r2, #4
 8002b48:	2101      	movs	r1, #1
 8002b4a:	9102      	str	r1, [sp, #8]
 8002b4c:	9201      	str	r2, [sp, #4]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	4623      	mov	r3, r4
 8002b52:	4602      	mov	r2, r0
 8002b54:	210e      	movs	r1, #14
 8002b56:	4825      	ldr	r0, [pc, #148]	@ (8002bec <Timer_1_Pin_Init+0x208>)
 8002b58:	f7ff fa0c 	bl	8001f74 <GPIO_Pin_Init>
	}


	if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Break_Interrupt)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002b62:	461a      	mov	r2, r3
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d103      	bne.n	8002b72 <Timer_1_Pin_Init+0x18e>
	{
		NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002b6a:	2018      	movs	r0, #24
 8002b6c:	f7ff faaa 	bl	80020c4 <__NVIC_EnableIRQ>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
	{
		NVIC_EnableIRQ(TIM1_CC_IRQn);
	}
}
 8002b70:	e034      	b.n	8002bdc <Timer_1_Pin_Init+0x1f8>
	else if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.COM_Interrupt)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d103      	bne.n	8002b88 <Timer_1_Pin_Init+0x1a4>
		NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b80:	201a      	movs	r0, #26
 8002b82:	f7ff fa9f 	bl	80020c4 <__NVIC_EnableIRQ>
}
 8002b86:	e029      	b.n	8002bdc <Timer_1_Pin_Init+0x1f8>
	else if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2301      	movs	r3, #1
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d103      	bne.n	8002b9e <Timer_1_Pin_Init+0x1ba>
		NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b96:	2019      	movs	r0, #25
 8002b98:	f7ff fa94 	bl	80020c4 <__NVIC_EnableIRQ>
}
 8002b9c:	e01e      	b.n	8002bdc <Timer_1_Pin_Init+0x1f8>
	else if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d014      	beq.n	8002bd6 <Timer_1_Pin_Init+0x1f2>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2304      	movs	r3, #4
	else if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d00d      	beq.n	8002bd6 <Timer_1_Pin_Init+0x1f2>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2308      	movs	r3, #8
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d006      	beq.n	8002bd6 <Timer_1_Pin_Init+0x1f2>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2310      	movs	r3, #16
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d102      	bne.n	8002bdc <Timer_1_Pin_Init+0x1f8>
		NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002bd6:	201b      	movs	r0, #27
 8002bd8:	f7ff fa74 	bl	80020c4 <__NVIC_EnableIRQ>
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd90      	pop	{r4, r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40021000 	.word	0x40021000

08002bf0 <Timer_2_Pin_Init>:

static void Timer_2_Pin_Init(Timer_Config *config)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af04      	add	r7, sp, #16
 8002bf6:	6078      	str	r0, [r7, #4]

	RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8002df4 <Timer_2_Pin_Init+0x204>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	4a7d      	ldr	r2, [pc, #500]	@ (8002df4 <Timer_2_Pin_Init+0x204>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6413      	str	r3, [r2, #64]	@ 0x40

	__timer_2_config__ = config;
 8002c04:	4a7c      	ldr	r2, [pc, #496]	@ (8002df8 <Timer_2_Pin_Init+0x208>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]

	if(config -> Channel_1.Enable ==  true)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7c1b      	ldrb	r3, [r3, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d03b      	beq.n	8002c8a <Timer_2_Pin_Init+0x9a>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH1_PA0)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8a9b      	ldrh	r3, [r3, #20]
 8002c16:	22a0      	movs	r2, #160	@ 0xa0
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10e      	bne.n	8002c3a <Timer_2_Pin_Init+0x4a>
			GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	2400      	movs	r4, #0
 8002c20:	2303      	movs	r3, #3
 8002c22:	2204      	movs	r2, #4
 8002c24:	2101      	movs	r1, #1
 8002c26:	9102      	str	r1, [sp, #8]
 8002c28:	9201      	str	r2, [sp, #4]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	4602      	mov	r2, r0
 8002c30:	2100      	movs	r1, #0
 8002c32:	4872      	ldr	r0, [pc, #456]	@ (8002dfc <Timer_2_Pin_Init+0x20c>)
 8002c34:	f7ff f99e 	bl	8001f74 <GPIO_Pin_Init>
 8002c38:	e027      	b.n	8002c8a <Timer_2_Pin_Init+0x9a>
		else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH1_PA15)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	8a9b      	ldrh	r3, [r3, #20]
 8002c3e:	f640 2215 	movw	r2, #2581	@ 0xa15
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10e      	bne.n	8002c64 <Timer_2_Pin_Init+0x74>
			GPIO_Pin_Init(GPIOA, 15, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002c46:	2002      	movs	r0, #2
 8002c48:	2402      	movs	r4, #2
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	2101      	movs	r1, #1
 8002c50:	9102      	str	r1, [sp, #8]
 8002c52:	9201      	str	r2, [sp, #4]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	4623      	mov	r3, r4
 8002c58:	4602      	mov	r2, r0
 8002c5a:	210f      	movs	r1, #15
 8002c5c:	4867      	ldr	r0, [pc, #412]	@ (8002dfc <Timer_2_Pin_Init+0x20c>)
 8002c5e:	f7ff f989 	bl	8001f74 <GPIO_Pin_Init>
 8002c62:	e012      	b.n	8002c8a <Timer_2_Pin_Init+0x9a>
		else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH1_PA5)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8a9b      	ldrh	r3, [r3, #20]
 8002c68:	22a5      	movs	r2, #165	@ 0xa5
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10d      	bne.n	8002c8a <Timer_2_Pin_Init+0x9a>
			GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002c6e:	2002      	movs	r0, #2
 8002c70:	2402      	movs	r4, #2
 8002c72:	2303      	movs	r3, #3
 8002c74:	2204      	movs	r2, #4
 8002c76:	2101      	movs	r1, #1
 8002c78:	9102      	str	r1, [sp, #8]
 8002c7a:	9201      	str	r2, [sp, #4]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	4623      	mov	r3, r4
 8002c80:	4602      	mov	r2, r0
 8002c82:	2105      	movs	r1, #5
 8002c84:	485d      	ldr	r0, [pc, #372]	@ (8002dfc <Timer_2_Pin_Init+0x20c>)
 8002c86:	f7ff f975 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7d9b      	ldrb	r3, [r3, #22]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d026      	beq.n	8002ce0 <Timer_2_Pin_Init+0xf0>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH2_PA1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8b5b      	ldrh	r3, [r3, #26]
 8002c96:	22a1      	movs	r2, #161	@ 0xa1
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10e      	bne.n	8002cba <Timer_2_Pin_Init+0xca>
			GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	2400      	movs	r4, #0
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	9102      	str	r1, [sp, #8]
 8002ca8:	9201      	str	r2, [sp, #4]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	4623      	mov	r3, r4
 8002cae:	4602      	mov	r2, r0
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4852      	ldr	r0, [pc, #328]	@ (8002dfc <Timer_2_Pin_Init+0x20c>)
 8002cb4:	f7ff f95e 	bl	8001f74 <GPIO_Pin_Init>
 8002cb8:	e012      	b.n	8002ce0 <Timer_2_Pin_Init+0xf0>
		else if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH2_PB3)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8b5b      	ldrh	r3, [r3, #26]
 8002cbe:	22b3      	movs	r2, #179	@ 0xb3
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d10d      	bne.n	8002ce0 <Timer_2_Pin_Init+0xf0>
			GPIO_Pin_Init(GPIOB,3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002cc4:	2002      	movs	r0, #2
 8002cc6:	2402      	movs	r4, #2
 8002cc8:	2303      	movs	r3, #3
 8002cca:	2204      	movs	r2, #4
 8002ccc:	2101      	movs	r1, #1
 8002cce:	9102      	str	r1, [sp, #8]
 8002cd0:	9201      	str	r2, [sp, #4]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	2103      	movs	r1, #3
 8002cda:	4849      	ldr	r0, [pc, #292]	@ (8002e00 <Timer_2_Pin_Init+0x210>)
 8002cdc:	f7ff f94a 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_3.Enable ==  true)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7f1b      	ldrb	r3, [r3, #28]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d027      	beq.n	8002d38 <Timer_2_Pin_Init+0x148>
	{
		if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH3_PA2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8c1b      	ldrh	r3, [r3, #32]
 8002cec:	22a2      	movs	r2, #162	@ 0xa2
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d10e      	bne.n	8002d10 <Timer_2_Pin_Init+0x120>
			GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002cf2:	2002      	movs	r0, #2
 8002cf4:	2402      	movs	r4, #2
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	9102      	str	r1, [sp, #8]
 8002cfe:	9201      	str	r2, [sp, #4]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4623      	mov	r3, r4
 8002d04:	4602      	mov	r2, r0
 8002d06:	2102      	movs	r1, #2
 8002d08:	483c      	ldr	r0, [pc, #240]	@ (8002dfc <Timer_2_Pin_Init+0x20c>)
 8002d0a:	f7ff f933 	bl	8001f74 <GPIO_Pin_Init>
 8002d0e:	e013      	b.n	8002d38 <Timer_2_Pin_Init+0x148>
		else if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH3_PB10)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8c1b      	ldrh	r3, [r3, #32]
 8002d14:	f44f 6231 	mov.w	r2, #2832	@ 0xb10
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10d      	bne.n	8002d38 <Timer_2_Pin_Init+0x148>
			GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	2402      	movs	r4, #2
 8002d20:	2303      	movs	r3, #3
 8002d22:	2204      	movs	r2, #4
 8002d24:	2101      	movs	r1, #1
 8002d26:	9102      	str	r1, [sp, #8]
 8002d28:	9201      	str	r2, [sp, #4]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	4602      	mov	r2, r0
 8002d30:	210a      	movs	r1, #10
 8002d32:	4833      	ldr	r0, [pc, #204]	@ (8002e00 <Timer_2_Pin_Init+0x210>)
 8002d34:	f7ff f91e 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_4.Enable ==  true)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d027      	beq.n	8002d92 <Timer_2_Pin_Init+0x1a2>
	{
		if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH4_PA3)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d46:	22a3      	movs	r2, #163	@ 0xa3
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d10e      	bne.n	8002d6a <Timer_2_Pin_Init+0x17a>
			GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	2402      	movs	r4, #2
 8002d50:	2303      	movs	r3, #3
 8002d52:	2204      	movs	r2, #4
 8002d54:	2101      	movs	r1, #1
 8002d56:	9102      	str	r1, [sp, #8]
 8002d58:	9201      	str	r2, [sp, #4]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	4623      	mov	r3, r4
 8002d5e:	4602      	mov	r2, r0
 8002d60:	2103      	movs	r1, #3
 8002d62:	4826      	ldr	r0, [pc, #152]	@ (8002dfc <Timer_2_Pin_Init+0x20c>)
 8002d64:	f7ff f906 	bl	8001f74 <GPIO_Pin_Init>
 8002d68:	e013      	b.n	8002d92 <Timer_2_Pin_Init+0x1a2>
		else if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH4_PB11)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d6e:	f640 3211 	movw	r2, #2833	@ 0xb11
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10d      	bne.n	8002d92 <Timer_2_Pin_Init+0x1a2>
			GPIO_Pin_Init(GPIOB, 11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002d76:	2002      	movs	r0, #2
 8002d78:	2402      	movs	r4, #2
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	2101      	movs	r1, #1
 8002d80:	9102      	str	r1, [sp, #8]
 8002d82:	9201      	str	r2, [sp, #4]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	4623      	mov	r3, r4
 8002d88:	4602      	mov	r2, r0
 8002d8a:	210b      	movs	r1, #11
 8002d8c:	481c      	ldr	r0, [pc, #112]	@ (8002e00 <Timer_2_Pin_Init+0x210>)
 8002d8e:	f7ff f8f1 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2302      	movs	r3, #2
	if(
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d022      	beq.n	8002de6 <Timer_2_Pin_Init+0x1f6>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002da6:	461a      	mov	r2, r3
 8002da8:	2304      	movs	r3, #4
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d01b      	beq.n	8002de6 <Timer_2_Pin_Init+0x1f6>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002db4:	461a      	mov	r2, r3
 8002db6:	2308      	movs	r3, #8
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d014      	beq.n	8002de6 <Timer_2_Pin_Init+0x1f6>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2310      	movs	r3, #16
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d00d      	beq.n	8002de6 <Timer_2_Pin_Init+0x1f6>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2340      	movs	r3, #64	@ 0x40
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d006      	beq.n	8002de6 <Timer_2_Pin_Init+0x1f6>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002dde:	461a      	mov	r2, r3
 8002de0:	2301      	movs	r3, #1
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d102      	bne.n	8002dec <Timer_2_Pin_Init+0x1fc>
	)
	{
		NVIC_EnableIRQ(TIM2_IRQn);
 8002de6:	201c      	movs	r0, #28
 8002de8:	f7ff f96c 	bl	80020c4 <__NVIC_EnableIRQ>
	}

}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	40023800 	.word	0x40023800
 8002df8:	200000ac 	.word	0x200000ac
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40020400 	.word	0x40020400

08002e04 <Timer_3_Pin_Init>:

static void Timer_3_Pin_Init(Timer_Config *config)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af04      	add	r7, sp, #16
 8002e0a:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002e0c:	4b85      	ldr	r3, [pc, #532]	@ (8003024 <Timer_3_Pin_Init+0x220>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	4a84      	ldr	r2, [pc, #528]	@ (8003024 <Timer_3_Pin_Init+0x220>)
 8002e12:	f043 0302 	orr.w	r3, r3, #2
 8002e16:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7c1b      	ldrb	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d03a      	beq.n	8002e96 <Timer_3_Pin_Init+0x92>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH1_PA6)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8a9b      	ldrh	r3, [r3, #20]
 8002e24:	22a6      	movs	r2, #166	@ 0xa6
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10e      	bne.n	8002e48 <Timer_3_Pin_Init+0x44>
			GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002e2a:	2002      	movs	r0, #2
 8002e2c:	2402      	movs	r4, #2
 8002e2e:	2303      	movs	r3, #3
 8002e30:	2204      	movs	r2, #4
 8002e32:	2102      	movs	r1, #2
 8002e34:	9102      	str	r1, [sp, #8]
 8002e36:	9201      	str	r2, [sp, #4]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	2106      	movs	r1, #6
 8002e40:	4879      	ldr	r0, [pc, #484]	@ (8003028 <Timer_3_Pin_Init+0x224>)
 8002e42:	f7ff f897 	bl	8001f74 <GPIO_Pin_Init>
 8002e46:	e026      	b.n	8002e96 <Timer_3_Pin_Init+0x92>
		else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH1_PB4)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8a9b      	ldrh	r3, [r3, #20]
 8002e4c:	22b4      	movs	r2, #180	@ 0xb4
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d10e      	bne.n	8002e70 <Timer_3_Pin_Init+0x6c>
			GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002e52:	2002      	movs	r0, #2
 8002e54:	2402      	movs	r4, #2
 8002e56:	2303      	movs	r3, #3
 8002e58:	2204      	movs	r2, #4
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	9102      	str	r1, [sp, #8]
 8002e5e:	9201      	str	r2, [sp, #4]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	4623      	mov	r3, r4
 8002e64:	4602      	mov	r2, r0
 8002e66:	2104      	movs	r1, #4
 8002e68:	4870      	ldr	r0, [pc, #448]	@ (800302c <Timer_3_Pin_Init+0x228>)
 8002e6a:	f7ff f883 	bl	8001f74 <GPIO_Pin_Init>
 8002e6e:	e012      	b.n	8002e96 <Timer_3_Pin_Init+0x92>
		else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH1_PC6)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8a9b      	ldrh	r3, [r3, #20]
 8002e74:	22c6      	movs	r2, #198	@ 0xc6
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d10d      	bne.n	8002e96 <Timer_3_Pin_Init+0x92>
			GPIO_Pin_Init(GPIOC, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002e7a:	2002      	movs	r0, #2
 8002e7c:	2402      	movs	r4, #2
 8002e7e:	2303      	movs	r3, #3
 8002e80:	2204      	movs	r2, #4
 8002e82:	2102      	movs	r1, #2
 8002e84:	9102      	str	r1, [sp, #8]
 8002e86:	9201      	str	r2, [sp, #4]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	2106      	movs	r1, #6
 8002e90:	4867      	ldr	r0, [pc, #412]	@ (8003030 <Timer_3_Pin_Init+0x22c>)
 8002e92:	f7ff f86f 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7d9b      	ldrb	r3, [r3, #22]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d03a      	beq.n	8002f14 <Timer_3_Pin_Init+0x110>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH2_PA7)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8b5b      	ldrh	r3, [r3, #26]
 8002ea2:	22a7      	movs	r2, #167	@ 0xa7
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d10e      	bne.n	8002ec6 <Timer_3_Pin_Init+0xc2>
			GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002ea8:	2002      	movs	r0, #2
 8002eaa:	2402      	movs	r4, #2
 8002eac:	2303      	movs	r3, #3
 8002eae:	2204      	movs	r2, #4
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	9102      	str	r1, [sp, #8]
 8002eb4:	9201      	str	r2, [sp, #4]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4623      	mov	r3, r4
 8002eba:	4602      	mov	r2, r0
 8002ebc:	2107      	movs	r1, #7
 8002ebe:	485a      	ldr	r0, [pc, #360]	@ (8003028 <Timer_3_Pin_Init+0x224>)
 8002ec0:	f7ff f858 	bl	8001f74 <GPIO_Pin_Init>
 8002ec4:	e026      	b.n	8002f14 <Timer_3_Pin_Init+0x110>
		else if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH2_PB5)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8b5b      	ldrh	r3, [r3, #26]
 8002eca:	22b5      	movs	r2, #181	@ 0xb5
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10e      	bne.n	8002eee <Timer_3_Pin_Init+0xea>
			GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	2402      	movs	r4, #2
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	2102      	movs	r1, #2
 8002eda:	9102      	str	r1, [sp, #8]
 8002edc:	9201      	str	r2, [sp, #4]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4623      	mov	r3, r4
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	2105      	movs	r1, #5
 8002ee6:	4851      	ldr	r0, [pc, #324]	@ (800302c <Timer_3_Pin_Init+0x228>)
 8002ee8:	f7ff f844 	bl	8001f74 <GPIO_Pin_Init>
 8002eec:	e012      	b.n	8002f14 <Timer_3_Pin_Init+0x110>
		else if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH2_PC7)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8b5b      	ldrh	r3, [r3, #26]
 8002ef2:	22c7      	movs	r2, #199	@ 0xc7
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10d      	bne.n	8002f14 <Timer_3_Pin_Init+0x110>
			GPIO_Pin_Init(GPIOC, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002ef8:	2002      	movs	r0, #2
 8002efa:	2402      	movs	r4, #2
 8002efc:	2303      	movs	r3, #3
 8002efe:	2204      	movs	r2, #4
 8002f00:	2102      	movs	r1, #2
 8002f02:	9102      	str	r1, [sp, #8]
 8002f04:	9201      	str	r2, [sp, #4]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	4623      	mov	r3, r4
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	2107      	movs	r1, #7
 8002f0e:	4848      	ldr	r0, [pc, #288]	@ (8003030 <Timer_3_Pin_Init+0x22c>)
 8002f10:	f7ff f830 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_3.Enable ==  true)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7f1b      	ldrb	r3, [r3, #28]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d026      	beq.n	8002f6a <Timer_3_Pin_Init+0x166>
	{
		if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH3_PB0)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8c1b      	ldrh	r3, [r3, #32]
 8002f20:	22b0      	movs	r2, #176	@ 0xb0
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10e      	bne.n	8002f44 <Timer_3_Pin_Init+0x140>
			GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002f26:	2002      	movs	r0, #2
 8002f28:	2402      	movs	r4, #2
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	2102      	movs	r1, #2
 8002f30:	9102      	str	r1, [sp, #8]
 8002f32:	9201      	str	r2, [sp, #4]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	4623      	mov	r3, r4
 8002f38:	4602      	mov	r2, r0
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	483b      	ldr	r0, [pc, #236]	@ (800302c <Timer_3_Pin_Init+0x228>)
 8002f3e:	f7ff f819 	bl	8001f74 <GPIO_Pin_Init>
 8002f42:	e012      	b.n	8002f6a <Timer_3_Pin_Init+0x166>
		else if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH3_PC8)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	8c1b      	ldrh	r3, [r3, #32]
 8002f48:	22c8      	movs	r2, #200	@ 0xc8
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10d      	bne.n	8002f6a <Timer_3_Pin_Init+0x166>
			GPIO_Pin_Init(GPIOC, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002f4e:	2002      	movs	r0, #2
 8002f50:	2402      	movs	r4, #2
 8002f52:	2303      	movs	r3, #3
 8002f54:	2204      	movs	r2, #4
 8002f56:	2102      	movs	r1, #2
 8002f58:	9102      	str	r1, [sp, #8]
 8002f5a:	9201      	str	r2, [sp, #4]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	4623      	mov	r3, r4
 8002f60:	4602      	mov	r2, r0
 8002f62:	2108      	movs	r1, #8
 8002f64:	4832      	ldr	r0, [pc, #200]	@ (8003030 <Timer_3_Pin_Init+0x22c>)
 8002f66:	f7ff f805 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_4.Enable ==  true)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d026      	beq.n	8002fc2 <Timer_3_Pin_Init+0x1be>
	{
		if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH4_PB1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f78:	22b1      	movs	r2, #177	@ 0xb1
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10e      	bne.n	8002f9c <Timer_3_Pin_Init+0x198>
			GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002f7e:	2002      	movs	r0, #2
 8002f80:	2402      	movs	r4, #2
 8002f82:	2303      	movs	r3, #3
 8002f84:	2204      	movs	r2, #4
 8002f86:	2102      	movs	r1, #2
 8002f88:	9102      	str	r1, [sp, #8]
 8002f8a:	9201      	str	r2, [sp, #4]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	4623      	mov	r3, r4
 8002f90:	4602      	mov	r2, r0
 8002f92:	2101      	movs	r1, #1
 8002f94:	4825      	ldr	r0, [pc, #148]	@ (800302c <Timer_3_Pin_Init+0x228>)
 8002f96:	f7fe ffed 	bl	8001f74 <GPIO_Pin_Init>
 8002f9a:	e012      	b.n	8002fc2 <Timer_3_Pin_Init+0x1be>
		else if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH4_PC9)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fa0:	22c9      	movs	r2, #201	@ 0xc9
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10d      	bne.n	8002fc2 <Timer_3_Pin_Init+0x1be>
			GPIO_Pin_Init(GPIOC, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002fa6:	2002      	movs	r0, #2
 8002fa8:	2402      	movs	r4, #2
 8002faa:	2303      	movs	r3, #3
 8002fac:	2204      	movs	r2, #4
 8002fae:	2102      	movs	r1, #2
 8002fb0:	9102      	str	r1, [sp, #8]
 8002fb2:	9201      	str	r2, [sp, #4]
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	4602      	mov	r2, r0
 8002fba:	2109      	movs	r1, #9
 8002fbc:	481c      	ldr	r0, [pc, #112]	@ (8003030 <Timer_3_Pin_Init+0x22c>)
 8002fbe:	f7fe ffd9 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2302      	movs	r3, #2
	if(
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d022      	beq.n	8003016 <Timer_3_Pin_Init+0x212>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2304      	movs	r3, #4
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d01b      	beq.n	8003016 <Timer_3_Pin_Init+0x212>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2308      	movs	r3, #8
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d014      	beq.n	8003016 <Timer_3_Pin_Init+0x212>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2310      	movs	r3, #16
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d00d      	beq.n	8003016 <Timer_3_Pin_Init+0x212>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003000:	461a      	mov	r2, r3
 8003002:	2340      	movs	r3, #64	@ 0x40
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d006      	beq.n	8003016 <Timer_3_Pin_Init+0x212>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800300e:	461a      	mov	r2, r3
 8003010:	2301      	movs	r3, #1
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d102      	bne.n	800301c <Timer_3_Pin_Init+0x218>
	)
	{
		NVIC_EnableIRQ(TIM3_IRQn);
 8003016:	201d      	movs	r0, #29
 8003018:	f7ff f854 	bl	80020c4 <__NVIC_EnableIRQ>
	}
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	40023800 	.word	0x40023800
 8003028:	40020000 	.word	0x40020000
 800302c:	40020400 	.word	0x40020400
 8003030:	40020800 	.word	0x40020800

08003034 <Timer_4_Pin_Init>:
static void Timer_4_Pin_Init(Timer_Config *config)
{
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b087      	sub	sp, #28
 8003038:	af04      	add	r7, sp, #16
 800303a:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 800303c:	4b72      	ldr	r3, [pc, #456]	@ (8003208 <Timer_4_Pin_Init+0x1d4>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	4a71      	ldr	r2, [pc, #452]	@ (8003208 <Timer_4_Pin_Init+0x1d4>)
 8003042:	f043 0304 	orr.w	r3, r3, #4
 8003046:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	7c1b      	ldrb	r3, [r3, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d027      	beq.n	80030a0 <Timer_4_Pin_Init+0x6c>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_4.CH1_PB6)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8a9b      	ldrh	r3, [r3, #20]
 8003054:	22b6      	movs	r2, #182	@ 0xb6
 8003056:	4293      	cmp	r3, r2
 8003058:	d10e      	bne.n	8003078 <Timer_4_Pin_Init+0x44>
			GPIO_Pin_Init(GPIOB, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 800305a:	2002      	movs	r0, #2
 800305c:	2402      	movs	r4, #2
 800305e:	2303      	movs	r3, #3
 8003060:	2204      	movs	r2, #4
 8003062:	2102      	movs	r1, #2
 8003064:	9102      	str	r1, [sp, #8]
 8003066:	9201      	str	r2, [sp, #4]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4623      	mov	r3, r4
 800306c:	4602      	mov	r2, r0
 800306e:	2106      	movs	r1, #6
 8003070:	4866      	ldr	r0, [pc, #408]	@ (800320c <Timer_4_Pin_Init+0x1d8>)
 8003072:	f7fe ff7f 	bl	8001f74 <GPIO_Pin_Init>
 8003076:	e013      	b.n	80030a0 <Timer_4_Pin_Init+0x6c>
		else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_4.CH1_PD12)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8a9b      	ldrh	r3, [r3, #20]
 800307c:	f640 5212 	movw	r2, #3346	@ 0xd12
 8003080:	4293      	cmp	r3, r2
 8003082:	d10d      	bne.n	80030a0 <Timer_4_Pin_Init+0x6c>
			GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 8003084:	2002      	movs	r0, #2
 8003086:	2402      	movs	r4, #2
 8003088:	2303      	movs	r3, #3
 800308a:	2204      	movs	r2, #4
 800308c:	2102      	movs	r1, #2
 800308e:	9102      	str	r1, [sp, #8]
 8003090:	9201      	str	r2, [sp, #4]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	4623      	mov	r3, r4
 8003096:	4602      	mov	r2, r0
 8003098:	210c      	movs	r1, #12
 800309a:	485d      	ldr	r0, [pc, #372]	@ (8003210 <Timer_4_Pin_Init+0x1dc>)
 800309c:	f7fe ff6a 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7d9b      	ldrb	r3, [r3, #22]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d027      	beq.n	80030f8 <Timer_4_Pin_Init+0xc4>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_4.CH2_PB7)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8b5b      	ldrh	r3, [r3, #26]
 80030ac:	22b7      	movs	r2, #183	@ 0xb7
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10e      	bne.n	80030d0 <Timer_4_Pin_Init+0x9c>
			GPIO_Pin_Init(GPIOB, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 80030b2:	2002      	movs	r0, #2
 80030b4:	2402      	movs	r4, #2
 80030b6:	2303      	movs	r3, #3
 80030b8:	2204      	movs	r2, #4
 80030ba:	2102      	movs	r1, #2
 80030bc:	9102      	str	r1, [sp, #8]
 80030be:	9201      	str	r2, [sp, #4]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	4623      	mov	r3, r4
 80030c4:	4602      	mov	r2, r0
 80030c6:	2107      	movs	r1, #7
 80030c8:	4850      	ldr	r0, [pc, #320]	@ (800320c <Timer_4_Pin_Init+0x1d8>)
 80030ca:	f7fe ff53 	bl	8001f74 <GPIO_Pin_Init>
 80030ce:	e013      	b.n	80030f8 <Timer_4_Pin_Init+0xc4>
		else if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_4.CH2_PD13)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8b5b      	ldrh	r3, [r3, #26]
 80030d4:	f640 5213 	movw	r2, #3347	@ 0xd13
 80030d8:	4293      	cmp	r3, r2
 80030da:	d10d      	bne.n	80030f8 <Timer_4_Pin_Init+0xc4>
			GPIO_Pin_Init(GPIOD, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 80030dc:	2002      	movs	r0, #2
 80030de:	2402      	movs	r4, #2
 80030e0:	2303      	movs	r3, #3
 80030e2:	2204      	movs	r2, #4
 80030e4:	2102      	movs	r1, #2
 80030e6:	9102      	str	r1, [sp, #8]
 80030e8:	9201      	str	r2, [sp, #4]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	4623      	mov	r3, r4
 80030ee:	4602      	mov	r2, r0
 80030f0:	210d      	movs	r1, #13
 80030f2:	4847      	ldr	r0, [pc, #284]	@ (8003210 <Timer_4_Pin_Init+0x1dc>)
 80030f4:	f7fe ff3e 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_3.Enable ==  true)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7f1b      	ldrb	r3, [r3, #28]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d026      	beq.n	800314e <Timer_4_Pin_Init+0x11a>
	{
		if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH3_PB0)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8c1b      	ldrh	r3, [r3, #32]
 8003104:	22b0      	movs	r2, #176	@ 0xb0
 8003106:	4293      	cmp	r3, r2
 8003108:	d10e      	bne.n	8003128 <Timer_4_Pin_Init+0xf4>
			GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 800310a:	2002      	movs	r0, #2
 800310c:	2402      	movs	r4, #2
 800310e:	2303      	movs	r3, #3
 8003110:	2204      	movs	r2, #4
 8003112:	2102      	movs	r1, #2
 8003114:	9102      	str	r1, [sp, #8]
 8003116:	9201      	str	r2, [sp, #4]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	4623      	mov	r3, r4
 800311c:	4602      	mov	r2, r0
 800311e:	2100      	movs	r1, #0
 8003120:	483a      	ldr	r0, [pc, #232]	@ (800320c <Timer_4_Pin_Init+0x1d8>)
 8003122:	f7fe ff27 	bl	8001f74 <GPIO_Pin_Init>
 8003126:	e012      	b.n	800314e <Timer_4_Pin_Init+0x11a>
		else if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH3_PC8)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8c1b      	ldrh	r3, [r3, #32]
 800312c:	22c8      	movs	r2, #200	@ 0xc8
 800312e:	4293      	cmp	r3, r2
 8003130:	d10d      	bne.n	800314e <Timer_4_Pin_Init+0x11a>
			GPIO_Pin_Init(GPIOC, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 8003132:	2002      	movs	r0, #2
 8003134:	2402      	movs	r4, #2
 8003136:	2303      	movs	r3, #3
 8003138:	2204      	movs	r2, #4
 800313a:	2102      	movs	r1, #2
 800313c:	9102      	str	r1, [sp, #8]
 800313e:	9201      	str	r2, [sp, #4]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	4623      	mov	r3, r4
 8003144:	4602      	mov	r2, r0
 8003146:	2108      	movs	r1, #8
 8003148:	4832      	ldr	r0, [pc, #200]	@ (8003214 <Timer_4_Pin_Init+0x1e0>)
 800314a:	f7fe ff13 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_4.Enable ==  true)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8003154:	2b00      	cmp	r3, #0
 8003156:	d026      	beq.n	80031a6 <Timer_4_Pin_Init+0x172>
	{
		if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH4_PB1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800315c:	22b1      	movs	r2, #177	@ 0xb1
 800315e:	4293      	cmp	r3, r2
 8003160:	d10e      	bne.n	8003180 <Timer_4_Pin_Init+0x14c>
			GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 8003162:	2002      	movs	r0, #2
 8003164:	2402      	movs	r4, #2
 8003166:	2303      	movs	r3, #3
 8003168:	2204      	movs	r2, #4
 800316a:	2102      	movs	r1, #2
 800316c:	9102      	str	r1, [sp, #8]
 800316e:	9201      	str	r2, [sp, #4]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	4623      	mov	r3, r4
 8003174:	4602      	mov	r2, r0
 8003176:	2101      	movs	r1, #1
 8003178:	4824      	ldr	r0, [pc, #144]	@ (800320c <Timer_4_Pin_Init+0x1d8>)
 800317a:	f7fe fefb 	bl	8001f74 <GPIO_Pin_Init>
 800317e:	e012      	b.n	80031a6 <Timer_4_Pin_Init+0x172>
		else if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH4_PC9)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003184:	22c9      	movs	r2, #201	@ 0xc9
 8003186:	4293      	cmp	r3, r2
 8003188:	d10d      	bne.n	80031a6 <Timer_4_Pin_Init+0x172>
			GPIO_Pin_Init(GPIOC, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 800318a:	2002      	movs	r0, #2
 800318c:	2402      	movs	r4, #2
 800318e:	2303      	movs	r3, #3
 8003190:	2204      	movs	r2, #4
 8003192:	2102      	movs	r1, #2
 8003194:	9102      	str	r1, [sp, #8]
 8003196:	9201      	str	r2, [sp, #4]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	4623      	mov	r3, r4
 800319c:	4602      	mov	r2, r0
 800319e:	2109      	movs	r1, #9
 80031a0:	481c      	ldr	r0, [pc, #112]	@ (8003214 <Timer_4_Pin_Init+0x1e0>)
 80031a2:	f7fe fee7 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80031ac:	461a      	mov	r2, r3
 80031ae:	2302      	movs	r3, #2
	if(
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d022      	beq.n	80031fa <Timer_4_Pin_Init+0x1c6>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80031ba:	461a      	mov	r2, r3
 80031bc:	2304      	movs	r3, #4
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d01b      	beq.n	80031fa <Timer_4_Pin_Init+0x1c6>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80031c8:	461a      	mov	r2, r3
 80031ca:	2308      	movs	r3, #8
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d014      	beq.n	80031fa <Timer_4_Pin_Init+0x1c6>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80031d6:	461a      	mov	r2, r3
 80031d8:	2310      	movs	r3, #16
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d00d      	beq.n	80031fa <Timer_4_Pin_Init+0x1c6>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80031e4:	461a      	mov	r2, r3
 80031e6:	2340      	movs	r3, #64	@ 0x40
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d006      	beq.n	80031fa <Timer_4_Pin_Init+0x1c6>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80031f2:	461a      	mov	r2, r3
 80031f4:	2301      	movs	r3, #1
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d102      	bne.n	8003200 <Timer_4_Pin_Init+0x1cc>
	)
	{
		NVIC_EnableIRQ(TIM4_IRQn);
 80031fa:	201e      	movs	r0, #30
 80031fc:	f7fe ff62 	bl	80020c4 <__NVIC_EnableIRQ>
	}
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bd90      	pop	{r4, r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	40020400 	.word	0x40020400
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40020800 	.word	0x40020800

08003218 <Timer_5_Pin_Init>:
static void Timer_5_Pin_Init(Timer_Config *config)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b087      	sub	sp, #28
 800321c:	af04      	add	r7, sp, #16
 800321e:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003220:	4b49      	ldr	r3, [pc, #292]	@ (8003348 <Timer_5_Pin_Init+0x130>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	4a48      	ldr	r2, [pc, #288]	@ (8003348 <Timer_5_Pin_Init+0x130>)
 8003226:	f043 0308 	orr.w	r3, r3, #8
 800322a:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7c1b      	ldrb	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d012      	beq.n	800325a <Timer_5_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_5.CH1_PA0)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8a9b      	ldrh	r3, [r3, #20]
 8003238:	22a0      	movs	r2, #160	@ 0xa0
 800323a:	4293      	cmp	r3, r2
 800323c:	d10d      	bne.n	800325a <Timer_5_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_5);
 800323e:	2002      	movs	r0, #2
 8003240:	2402      	movs	r4, #2
 8003242:	2303      	movs	r3, #3
 8003244:	2204      	movs	r2, #4
 8003246:	2102      	movs	r1, #2
 8003248:	9102      	str	r1, [sp, #8]
 800324a:	9201      	str	r2, [sp, #4]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	4623      	mov	r3, r4
 8003250:	4602      	mov	r2, r0
 8003252:	2100      	movs	r1, #0
 8003254:	483d      	ldr	r0, [pc, #244]	@ (800334c <Timer_5_Pin_Init+0x134>)
 8003256:	f7fe fe8d 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7d9b      	ldrb	r3, [r3, #22]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d012      	beq.n	8003288 <Timer_5_Pin_Init+0x70>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_5.CH2_PA1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8b5b      	ldrh	r3, [r3, #26]
 8003266:	22a1      	movs	r2, #161	@ 0xa1
 8003268:	4293      	cmp	r3, r2
 800326a:	d10d      	bne.n	8003288 <Timer_5_Pin_Init+0x70>
			GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_5);
 800326c:	2002      	movs	r0, #2
 800326e:	2402      	movs	r4, #2
 8003270:	2303      	movs	r3, #3
 8003272:	2204      	movs	r2, #4
 8003274:	2102      	movs	r1, #2
 8003276:	9102      	str	r1, [sp, #8]
 8003278:	9201      	str	r2, [sp, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4623      	mov	r3, r4
 800327e:	4602      	mov	r2, r0
 8003280:	2101      	movs	r1, #1
 8003282:	4832      	ldr	r0, [pc, #200]	@ (800334c <Timer_5_Pin_Init+0x134>)
 8003284:	f7fe fe76 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_3.Enable ==  true)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7f1b      	ldrb	r3, [r3, #28]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <Timer_5_Pin_Init+0x9e>
	{
		if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_5.CH3_PA2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8c1b      	ldrh	r3, [r3, #32]
 8003294:	22a2      	movs	r2, #162	@ 0xa2
 8003296:	4293      	cmp	r3, r2
 8003298:	d10d      	bne.n	80032b6 <Timer_5_Pin_Init+0x9e>
			GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_5);
 800329a:	2002      	movs	r0, #2
 800329c:	2402      	movs	r4, #2
 800329e:	2303      	movs	r3, #3
 80032a0:	2204      	movs	r2, #4
 80032a2:	2102      	movs	r1, #2
 80032a4:	9102      	str	r1, [sp, #8]
 80032a6:	9201      	str	r2, [sp, #4]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	4623      	mov	r3, r4
 80032ac:	4602      	mov	r2, r0
 80032ae:	2100      	movs	r1, #0
 80032b0:	4827      	ldr	r0, [pc, #156]	@ (8003350 <Timer_5_Pin_Init+0x138>)
 80032b2:	f7fe fe5f 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_4.Enable ==  true)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d012      	beq.n	80032e6 <Timer_5_Pin_Init+0xce>
	{
		if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_5.CH4_PA3)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032c4:	22a3      	movs	r2, #163	@ 0xa3
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10d      	bne.n	80032e6 <Timer_5_Pin_Init+0xce>
			GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_5);
 80032ca:	2002      	movs	r0, #2
 80032cc:	2402      	movs	r4, #2
 80032ce:	2303      	movs	r3, #3
 80032d0:	2204      	movs	r2, #4
 80032d2:	2102      	movs	r1, #2
 80032d4:	9102      	str	r1, [sp, #8]
 80032d6:	9201      	str	r2, [sp, #4]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	4623      	mov	r3, r4
 80032dc:	4602      	mov	r2, r0
 80032de:	2101      	movs	r1, #1
 80032e0:	481b      	ldr	r0, [pc, #108]	@ (8003350 <Timer_5_Pin_Init+0x138>)
 80032e2:	f7fe fe47 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80032ec:	461a      	mov	r2, r3
 80032ee:	2302      	movs	r3, #2
	if(
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d022      	beq.n	800333a <Timer_5_Pin_Init+0x122>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80032fa:	461a      	mov	r2, r3
 80032fc:	2304      	movs	r3, #4
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d01b      	beq.n	800333a <Timer_5_Pin_Init+0x122>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003308:	461a      	mov	r2, r3
 800330a:	2308      	movs	r3, #8
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d014      	beq.n	800333a <Timer_5_Pin_Init+0x122>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003316:	461a      	mov	r2, r3
 8003318:	2310      	movs	r3, #16
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d00d      	beq.n	800333a <Timer_5_Pin_Init+0x122>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003324:	461a      	mov	r2, r3
 8003326:	2340      	movs	r3, #64	@ 0x40
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d006      	beq.n	800333a <Timer_5_Pin_Init+0x122>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003332:	461a      	mov	r2, r3
 8003334:	2301      	movs	r3, #1
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d102      	bne.n	8003340 <Timer_5_Pin_Init+0x128>
	)
	{
		NVIC_EnableIRQ(TIM5_IRQn);
 800333a:	2032      	movs	r0, #50	@ 0x32
 800333c:	f7fe fec2 	bl	80020c4 <__NVIC_EnableIRQ>
	}
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bd90      	pop	{r4, r7, pc}
 8003348:	40023800 	.word	0x40023800
 800334c:	40020000 	.word	0x40020000
 8003350:	40020400 	.word	0x40020400

08003354 <Timer_8_Pin_Init>:
static void Timer_8_Pin_Init(Timer_Config *config)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b087      	sub	sp, #28
 8003358:	af04      	add	r7, sp, #16
 800335a:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 800335c:	4b53      	ldr	r3, [pc, #332]	@ (80034ac <Timer_8_Pin_Init+0x158>)
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	4a52      	ldr	r2, [pc, #328]	@ (80034ac <Timer_8_Pin_Init+0x158>)
 8003362:	f043 0302 	orr.w	r3, r3, #2
 8003366:	6453      	str	r3, [r2, #68]	@ 0x44

	if(config -> Channel_1.Enable ==  true)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	7c1b      	ldrb	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d012      	beq.n	8003396 <Timer_8_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_8.CH1_PC6)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8a9b      	ldrh	r3, [r3, #20]
 8003374:	22c6      	movs	r2, #198	@ 0xc6
 8003376:	4293      	cmp	r3, r2
 8003378:	d10d      	bne.n	8003396 <Timer_8_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOC, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_8);
 800337a:	2002      	movs	r0, #2
 800337c:	2402      	movs	r4, #2
 800337e:	2303      	movs	r3, #3
 8003380:	2204      	movs	r2, #4
 8003382:	2103      	movs	r1, #3
 8003384:	9102      	str	r1, [sp, #8]
 8003386:	9201      	str	r2, [sp, #4]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4623      	mov	r3, r4
 800338c:	4602      	mov	r2, r0
 800338e:	2106      	movs	r1, #6
 8003390:	4847      	ldr	r0, [pc, #284]	@ (80034b0 <Timer_8_Pin_Init+0x15c>)
 8003392:	f7fe fdef 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	7d9b      	ldrb	r3, [r3, #22]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d012      	beq.n	80033c4 <Timer_8_Pin_Init+0x70>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_8.CH2_PC7)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8b5b      	ldrh	r3, [r3, #26]
 80033a2:	22c7      	movs	r2, #199	@ 0xc7
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d10d      	bne.n	80033c4 <Timer_8_Pin_Init+0x70>
			GPIO_Pin_Init(GPIOC, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_8);
 80033a8:	2002      	movs	r0, #2
 80033aa:	2402      	movs	r4, #2
 80033ac:	2303      	movs	r3, #3
 80033ae:	2204      	movs	r2, #4
 80033b0:	2103      	movs	r1, #3
 80033b2:	9102      	str	r1, [sp, #8]
 80033b4:	9201      	str	r2, [sp, #4]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	4623      	mov	r3, r4
 80033ba:	4602      	mov	r2, r0
 80033bc:	2107      	movs	r1, #7
 80033be:	483c      	ldr	r0, [pc, #240]	@ (80034b0 <Timer_8_Pin_Init+0x15c>)
 80033c0:	f7fe fdd8 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_3.Enable ==  true)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7f1b      	ldrb	r3, [r3, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d012      	beq.n	80033f2 <Timer_8_Pin_Init+0x9e>
	{
		if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_8.CH3_PC8)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	8c1b      	ldrh	r3, [r3, #32]
 80033d0:	22c8      	movs	r2, #200	@ 0xc8
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <Timer_8_Pin_Init+0x9e>
			GPIO_Pin_Init(GPIOC, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_8);
 80033d6:	2002      	movs	r0, #2
 80033d8:	2402      	movs	r4, #2
 80033da:	2303      	movs	r3, #3
 80033dc:	2204      	movs	r2, #4
 80033de:	2103      	movs	r1, #3
 80033e0:	9102      	str	r1, [sp, #8]
 80033e2:	9201      	str	r2, [sp, #4]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	4623      	mov	r3, r4
 80033e8:	4602      	mov	r2, r0
 80033ea:	2108      	movs	r1, #8
 80033ec:	4830      	ldr	r0, [pc, #192]	@ (80034b0 <Timer_8_Pin_Init+0x15c>)
 80033ee:	f7fe fdc1 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_4.Enable ==  true)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d012      	beq.n	8003422 <Timer_8_Pin_Init+0xce>
	{
		if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_8.CH4_PC9)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003400:	22c9      	movs	r2, #201	@ 0xc9
 8003402:	4293      	cmp	r3, r2
 8003404:	d10d      	bne.n	8003422 <Timer_8_Pin_Init+0xce>
			GPIO_Pin_Init(GPIOC, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_8);
 8003406:	2002      	movs	r0, #2
 8003408:	2402      	movs	r4, #2
 800340a:	2303      	movs	r3, #3
 800340c:	2204      	movs	r2, #4
 800340e:	2103      	movs	r1, #3
 8003410:	9102      	str	r1, [sp, #8]
 8003412:	9201      	str	r2, [sp, #4]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	4623      	mov	r3, r4
 8003418:	4602      	mov	r2, r0
 800341a:	2109      	movs	r1, #9
 800341c:	4824      	ldr	r0, [pc, #144]	@ (80034b0 <Timer_8_Pin_Init+0x15c>)
 800341e:	f7fe fda9 	bl	8001f74 <GPIO_Pin_Init>
	}


	if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Break_Interrupt)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003428:	461a      	mov	r2, r3
 800342a:	2380      	movs	r3, #128	@ 0x80
 800342c:	429a      	cmp	r2, r3
 800342e:	d103      	bne.n	8003438 <Timer_8_Pin_Init+0xe4>
	{
		NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003430:	202b      	movs	r0, #43	@ 0x2b
 8003432:	f7fe fe47 	bl	80020c4 <__NVIC_EnableIRQ>
	{
		NVIC_EnableIRQ(TIM8_CC_IRQn);
	}


}
 8003436:	e034      	b.n	80034a2 <Timer_8_Pin_Init+0x14e>
	else if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.COM_Interrupt)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800343e:	461a      	mov	r2, r3
 8003440:	2320      	movs	r3, #32
 8003442:	429a      	cmp	r2, r3
 8003444:	d103      	bne.n	800344e <Timer_8_Pin_Init+0xfa>
		NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003446:	202d      	movs	r0, #45	@ 0x2d
 8003448:	f7fe fe3c 	bl	80020c4 <__NVIC_EnableIRQ>
}
 800344c:	e029      	b.n	80034a2 <Timer_8_Pin_Init+0x14e>
	else if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003454:	461a      	mov	r2, r3
 8003456:	2301      	movs	r3, #1
 8003458:	429a      	cmp	r2, r3
 800345a:	d103      	bne.n	8003464 <Timer_8_Pin_Init+0x110>
		NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800345c:	202c      	movs	r0, #44	@ 0x2c
 800345e:	f7fe fe31 	bl	80020c4 <__NVIC_EnableIRQ>
}
 8003462:	e01e      	b.n	80034a2 <Timer_8_Pin_Init+0x14e>
	else if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800346a:	461a      	mov	r2, r3
 800346c:	2302      	movs	r3, #2
 800346e:	429a      	cmp	r2, r3
 8003470:	d014      	beq.n	800349c <Timer_8_Pin_Init+0x148>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003478:	461a      	mov	r2, r3
 800347a:	2304      	movs	r3, #4
	else if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d00d      	beq.n	800349c <Timer_8_Pin_Init+0x148>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003486:	461a      	mov	r2, r3
 8003488:	2308      	movs	r3, #8
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d006      	beq.n	800349c <Timer_8_Pin_Init+0x148>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003494:	461a      	mov	r2, r3
 8003496:	2310      	movs	r3, #16
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8003498:	429a      	cmp	r2, r3
 800349a:	d102      	bne.n	80034a2 <Timer_8_Pin_Init+0x14e>
		NVIC_EnableIRQ(TIM8_CC_IRQn);
 800349c:	202e      	movs	r0, #46	@ 0x2e
 800349e:	f7fe fe11 	bl	80020c4 <__NVIC_EnableIRQ>
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd90      	pop	{r4, r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40020800 	.word	0x40020800

080034b4 <Timer_9_Pin_Init>:




static void Timer_9_Pin_Init(Timer_Config *config)
{
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af04      	add	r7, sp, #16
 80034ba:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 80034bc:	4b38      	ldr	r3, [pc, #224]	@ (80035a0 <Timer_9_Pin_Init+0xec>)
 80034be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c0:	4a37      	ldr	r2, [pc, #220]	@ (80035a0 <Timer_9_Pin_Init+0xec>)
 80034c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c6:	6453      	str	r3, [r2, #68]	@ 0x44

	__timer_9_config__ = config;
 80034c8:	4a36      	ldr	r2, [pc, #216]	@ (80035a4 <Timer_9_Pin_Init+0xf0>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6013      	str	r3, [r2, #0]

	if(config -> Channel_1.Enable ==  true)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7c1b      	ldrb	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d025      	beq.n	8003522 <Timer_9_Pin_Init+0x6e>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_9.CH1_PA2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8a9b      	ldrh	r3, [r3, #20]
 80034da:	22a2      	movs	r2, #162	@ 0xa2
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10d      	bne.n	80034fc <Timer_9_Pin_Init+0x48>
			GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_9);
 80034e0:	2002      	movs	r0, #2
 80034e2:	2402      	movs	r4, #2
 80034e4:	2303      	movs	r3, #3
 80034e6:	2204      	movs	r2, #4
 80034e8:	2103      	movs	r1, #3
 80034ea:	9102      	str	r1, [sp, #8]
 80034ec:	9201      	str	r2, [sp, #4]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	4623      	mov	r3, r4
 80034f2:	4602      	mov	r2, r0
 80034f4:	2102      	movs	r1, #2
 80034f6:	482c      	ldr	r0, [pc, #176]	@ (80035a8 <Timer_9_Pin_Init+0xf4>)
 80034f8:	f7fe fd3c 	bl	8001f74 <GPIO_Pin_Init>
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_9.CH1_PE5)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8a9b      	ldrh	r3, [r3, #20]
 8003500:	22e5      	movs	r2, #229	@ 0xe5
 8003502:	4293      	cmp	r3, r2
 8003504:	d10d      	bne.n	8003522 <Timer_9_Pin_Init+0x6e>
			GPIO_Pin_Init(GPIOE, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_9);
 8003506:	2002      	movs	r0, #2
 8003508:	2402      	movs	r4, #2
 800350a:	2303      	movs	r3, #3
 800350c:	2204      	movs	r2, #4
 800350e:	2103      	movs	r1, #3
 8003510:	9102      	str	r1, [sp, #8]
 8003512:	9201      	str	r2, [sp, #4]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	4623      	mov	r3, r4
 8003518:	4602      	mov	r2, r0
 800351a:	2105      	movs	r1, #5
 800351c:	4823      	ldr	r0, [pc, #140]	@ (80035ac <Timer_9_Pin_Init+0xf8>)
 800351e:	f7fe fd29 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7d9b      	ldrb	r3, [r3, #22]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d025      	beq.n	8003576 <Timer_9_Pin_Init+0xc2>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_9.CH2_PA3)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8b5b      	ldrh	r3, [r3, #26]
 800352e:	22a3      	movs	r2, #163	@ 0xa3
 8003530:	4293      	cmp	r3, r2
 8003532:	d10d      	bne.n	8003550 <Timer_9_Pin_Init+0x9c>
			GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_9);
 8003534:	2002      	movs	r0, #2
 8003536:	2402      	movs	r4, #2
 8003538:	2303      	movs	r3, #3
 800353a:	2204      	movs	r2, #4
 800353c:	2103      	movs	r1, #3
 800353e:	9102      	str	r1, [sp, #8]
 8003540:	9201      	str	r2, [sp, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	4623      	mov	r3, r4
 8003546:	4602      	mov	r2, r0
 8003548:	2103      	movs	r1, #3
 800354a:	4817      	ldr	r0, [pc, #92]	@ (80035a8 <Timer_9_Pin_Init+0xf4>)
 800354c:	f7fe fd12 	bl	8001f74 <GPIO_Pin_Init>
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_9.CH1_PE5)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8a9b      	ldrh	r3, [r3, #20]
 8003554:	22e5      	movs	r2, #229	@ 0xe5
 8003556:	4293      	cmp	r3, r2
 8003558:	d10d      	bne.n	8003576 <Timer_9_Pin_Init+0xc2>
			GPIO_Pin_Init(GPIOE, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_9);
 800355a:	2002      	movs	r0, #2
 800355c:	2402      	movs	r4, #2
 800355e:	2303      	movs	r3, #3
 8003560:	2204      	movs	r2, #4
 8003562:	2103      	movs	r1, #3
 8003564:	9102      	str	r1, [sp, #8]
 8003566:	9201      	str	r2, [sp, #4]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4623      	mov	r3, r4
 800356c:	4602      	mov	r2, r0
 800356e:	2105      	movs	r1, #5
 8003570:	480e      	ldr	r0, [pc, #56]	@ (80035ac <Timer_9_Pin_Init+0xf8>)
 8003572:	f7fe fcff 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800357c:	461a      	mov	r2, r3
 800357e:	2302      	movs	r3, #2
	if(
 8003580:	429a      	cmp	r2, r3
 8003582:	d006      	beq.n	8003592 <Timer_9_Pin_Init+0xde>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800358a:	461a      	mov	r2, r3
 800358c:	2301      	movs	r3, #1
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d102      	bne.n	8003598 <Timer_9_Pin_Init+0xe4>
	)
	{
		NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003592:	2018      	movs	r0, #24
 8003594:	f7fe fd96 	bl	80020c4 <__NVIC_EnableIRQ>
	}
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bd90      	pop	{r4, r7, pc}
 80035a0:	40023800 	.word	0x40023800
 80035a4:	200000c8 	.word	0x200000c8
 80035a8:	40020000 	.word	0x40020000
 80035ac:	40021000 	.word	0x40021000

080035b0 <Timer_10_Pin_Init>:

static void Timer_10_Pin_Init(Timer_Config *config)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af04      	add	r7, sp, #16
 80035b6:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 80035b8:	4b18      	ldr	r3, [pc, #96]	@ (800361c <Timer_10_Pin_Init+0x6c>)
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	4a17      	ldr	r2, [pc, #92]	@ (800361c <Timer_10_Pin_Init+0x6c>)
 80035be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c2:	6453      	str	r3, [r2, #68]	@ 0x44

	if(config -> Channel_1.Enable ==  true)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7c1b      	ldrb	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d012      	beq.n	80035f2 <Timer_10_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_10.CH1_PB8)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8a9b      	ldrh	r3, [r3, #20]
 80035d0:	22b8      	movs	r2, #184	@ 0xb8
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10d      	bne.n	80035f2 <Timer_10_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOB, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_10);
 80035d6:	2002      	movs	r0, #2
 80035d8:	2402      	movs	r4, #2
 80035da:	2303      	movs	r3, #3
 80035dc:	2204      	movs	r2, #4
 80035de:	2103      	movs	r1, #3
 80035e0:	9102      	str	r1, [sp, #8]
 80035e2:	9201      	str	r2, [sp, #4]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	4623      	mov	r3, r4
 80035e8:	4602      	mov	r2, r0
 80035ea:	2108      	movs	r1, #8
 80035ec:	480c      	ldr	r0, [pc, #48]	@ (8003620 <Timer_10_Pin_Init+0x70>)
 80035ee:	f7fe fcc1 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80035f8:	461a      	mov	r2, r3
 80035fa:	2302      	movs	r3, #2
	if(
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d006      	beq.n	800360e <Timer_10_Pin_Init+0x5e>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003606:	461a      	mov	r2, r3
 8003608:	2301      	movs	r3, #1
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d102      	bne.n	8003614 <Timer_10_Pin_Init+0x64>
	)
	{
		NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800360e:	2019      	movs	r0, #25
 8003610:	f7fe fd58 	bl	80020c4 <__NVIC_EnableIRQ>
	}
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bd90      	pop	{r4, r7, pc}
 800361c:	40023800 	.word	0x40023800
 8003620:	40020400 	.word	0x40020400

08003624 <Timer_11_Pin_Init>:

static void Timer_11_Pin_Init(Timer_Config *config)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b087      	sub	sp, #28
 8003628:	af04      	add	r7, sp, #16
 800362a:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 800362c:	4b18      	ldr	r3, [pc, #96]	@ (8003690 <Timer_11_Pin_Init+0x6c>)
 800362e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003630:	4a17      	ldr	r2, [pc, #92]	@ (8003690 <Timer_11_Pin_Init+0x6c>)
 8003632:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003636:	6453      	str	r3, [r2, #68]	@ 0x44

	if(config -> Channel_1.Enable ==  true)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7c1b      	ldrb	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <Timer_11_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_11.CH1_PB9)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8a9b      	ldrh	r3, [r3, #20]
 8003644:	22b9      	movs	r2, #185	@ 0xb9
 8003646:	4293      	cmp	r3, r2
 8003648:	d10d      	bne.n	8003666 <Timer_11_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOB, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_11);
 800364a:	2002      	movs	r0, #2
 800364c:	2402      	movs	r4, #2
 800364e:	2303      	movs	r3, #3
 8003650:	2204      	movs	r2, #4
 8003652:	2103      	movs	r1, #3
 8003654:	9102      	str	r1, [sp, #8]
 8003656:	9201      	str	r2, [sp, #4]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	4623      	mov	r3, r4
 800365c:	4602      	mov	r2, r0
 800365e:	2109      	movs	r1, #9
 8003660:	480c      	ldr	r0, [pc, #48]	@ (8003694 <Timer_11_Pin_Init+0x70>)
 8003662:	f7fe fc87 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800366c:	461a      	mov	r2, r3
 800366e:	2302      	movs	r3, #2
	if(
 8003670:	429a      	cmp	r2, r3
 8003672:	d006      	beq.n	8003682 <Timer_11_Pin_Init+0x5e>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800367a:	461a      	mov	r2, r3
 800367c:	2301      	movs	r3, #1
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d102      	bne.n	8003688 <Timer_11_Pin_Init+0x64>
	)
	{
		NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003682:	201a      	movs	r0, #26
 8003684:	f7fe fd1e 	bl	80020c4 <__NVIC_EnableIRQ>
	}
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bd90      	pop	{r4, r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	40020400 	.word	0x40020400

08003698 <Timer_12_Pin_Init>:

static void Timer_12_Pin_Init(Timer_Config *config)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b087      	sub	sp, #28
 800369c:	af04      	add	r7, sp, #16
 800369e:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 80036a0:	4b25      	ldr	r3, [pc, #148]	@ (8003738 <Timer_12_Pin_Init+0xa0>)
 80036a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a4:	4a24      	ldr	r2, [pc, #144]	@ (8003738 <Timer_12_Pin_Init+0xa0>)
 80036a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036aa:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	7c1b      	ldrb	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d013      	beq.n	80036dc <Timer_12_Pin_Init+0x44>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_12.CH1_PB14)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8a9b      	ldrh	r3, [r3, #20]
 80036b8:	f640 3214 	movw	r2, #2836	@ 0xb14
 80036bc:	4293      	cmp	r3, r2
 80036be:	d10d      	bne.n	80036dc <Timer_12_Pin_Init+0x44>
			GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_12);
 80036c0:	2002      	movs	r0, #2
 80036c2:	2402      	movs	r4, #2
 80036c4:	2303      	movs	r3, #3
 80036c6:	2204      	movs	r2, #4
 80036c8:	2109      	movs	r1, #9
 80036ca:	9102      	str	r1, [sp, #8]
 80036cc:	9201      	str	r2, [sp, #4]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	4623      	mov	r3, r4
 80036d2:	4602      	mov	r2, r0
 80036d4:	210e      	movs	r1, #14
 80036d6:	4819      	ldr	r0, [pc, #100]	@ (800373c <Timer_12_Pin_Init+0xa4>)
 80036d8:	f7fe fc4c 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7d9b      	ldrb	r3, [r3, #22]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <Timer_12_Pin_Init+0x74>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_12.CH2_PB15)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8b5b      	ldrh	r3, [r3, #26]
 80036e8:	f640 3215 	movw	r2, #2837	@ 0xb15
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d10d      	bne.n	800370c <Timer_12_Pin_Init+0x74>
			GPIO_Pin_Init(GPIOB, 15, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_12);
 80036f0:	2002      	movs	r0, #2
 80036f2:	2402      	movs	r4, #2
 80036f4:	2303      	movs	r3, #3
 80036f6:	2204      	movs	r2, #4
 80036f8:	2109      	movs	r1, #9
 80036fa:	9102      	str	r1, [sp, #8]
 80036fc:	9201      	str	r2, [sp, #4]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	4623      	mov	r3, r4
 8003702:	4602      	mov	r2, r0
 8003704:	210f      	movs	r1, #15
 8003706:	480d      	ldr	r0, [pc, #52]	@ (800373c <Timer_12_Pin_Init+0xa4>)
 8003708:	f7fe fc34 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003712:	461a      	mov	r2, r3
 8003714:	2302      	movs	r3, #2
	if(
 8003716:	429a      	cmp	r2, r3
 8003718:	d006      	beq.n	8003728 <Timer_12_Pin_Init+0x90>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003720:	461a      	mov	r2, r3
 8003722:	2301      	movs	r3, #1
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d102      	bne.n	800372e <Timer_12_Pin_Init+0x96>
	)
	{
		NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003728:	202b      	movs	r0, #43	@ 0x2b
 800372a:	f7fe fccb 	bl	80020c4 <__NVIC_EnableIRQ>
	}
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bd90      	pop	{r4, r7, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	40020400 	.word	0x40020400

08003740 <Timer_13_Pin_Init>:

static void Timer_13_Pin_Init(Timer_Config *config)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b087      	sub	sp, #28
 8003744:	af04      	add	r7, sp, #16
 8003746:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 8003748:	4b18      	ldr	r3, [pc, #96]	@ (80037ac <Timer_13_Pin_Init+0x6c>)
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	4a17      	ldr	r2, [pc, #92]	@ (80037ac <Timer_13_Pin_Init+0x6c>)
 800374e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003752:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7c1b      	ldrb	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d012      	beq.n	8003782 <Timer_13_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_13.CH1_PA6)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8a9b      	ldrh	r3, [r3, #20]
 8003760:	22a6      	movs	r2, #166	@ 0xa6
 8003762:	4293      	cmp	r3, r2
 8003764:	d10d      	bne.n	8003782 <Timer_13_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_13);
 8003766:	2002      	movs	r0, #2
 8003768:	2402      	movs	r4, #2
 800376a:	2303      	movs	r3, #3
 800376c:	2204      	movs	r2, #4
 800376e:	2109      	movs	r1, #9
 8003770:	9102      	str	r1, [sp, #8]
 8003772:	9201      	str	r2, [sp, #4]
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	4623      	mov	r3, r4
 8003778:	4602      	mov	r2, r0
 800377a:	2106      	movs	r1, #6
 800377c:	480c      	ldr	r0, [pc, #48]	@ (80037b0 <Timer_13_Pin_Init+0x70>)
 800377e:	f7fe fbf9 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003788:	461a      	mov	r2, r3
 800378a:	2302      	movs	r3, #2
	if(
 800378c:	429a      	cmp	r2, r3
 800378e:	d006      	beq.n	800379e <Timer_13_Pin_Init+0x5e>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003796:	461a      	mov	r2, r3
 8003798:	2301      	movs	r3, #1
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d102      	bne.n	80037a4 <Timer_13_Pin_Init+0x64>
	)
	{
		NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800379e:	202c      	movs	r0, #44	@ 0x2c
 80037a0:	f7fe fc90 	bl	80020c4 <__NVIC_EnableIRQ>
	}
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd90      	pop	{r4, r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	40020000 	.word	0x40020000

080037b4 <Timer_14_Pin_Init>:

static void Timer_14_Pin_Init(Timer_Config *config)
{
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af04      	add	r7, sp, #16
 80037ba:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM14EN;
 80037bc:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <Timer_14_Pin_Init+0x78>)
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	4a1a      	ldr	r2, [pc, #104]	@ (800382c <Timer_14_Pin_Init+0x78>)
 80037c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c6:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7c1b      	ldrb	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d012      	beq.n	80037f6 <Timer_14_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_14.CH1_PA7)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8a9b      	ldrh	r3, [r3, #20]
 80037d4:	22a7      	movs	r2, #167	@ 0xa7
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d10d      	bne.n	80037f6 <Timer_14_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_14);
 80037da:	2002      	movs	r0, #2
 80037dc:	2402      	movs	r4, #2
 80037de:	2303      	movs	r3, #3
 80037e0:	2204      	movs	r2, #4
 80037e2:	2109      	movs	r1, #9
 80037e4:	9102      	str	r1, [sp, #8]
 80037e6:	9201      	str	r2, [sp, #4]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	4623      	mov	r3, r4
 80037ec:	4602      	mov	r2, r0
 80037ee:	2107      	movs	r1, #7
 80037f0:	480f      	ldr	r0, [pc, #60]	@ (8003830 <Timer_14_Pin_Init+0x7c>)
 80037f2:	f7fe fbbf 	bl	8001f74 <GPIO_Pin_Init>
	}

	if(!config->Interrupt_Request)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d110      	bne.n	8003822 <Timer_14_Pin_Init+0x6e>
		if(
				(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003806:	461a      	mov	r2, r3
 8003808:	2302      	movs	r3, #2
		if(
 800380a:	429a      	cmp	r2, r3
 800380c:	d006      	beq.n	800381c <Timer_14_Pin_Init+0x68>
				(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003814:	461a      	mov	r2, r3
 8003816:	2301      	movs	r3, #1
				(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d102      	bne.n	8003822 <Timer_14_Pin_Init+0x6e>
		)
		{
			NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800381c:	202d      	movs	r0, #45	@ 0x2d
 800381e:	f7fe fc51 	bl	80020c4 <__NVIC_EnableIRQ>
		}
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bd90      	pop	{r4, r7, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	40020000 	.word	0x40020000

08003834 <Input_Capture_Mode_Setup>:




static void Input_Capture_Mode_Setup(Timer_Config *config)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	if(config->Channel_1.Type == Timer_Configurations.Channel.Type.Input_Capture_Direct_Mode)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8a5b      	ldrh	r3, [r3, #18]
 8003840:	2201      	movs	r2, #1
 8003842:	4293      	cmp	r3, r2
 8003844:	d160      	bne.n	8003908 <Input_Capture_Mode_Setup+0xd4>
	{
		if(config->Edge == Timer_Configurations.Edge.rising_edge_non_inverted) config -> Port -> CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800384c:	2200      	movs	r2, #0
 800384e:	4293      	cmp	r3, r2
 8003850:	d108      	bne.n	8003864 <Input_Capture_Mode_Setup+0x30>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a1a      	ldr	r2, [r3, #32]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 020a 	bic.w	r2, r2, #10
 8003860:	621a      	str	r2, [r3, #32]
 8003862:	e01c      	b.n	800389e <Input_Capture_Mode_Setup+0x6a>
		else if(config->Edge == Timer_Configurations.Edge.falling_edge_inverted) config -> Port -> CCER |= TIM_CCER_CC1NP;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800386a:	2200      	movs	r2, #0
 800386c:	4293      	cmp	r3, r2
 800386e:	d108      	bne.n	8003882 <Input_Capture_Mode_Setup+0x4e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a1a      	ldr	r2, [r3, #32]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0208 	orr.w	r2, r2, #8
 800387e:	621a      	str	r2, [r3, #32]
 8003880:	e00d      	b.n	800389e <Input_Capture_Mode_Setup+0x6a>
		else if(config->Edge == Timer_Configurations.Edge.both_edges_non_inverted) config -> Port -> CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003888:	2200      	movs	r2, #0
 800388a:	4293      	cmp	r3, r2
 800388c:	d107      	bne.n	800389e <Input_Capture_Mode_Setup+0x6a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a1a      	ldr	r2, [r3, #32]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 020a 	orr.w	r2, r2, #10
 800389c:	621a      	str	r2, [r3, #32]

		if(config -> DMA_Enable == true) config -> Port -> DIER |= TIM_DIER_CC1DE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <Input_Capture_Mode_Setup+0x84>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b6:	60da      	str	r2, [r3, #12]
		if(config -> Interrupt_Request & Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) config -> Port -> DIER |= TIM_DIER_CC1IE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80038be:	461a      	mov	r2, r3
 80038c0:	2302      	movs	r3, #2
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <Input_Capture_Mode_Setup+0xa4>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0202 	orr.w	r2, r2, #2
 80038d6:	60da      	str	r2, [r3, #12]

		config -> Port -> CCMR1 |= TIM_CCMR1_CC1S_0;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	619a      	str	r2, [r3, #24]
		config -> Port -> CCMR1 &= ~TIM_CCMR1_CC1S_1;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0202 	bic.w	r2, r2, #2
 80038f6:	619a      	str	r2, [r3, #24]
		config -> Port -> CCER |= TIM_CCER_CC1E;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6a1a      	ldr	r2, [r3, #32]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	621a      	str	r2, [r3, #32]

	}
	if(config->Channel_2.Type == Timer_Configurations.Channel.Type.Input_Capture_Direct_Mode)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8b1b      	ldrh	r3, [r3, #24]
 800390c:	2201      	movs	r2, #1
 800390e:	4293      	cmp	r3, r2
 8003910:	d160      	bne.n	80039d4 <Input_Capture_Mode_Setup+0x1a0>
	{
		if(config->Edge == Timer_Configurations.Edge.rising_edge_non_inverted) config -> Port -> CCER &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003918:	2200      	movs	r2, #0
 800391a:	4293      	cmp	r3, r2
 800391c:	d108      	bne.n	8003930 <Input_Capture_Mode_Setup+0xfc>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a1a      	ldr	r2, [r3, #32]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800392c:	621a      	str	r2, [r3, #32]
 800392e:	e01c      	b.n	800396a <Input_Capture_Mode_Setup+0x136>
		else if(config->Edge == Timer_Configurations.Edge.falling_edge_inverted) config -> Port -> CCER |= TIM_CCER_CC2NP;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003936:	2200      	movs	r2, #0
 8003938:	4293      	cmp	r3, r2
 800393a:	d108      	bne.n	800394e <Input_Capture_Mode_Setup+0x11a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6a1a      	ldr	r2, [r3, #32]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800394a:	621a      	str	r2, [r3, #32]
 800394c:	e00d      	b.n	800396a <Input_Capture_Mode_Setup+0x136>
		else if(config->Edge == Timer_Configurations.Edge.both_edges_non_inverted) config -> Port -> CCER |= (TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003954:	2200      	movs	r2, #0
 8003956:	4293      	cmp	r3, r2
 8003958:	d107      	bne.n	800396a <Input_Capture_Mode_Setup+0x136>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6a1a      	ldr	r2, [r3, #32]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8003968:	621a      	str	r2, [r3, #32]

		if(config -> DMA_Enable == true) config -> Port -> DIER |= TIM_DIER_CC2DE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <Input_Capture_Mode_Setup+0x150>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003982:	60da      	str	r2, [r3, #12]
		if(config -> Interrupt_Request & Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) config -> Port -> DIER |= TIM_DIER_CC2IE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800398a:	461a      	mov	r2, r3
 800398c:	2304      	movs	r3, #4
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <Input_Capture_Mode_Setup+0x170>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0204 	orr.w	r2, r2, #4
 80039a2:	60da      	str	r2, [r3, #12]

		config -> Port -> CCMR1 |= TIM_CCMR1_CC2S_0;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039b2:	619a      	str	r2, [r3, #24]
		config -> Port -> CCMR1 &= ~TIM_CCMR1_CC2S_1;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039c2:	619a      	str	r2, [r3, #24]
		config -> Port -> CCER |= TIM_CCER_CC2E;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a1a      	ldr	r2, [r3, #32]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0210 	orr.w	r2, r2, #16
 80039d2:	621a      	str	r2, [r3, #32]
	}
	if(config->Channel_3.Type == Timer_Configurations.Channel.Type.Input_Capture_Direct_Mode)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8bdb      	ldrh	r3, [r3, #30]
 80039d8:	2201      	movs	r2, #1
 80039da:	4293      	cmp	r3, r2
 80039dc:	d160      	bne.n	8003aa0 <Input_Capture_Mode_Setup+0x26c>
	{
		if(config->Edge == Timer_Configurations.Edge.rising_edge_non_inverted) config -> Port -> CCER &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80039e4:	2200      	movs	r2, #0
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d108      	bne.n	80039fc <Input_Capture_Mode_Setup+0x1c8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a1a      	ldr	r2, [r3, #32]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 80039f8:	621a      	str	r2, [r3, #32]
 80039fa:	e01c      	b.n	8003a36 <Input_Capture_Mode_Setup+0x202>
		else if(config->Edge == Timer_Configurations.Edge.falling_edge_inverted) config -> Port -> CCER |= TIM_CCER_CC3NP;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003a02:	2200      	movs	r2, #0
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d108      	bne.n	8003a1a <Input_Capture_Mode_Setup+0x1e6>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a16:	621a      	str	r2, [r3, #32]
 8003a18:	e00d      	b.n	8003a36 <Input_Capture_Mode_Setup+0x202>
		else if(config->Edge == Timer_Configurations.Edge.both_edges_non_inverted) config -> Port -> CCER |= (TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003a20:	2200      	movs	r2, #0
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d107      	bne.n	8003a36 <Input_Capture_Mode_Setup+0x202>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a1a      	ldr	r2, [r3, #32]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 6220 	orr.w	r2, r2, #2560	@ 0xa00
 8003a34:	621a      	str	r2, [r3, #32]

		if(config -> DMA_Enable == true) config -> Port -> DIER |= TIM_DIER_CC3DE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <Input_Capture_Mode_Setup+0x21c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a4e:	60da      	str	r2, [r3, #12]
		if(config -> Interrupt_Request & Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) config -> Port -> DIER |= TIM_DIER_CC3IE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003a56:	461a      	mov	r2, r3
 8003a58:	2308      	movs	r3, #8
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <Input_Capture_Mode_Setup+0x23c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0208 	orr.w	r2, r2, #8
 8003a6e:	60da      	str	r2, [r3, #12]

		config -> Port -> CCMR2 |= TIM_CCMR2_CC3S_0;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	61da      	str	r2, [r3, #28]
		config -> Port -> CCMR2 &= ~TIM_CCMR2_CC3S_1;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0202 	bic.w	r2, r2, #2
 8003a8e:	61da      	str	r2, [r3, #28]
		config -> Port -> CCER |= TIM_CCER_CC3E;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6a1a      	ldr	r2, [r3, #32]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a9e:	621a      	str	r2, [r3, #32]
	}
	if(config->Channel_4.Type == Timer_Configurations.Channel.Type.Input_Capture_Direct_Mode)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d160      	bne.n	8003b6c <Input_Capture_Mode_Setup+0x338>
	{
		if(config->Edge == Timer_Configurations.Edge.rising_edge_non_inverted) config -> Port -> CCER &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d108      	bne.n	8003ac8 <Input_Capture_Mode_Setup+0x294>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a1a      	ldr	r2, [r3, #32]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8003ac4:	621a      	str	r2, [r3, #32]
 8003ac6:	e01c      	b.n	8003b02 <Input_Capture_Mode_Setup+0x2ce>
		else if(config->Edge == Timer_Configurations.Edge.falling_edge_inverted) config -> Port -> CCER |= TIM_CCER_CC4NP;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003ace:	2200      	movs	r2, #0
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d108      	bne.n	8003ae6 <Input_Capture_Mode_Setup+0x2b2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a1a      	ldr	r2, [r3, #32]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ae2:	621a      	str	r2, [r3, #32]
 8003ae4:	e00d      	b.n	8003b02 <Input_Capture_Mode_Setup+0x2ce>
		else if(config->Edge == Timer_Configurations.Edge.both_edges_non_inverted) config -> Port -> CCER |= (TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003aec:	2200      	movs	r2, #0
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d107      	bne.n	8003b02 <Input_Capture_Mode_Setup+0x2ce>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6a1a      	ldr	r2, [r3, #32]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 4220 	orr.w	r2, r2, #40960	@ 0xa000
 8003b00:	621a      	str	r2, [r3, #32]

		if(config -> DMA_Enable == true) config -> Port -> DIER |= TIM_DIER_CC4DE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <Input_Capture_Mode_Setup+0x2e8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b1a:	60da      	str	r2, [r3, #12]
		if(config -> Interrupt_Request & Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) config -> Port -> DIER |= TIM_DIER_CC4IE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003b22:	461a      	mov	r2, r3
 8003b24:	2310      	movs	r3, #16
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <Input_Capture_Mode_Setup+0x308>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0210 	orr.w	r2, r2, #16
 8003b3a:	60da      	str	r2, [r3, #12]

		config -> Port -> CCMR2 |= TIM_CCMR2_CC4S_0;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b4a:	61da      	str	r2, [r3, #28]
		config -> Port -> CCMR2 &= ~TIM_CCMR2_CC4S_1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b5a:	61da      	str	r2, [r3, #28]
		config -> Port -> CCER |= TIM_CCER_CC4E;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b6a:	621a      	str	r2, [r3, #32]
	}
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <PWM_Input_Mode_Setup>:

static void PWM_Input_Mode_Setup(Timer_Config *config)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	if(config -> Combined_Channel == Timer_Configurations.Combined_Channel.PWM_Input_Channel_1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b86:	2202      	movs	r2, #2
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d14d      	bne.n	8003c28 <PWM_Input_Mode_Setup+0xb0>
	{
		config -> Port -> PSC=0;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2200      	movs	r2, #0
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28
		config -> Port -> ARR=0xFFFFFFFF;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
		config -> Port -> CNT=0;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	625a      	str	r2, [r3, #36]	@ 0x24

		config -> Port -> CCMR1|=TIM_CCMR1_CC1S_0;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0201 	orr.w	r2, r2, #1
 8003bb4:	619a      	str	r2, [r3, #24]

		config -> Port -> CCER&=~(TIM_CCER_CC1P|TIM_CCER_CC1NP);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 020a 	bic.w	r2, r2, #10
 8003bc4:	621a      	str	r2, [r3, #32]

		config -> Port -> CCMR1|=TIM_CCMR1_CC2S_1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd4:	619a      	str	r2, [r3, #24]

		config -> Port -> CCER|=TIM_CCER_CC2P;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a1a      	ldr	r2, [r3, #32]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0220 	orr.w	r2, r2, #32
 8003be4:	621a      	str	r2, [r3, #32]

		config -> Port -> CCER&=~TIM_CCER_CC2NP;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bf4:	621a      	str	r2, [r3, #32]

		config -> Port -> SMCR|=TIM_SMCR_TS_2|TIM_SMCR_TS_0;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8003c04:	609a      	str	r2, [r3, #8]

		config -> Port -> SMCR|=TIM_SMCR_SMS_2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0204 	orr.w	r2, r2, #4
 8003c14:	609a      	str	r2, [r3, #8]

		config -> Port -> CCER|=TIM_CCER_CC1E|TIM_CCER_CC2E;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0211 	orr.w	r2, r2, #17
 8003c24:	621a      	str	r2, [r3, #32]

		config -> Port -> SMCR|=TIM_SMCR_SMS_2;

		config -> Port -> CCER|=TIM_CCER_CC3E|TIM_CCER_CC4E;
	}
}
 8003c26:	e052      	b.n	8003cce <PWM_Input_Mode_Setup+0x156>
	else if(config -> Combined_Channel == Timer_Configurations.Combined_Channel.PWM_Input_Channel_2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c2e:	2204      	movs	r2, #4
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d14c      	bne.n	8003cce <PWM_Input_Mode_Setup+0x156>
		config -> Port -> PSC=0;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	629a      	str	r2, [r3, #40]	@ 0x28
		config -> Port -> ARR=0xFFFFFFFF;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295
 8003c44:	62da      	str	r2, [r3, #44]	@ 0x2c
		config -> Port -> CNT=0;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24
		config -> Port -> CCMR2|=TIM_CCMR2_CC3S_0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	61da      	str	r2, [r3, #28]
		config -> Port -> CCER&=~(TIM_CCER_CC3P|TIM_CCER_CC3NP);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6a1a      	ldr	r2, [r3, #32]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8003c6c:	621a      	str	r2, [r3, #32]
		config -> Port -> CCMR2|=TIM_CCMR2_CC4S_1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7c:	61da      	str	r2, [r3, #28]
		config -> Port -> CCER|=TIM_CCER_CC4P;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c8c:	621a      	str	r2, [r3, #32]
		config -> Port -> CCER&=~TIM_CCER_CC4NP;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c9c:	621a      	str	r2, [r3, #32]
		config -> Port -> SMCR|=TIM_SMCR_TS_2|TIM_SMCR_TS_0;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8003cac:	609a      	str	r2, [r3, #8]
		config -> Port -> SMCR|=TIM_SMCR_SMS_2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0204 	orr.w	r2, r2, #4
 8003cbc:	609a      	str	r2, [r3, #8]
		config -> Port -> CCER|=TIM_CCER_CC3E|TIM_CCER_CC4E;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <Encoder_Mode_Setup>:



static void Encoder_Mode_Setup(Timer_Config *config)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
	//	config -> Port -> CCMR1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F); // Clear IC1F and IC2F bits
	////	config -> Port -> CCMR1 |= (TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC2F_3); // Set filter to 8 samples, N=8
	//	config -> Port -> CCMR1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC); // Clear IC1PSC and IC2PSC bits
	//	config -> Port -> CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P); // Clear CC1P and CC2P bits (rising edge)
	//
	config -> Port -> SMCR = 0x0000;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]
	config -> Port -> CR2 = 0x0000;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
	config -> Port->CCMR1 = 0x0000;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	619a      	str	r2, [r3, #24]

	config -> Port->SMCR &= ~TIM_SMCR_SMS;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0207 	bic.w	r2, r2, #7
 8003d08:	609a      	str	r2, [r3, #8]
	config -> Port->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0203 	orr.w	r2, r2, #3
 8003d18:	609a      	str	r2, [r3, #8]
	config -> Port -> CCMR1 |= (TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC2F_3);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2c:	6193      	str	r3, [r2, #24]
	// Set TIM2 Channels to input
	config -> Port->CCMR1 &= ~((3U << TIM_CCMR1_CC1S_Pos) | (3U << TIM_CCMR1_CC2S_Pos));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d3c:	f023 0303 	bic.w	r3, r3, #3
 8003d40:	6193      	str	r3, [r2, #24]
	config -> Port->CCMR1 |= (1U << TIM_CCMR1_CC1S_Pos) | (1U << TIM_CCMR1_CC2S_Pos);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6193      	str	r3, [r2, #24]

	// Configure polarity (if necessary)
	config -> Port->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6a1a      	ldr	r2, [r3, #32]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8003d64:	621a      	str	r2, [r3, #32]
	config -> Port -> ARR = config->Encoder_Resolution - 1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3a01      	subs	r2, #1
 8003d72:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <XOR_Mode_Setup>:

static void XOR_Mode_Setup(Timer_Config *config)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	config -> Port -> CR2 |= TIM_CR2_TI1S;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d96:	605a      	str	r2, [r3, #4]
	config -> Port -> SMCR &= ~TIM_SMCR_TS;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003da6:	609a      	str	r2, [r3, #8]
	config -> Port -> SMCR |= TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_TS_0;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8003db6:	609a      	str	r2, [r3, #8]
	config -> Port -> SMCR &= ~TIM_SMCR_SMS;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0207 	bic.w	r2, r2, #7
 8003dc6:	609a      	str	r2, [r3, #8]
	config -> Port -> SMCR |= TIM_SMCR_SMS_2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0204 	orr.w	r2, r2, #4
 8003dd6:	609a      	str	r2, [r3, #8]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <PWM_Mode_Setup>:

static void PWM_Mode_Setup(Timer_Config *config)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

	if((config -> Channel_1.Enable == true))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	7c1b      	ldrb	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d055      	beq.n	8003ea0 <PWM_Mode_Setup+0xbc>
	{

		if((config -> Channel_1.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP) || (config -> Channel_1.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8a5b      	ldrh	r3, [r3, #18]
 8003df8:	2240      	movs	r2, #64	@ 0x40
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d005      	beq.n	8003e0a <PWM_Mode_Setup+0x26>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8a5b      	ldrh	r3, [r3, #18]
 8003e02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d11f      	bne.n	8003e4a <PWM_Mode_Setup+0x66>
		{
			config -> Port -> CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003e18:	619a      	str	r2, [r3, #24]
			config -> Port -> CCMR1 |= TIM_CCMR1_OC1PE ; // Enable preload for output compare
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699a      	ldr	r2, [r3, #24]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0208 	orr.w	r2, r2, #8
 8003e28:	619a      	str	r2, [r3, #24]
			config -> Port -> CCER |= TIM_CCER_CC1E ;  // Enable CH1 and CH2 outputs
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6a1a      	ldr	r2, [r3, #32]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e48:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		if((config -> Channel_1.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHN) || (config -> Channel_1.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8a5b      	ldrh	r3, [r3, #18]
 8003e4e:	2280      	movs	r2, #128	@ 0x80
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d005      	beq.n	8003e60 <PWM_Mode_Setup+0x7c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8a5b      	ldrh	r3, [r3, #18]
 8003e58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d11f      	bne.n	8003ea0 <PWM_Mode_Setup+0xbc>
		{
			config -> Port -> CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003e6e:	619a      	str	r2, [r3, #24]
			config -> Port -> CCMR1 |= TIM_CCMR1_OC1PE ; // Enable preload for output compare
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0208 	orr.w	r2, r2, #8
 8003e7e:	619a      	str	r2, [r3, #24]
			config -> Port -> CCER |= TIM_CCER_CC1NE ;  // Enable CH1 and CH2 outputs
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6a1a      	ldr	r2, [r3, #32]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0204 	orr.w	r2, r2, #4
 8003e8e:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e9e:	645a      	str	r2, [r3, #68]	@ 0x44
		}

	}
	if((config -> Channel_2.Enable == true))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7d9b      	ldrb	r3, [r3, #22]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d055      	beq.n	8003f54 <PWM_Mode_Setup+0x170>
	{
		if((config -> Channel_2.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP) || (config -> Channel_2.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8b1b      	ldrh	r3, [r3, #24]
 8003eac:	2240      	movs	r2, #64	@ 0x40
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d005      	beq.n	8003ebe <PWM_Mode_Setup+0xda>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8b1b      	ldrh	r3, [r3, #24]
 8003eb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d11f      	bne.n	8003efe <PWM_Mode_Setup+0x11a>
		{
			config -> Port -> CCMR1 |= (6 << TIM_CCMR1_OC2M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8003ecc:	619a      	str	r2, [r3, #24]
			config -> Port -> CCMR1 |= TIM_CCMR1_OC2PE ; // Enable preload for output compare
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003edc:	619a      	str	r2, [r3, #24]
			config -> Port -> CCER |= TIM_CCER_CC2E ;  // Enable CH1 and CH2 outputs
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6a1a      	ldr	r2, [r3, #32]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0210 	orr.w	r2, r2, #16
 8003eec:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003efc:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		if((config -> Channel_2.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHN) || (config -> Channel_2.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8b1b      	ldrh	r3, [r3, #24]
 8003f02:	2280      	movs	r2, #128	@ 0x80
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d005      	beq.n	8003f14 <PWM_Mode_Setup+0x130>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8b1b      	ldrh	r3, [r3, #24]
 8003f0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d11f      	bne.n	8003f54 <PWM_Mode_Setup+0x170>
		{
			config -> Port -> CCMR1 |= (6 << TIM_CCMR1_OC2M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8003f22:	619a      	str	r2, [r3, #24]
			config -> Port -> CCMR1 |= TIM_CCMR1_OC2PE ; // Enable preload for output compare
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f32:	619a      	str	r2, [r3, #24]
			config -> Port -> CCER |= TIM_CCER_CC2NE ;  // Enable CH1 and CH2 outputs
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f42:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}
	if((config -> Channel_3.Enable == true))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7f1b      	ldrb	r3, [r3, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d055      	beq.n	8004008 <PWM_Mode_Setup+0x224>
	{
		if((config -> Channel_3.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP) || (config -> Channel_3.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8bdb      	ldrh	r3, [r3, #30]
 8003f60:	2240      	movs	r2, #64	@ 0x40
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d005      	beq.n	8003f72 <PWM_Mode_Setup+0x18e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8bdb      	ldrh	r3, [r3, #30]
 8003f6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d11f      	bne.n	8003fb2 <PWM_Mode_Setup+0x1ce>
		{
			config -> Port -> CCMR2 |= (6 << TIM_CCMR2_OC3M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003f80:	61da      	str	r2, [r3, #28]
			config -> Port -> CCMR2 |= TIM_CCMR2_OC3PE ; // Enable preload for output compare
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0208 	orr.w	r2, r2, #8
 8003f90:	61da      	str	r2, [r3, #28]
			config -> Port -> CCER |= TIM_CCER_CC3E ;  // Enable CH1 and CH2 outputs
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fa0:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fb0:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		if((config -> Channel_3.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHN) || (config -> Channel_3.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8bdb      	ldrh	r3, [r3, #30]
 8003fb6:	2280      	movs	r2, #128	@ 0x80
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d005      	beq.n	8003fc8 <PWM_Mode_Setup+0x1e4>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8bdb      	ldrh	r3, [r3, #30]
 8003fc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d11f      	bne.n	8004008 <PWM_Mode_Setup+0x224>
		{
			config -> Port -> CCMR2 |= (6 << TIM_CCMR2_OC3M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003fd6:	61da      	str	r2, [r3, #28]
			config -> Port -> CCMR2 |= TIM_CCMR2_OC4PE ; // Enable preload for output compare
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fe6:	61da      	str	r2, [r3, #28]
			config -> Port -> CCER |= TIM_CCER_CC3NE ;  // Enable CH1 and CH2 outputs
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ff6:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}
	if((config -> Channel_4.Enable == true))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800400e:	2b00      	cmp	r3, #0
 8004010:	d02f      	beq.n	8004072 <PWM_Mode_Setup+0x28e>
	{
		if((config -> Channel_4.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP) || (config -> Channel_4.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN) || (config -> Channel_4.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHN))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004016:	2240      	movs	r2, #64	@ 0x40
 8004018:	4293      	cmp	r3, r2
 800401a:	d00a      	beq.n	8004032 <PWM_Mode_Setup+0x24e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <PWM_Mode_Setup+0x24e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800402c:	2280      	movs	r2, #128	@ 0x80
 800402e:	4293      	cmp	r3, r2
 8004030:	d11f      	bne.n	8004072 <PWM_Mode_Setup+0x28e>
		{
			config -> Port -> CCMR2 |= (6 << TIM_CCMR2_OC4M_Pos) ; // PWM mode 1 for CH1 and CH2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8004040:	61da      	str	r2, [r3, #28]
			config -> Port -> CCMR2 |= TIM_CCMR2_OC4PE ; // Enable preload for output compare
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004050:	61da      	str	r2, [r3, #28]
			config -> Port -> CCER |= TIM_CCER_CC4E ;  // Enable CH1 and CH2 outputs
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004060:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <Timer_Update>:

static void Timer_Update(Timer_Config *config)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
	config -> Port -> ARR = config -> Autoreload_Value;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	89da      	ldrh	r2, [r3, #14]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	62da      	str	r2, [r3, #44]	@ 0x2c
	config -> Port -> PSC = config -> Prescaler;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	899a      	ldrh	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	629a      	str	r2, [r3, #40]	@ 0x28

	config -> Port -> EGR |= TIM_EGR_UG;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	615a      	str	r2, [r3, #20]
	config -> Port -> CR1 |= TIM_CR1_URS;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0204 	orr.w	r2, r2, #4
 80040b8:	601a      	str	r2, [r3, #0]
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <Timer_Init>:

void Timer_Init(Timer_Config *config)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

	if(config -> Port == TIM1) Timer_1_Pin_Init(config);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004290 <Timer_Init+0x1c8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d103      	bne.n	80040e2 <Timer_Init+0x1a>
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fe fc82 	bl	80029e4 <Timer_1_Pin_Init>
 80040e0:	e093      	b.n	800420a <Timer_Init+0x142>
	else if(config -> Port == TIM2) Timer_2_Pin_Init(config);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ea:	d103      	bne.n	80040f4 <Timer_Init+0x2c>
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7fe fd7f 	bl	8002bf0 <Timer_2_Pin_Init>
 80040f2:	e08a      	b.n	800420a <Timer_Init+0x142>
	else if(config -> Port == TIM3) Timer_3_Pin_Init(config);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a66      	ldr	r2, [pc, #408]	@ (8004294 <Timer_Init+0x1cc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d103      	bne.n	8004106 <Timer_Init+0x3e>
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fe fe80 	bl	8002e04 <Timer_3_Pin_Init>
 8004104:	e081      	b.n	800420a <Timer_Init+0x142>
	else if(config -> Port == TIM4) Timer_4_Pin_Init(config);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a63      	ldr	r2, [pc, #396]	@ (8004298 <Timer_Init+0x1d0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d103      	bne.n	8004118 <Timer_Init+0x50>
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7fe ff8f 	bl	8003034 <Timer_4_Pin_Init>
 8004116:	e078      	b.n	800420a <Timer_Init+0x142>
	else if(config -> Port == TIM5) Timer_5_Pin_Init(config);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a5f      	ldr	r2, [pc, #380]	@ (800429c <Timer_Init+0x1d4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d103      	bne.n	800412a <Timer_Init+0x62>
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff f878 	bl	8003218 <Timer_5_Pin_Init>
 8004128:	e06f      	b.n	800420a <Timer_Init+0x142>
	else if(config -> Port == TIM6)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a5c      	ldr	r2, [pc, #368]	@ (80042a0 <Timer_Init+0x1d8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d113      	bne.n	800415c <Timer_Init+0x94>
	{
		__timer_6_config__ = config;
 8004134:	4a5b      	ldr	r2, [pc, #364]	@ (80042a4 <Timer_Init+0x1dc>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6013      	str	r3, [r2, #0]
		RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 800413a:	4b5b      	ldr	r3, [pc, #364]	@ (80042a8 <Timer_Init+0x1e0>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	4a5a      	ldr	r2, [pc, #360]	@ (80042a8 <Timer_Init+0x1e0>)
 8004140:	f043 0310 	orr.w	r3, r3, #16
 8004144:	6413      	str	r3, [r2, #64]	@ 0x40
		if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800414c:	461a      	mov	r2, r3
 800414e:	2301      	movs	r3, #1
 8004150:	429a      	cmp	r2, r3
 8004152:	d15a      	bne.n	800420a <Timer_Init+0x142>
		{
			NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004154:	2036      	movs	r0, #54	@ 0x36
 8004156:	f7fd ffb5 	bl	80020c4 <__NVIC_EnableIRQ>
 800415a:	e056      	b.n	800420a <Timer_Init+0x142>
		}
	}
	else if(config -> Port == TIM7)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a52      	ldr	r2, [pc, #328]	@ (80042ac <Timer_Init+0x1e4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d113      	bne.n	800418e <Timer_Init+0xc6>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 8004166:	4b50      	ldr	r3, [pc, #320]	@ (80042a8 <Timer_Init+0x1e0>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	4a4f      	ldr	r2, [pc, #316]	@ (80042a8 <Timer_Init+0x1e0>)
 800416c:	f043 0320 	orr.w	r3, r3, #32
 8004170:	6413      	str	r3, [r2, #64]	@ 0x40
		__timer_7_config__ = config;
 8004172:	4a4f      	ldr	r2, [pc, #316]	@ (80042b0 <Timer_Init+0x1e8>)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6013      	str	r3, [r2, #0]
		if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800417e:	461a      	mov	r2, r3
 8004180:	2301      	movs	r3, #1
 8004182:	429a      	cmp	r2, r3
 8004184:	d141      	bne.n	800420a <Timer_Init+0x142>
		{
			NVIC_EnableIRQ(TIM7_IRQn);
 8004186:	2037      	movs	r0, #55	@ 0x37
 8004188:	f7fd ff9c 	bl	80020c4 <__NVIC_EnableIRQ>
 800418c:	e03d      	b.n	800420a <Timer_Init+0x142>
		}
	}
	else if(config -> Port == TIM8) Timer_8_Pin_Init(config);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a48      	ldr	r2, [pc, #288]	@ (80042b4 <Timer_Init+0x1ec>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d103      	bne.n	80041a0 <Timer_Init+0xd8>
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff f8db 	bl	8003354 <Timer_8_Pin_Init>
 800419e:	e034      	b.n	800420a <Timer_Init+0x142>
	else if(config -> Port == TIM9) Timer_9_Pin_Init(config);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a44      	ldr	r2, [pc, #272]	@ (80042b8 <Timer_Init+0x1f0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d103      	bne.n	80041b2 <Timer_Init+0xea>
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff f982 	bl	80034b4 <Timer_9_Pin_Init>
 80041b0:	e02b      	b.n	800420a <Timer_Init+0x142>
	else if(config -> Port == TIM10) Timer_10_Pin_Init(config);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a41      	ldr	r2, [pc, #260]	@ (80042bc <Timer_Init+0x1f4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d103      	bne.n	80041c4 <Timer_Init+0xfc>
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff f9f7 	bl	80035b0 <Timer_10_Pin_Init>
 80041c2:	e022      	b.n	800420a <Timer_Init+0x142>
	else if(config -> Port == TIM11) Timer_11_Pin_Init(config);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a3d      	ldr	r2, [pc, #244]	@ (80042c0 <Timer_Init+0x1f8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d103      	bne.n	80041d6 <Timer_Init+0x10e>
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff fa28 	bl	8003624 <Timer_11_Pin_Init>
 80041d4:	e019      	b.n	800420a <Timer_Init+0x142>
	else if(config -> Port == TIM12) Timer_12_Pin_Init(config);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a3a      	ldr	r2, [pc, #232]	@ (80042c4 <Timer_Init+0x1fc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d103      	bne.n	80041e8 <Timer_Init+0x120>
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff fa59 	bl	8003698 <Timer_12_Pin_Init>
 80041e6:	e010      	b.n	800420a <Timer_Init+0x142>
	else if(config -> Port == TIM13) Timer_13_Pin_Init(config);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a36      	ldr	r2, [pc, #216]	@ (80042c8 <Timer_Init+0x200>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d103      	bne.n	80041fa <Timer_Init+0x132>
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff faa4 	bl	8003740 <Timer_13_Pin_Init>
 80041f8:	e007      	b.n	800420a <Timer_Init+0x142>
	else if(config -> Port == TIM14) Timer_14_Pin_Init(config);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a33      	ldr	r2, [pc, #204]	@ (80042cc <Timer_Init+0x204>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d102      	bne.n	800420a <Timer_Init+0x142>
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fad5 	bl	80037b4 <Timer_14_Pin_Init>

	config -> Port -> DIER |= config -> Interrupt_Request;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8004216:	4619      	mov	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	60da      	str	r2, [r3, #12]

	//uint16_t Input_Capture_Direct_Mode;
	Input_Capture_Mode_Setup(config);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff fb07 	bl	8003834 <Input_Capture_Mode_Setup>
	PWM_Mode_Setup(config);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fddc 	bl	8003de4 <PWM_Mode_Setup>

	if(config -> Mode == Timer_Configurations.Mode.Update)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	791b      	ldrb	r3, [r3, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	4293      	cmp	r3, r2
 8004234:	d102      	bne.n	800423c <Timer_Init+0x174>
	{
		Timer_Update(config);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ff21 	bl	800407e <Timer_Update>
	}

	if(config -> Combined_Channel == Timer_Configurations.Combined_Channel.Encoder)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004242:	2201      	movs	r2, #1
 8004244:	4293      	cmp	r3, r2
 8004246:	d102      	bne.n	800424e <Timer_Init+0x186>
	{
		Encoder_Mode_Setup(config);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff fd46 	bl	8003cda <Encoder_Mode_Setup>
	}

	if(config -> Combined_Channel == Timer_Configurations.Combined_Channel.PWM_Input_Channel_1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004254:	2202      	movs	r2, #2
 8004256:	4293      	cmp	r3, r2
 8004258:	d102      	bne.n	8004260 <Timer_Init+0x198>
	{
		PWM_Input_Mode_Setup(config);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fc8c 	bl	8003b78 <PWM_Input_Mode_Setup>
	}

	if(config -> Combined_Channel == Timer_Configurations.Combined_Channel.XOR_Hall_Sensor)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004266:	2208      	movs	r2, #8
 8004268:	4293      	cmp	r3, r2
 800426a:	d102      	bne.n	8004272 <Timer_Init+0x1aa>
	{

		XOR_Mode_Setup(config);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff fd87 	bl	8003d80 <XOR_Mode_Setup>
	}

	if(config -> DMA_Enable) DMA_Init(&config->DMA_Timer);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <Timer_Init+0x1be>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3330      	adds	r3, #48	@ 0x30
 8004280:	4618      	mov	r0, r3
 8004282:	f7fd fb39 	bl	80018f8 <DMA_Init>
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40010000 	.word	0x40010000
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40001000 	.word	0x40001000
 80042a4:	200000bc 	.word	0x200000bc
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40001400 	.word	0x40001400
 80042b0:	200000c0 	.word	0x200000c0
 80042b4:	40010400 	.word	0x40010400
 80042b8:	40014000 	.word	0x40014000
 80042bc:	40014400 	.word	0x40014400
 80042c0:	40014800 	.word	0x40014800
 80042c4:	40001800 	.word	0x40001800
 80042c8:	40001c00 	.word	0x40001c00
 80042cc:	40002000 	.word	0x40002000

080042d0 <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 80042d4:	4b57      	ldr	r3, [pc, #348]	@ (8004434 <UART4_IRQHandler+0x164>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	4b57      	ldr	r3, [pc, #348]	@ (8004438 <UART4_IRQHandler+0x168>)
 80042dc:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 80042de:	4b56      	ldr	r3, [pc, #344]	@ (8004438 <UART4_IRQHandler+0x168>)
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d010      	beq.n	800430e <UART4_IRQHandler+0x3e>
	{
	    if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 80042ec:	4b53      	ldr	r3, [pc, #332]	@ (800443c <UART4_IRQHandler+0x16c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <UART4_IRQHandler+0x3e>
	    	__usart_4_config__ ->ISR_Routines.CTS_ISR();
 80042f8:	4b50      	ldr	r3, [pc, #320]	@ (800443c <UART4_IRQHandler+0x16c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004300:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 8004302:	4b4c      	ldr	r3, [pc, #304]	@ (8004434 <UART4_IRQHandler+0x164>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a4b      	ldr	r2, [pc, #300]	@ (8004434 <UART4_IRQHandler+0x164>)
 8004308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800430c:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 800430e:	4b4a      	ldr	r3, [pc, #296]	@ (8004438 <UART4_IRQHandler+0x168>)
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d010      	beq.n	800433e <UART4_IRQHandler+0x6e>
	{
	    if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 800431c:	4b47      	ldr	r3, [pc, #284]	@ (800443c <UART4_IRQHandler+0x16c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <UART4_IRQHandler+0x6e>
	    	__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8004328:	4b44      	ldr	r3, [pc, #272]	@ (800443c <UART4_IRQHandler+0x16c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004330:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8004332:	4b40      	ldr	r3, [pc, #256]	@ (8004434 <UART4_IRQHandler+0x164>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a3f      	ldr	r2, [pc, #252]	@ (8004434 <UART4_IRQHandler+0x164>)
 8004338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800433c:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 800433e:	4b3e      	ldr	r3, [pc, #248]	@ (8004438 <UART4_IRQHandler+0x168>)
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004348:	2b00      	cmp	r3, #0
 800434a:	d010      	beq.n	800436e <UART4_IRQHandler+0x9e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 800434c:	4b3b      	ldr	r3, [pc, #236]	@ (800443c <UART4_IRQHandler+0x16c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <UART4_IRQHandler+0x9e>
	    	__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8004358:	4b38      	ldr	r3, [pc, #224]	@ (800443c <UART4_IRQHandler+0x16c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004360:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 8004362:	4b34      	ldr	r3, [pc, #208]	@ (8004434 <UART4_IRQHandler+0x164>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a33      	ldr	r2, [pc, #204]	@ (8004434 <UART4_IRQHandler+0x164>)
 8004368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800436c:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 800436e:	4b32      	ldr	r3, [pc, #200]	@ (8004438 <UART4_IRQHandler+0x168>)
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <UART4_IRQHandler+0xce>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 800437c:	4b2f      	ldr	r3, [pc, #188]	@ (800443c <UART4_IRQHandler+0x16c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <UART4_IRQHandler+0xce>
	    	__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8004388:	4b2c      	ldr	r3, [pc, #176]	@ (800443c <UART4_IRQHandler+0x16c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004390:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8004392:	4b28      	ldr	r3, [pc, #160]	@ (8004434 <UART4_IRQHandler+0x164>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a27      	ldr	r2, [pc, #156]	@ (8004434 <UART4_IRQHandler+0x164>)
 8004398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800439c:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 800439e:	4b26      	ldr	r3, [pc, #152]	@ (8004438 <UART4_IRQHandler+0x168>)
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <UART4_IRQHandler+0xfe>
	{
	    if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 80043ac:	4b23      	ldr	r3, [pc, #140]	@ (800443c <UART4_IRQHandler+0x16c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <UART4_IRQHandler+0xfe>
	    	__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 80043b8:	4b20      	ldr	r3, [pc, #128]	@ (800443c <UART4_IRQHandler+0x16c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80043c0:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80043c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004434 <UART4_IRQHandler+0x164>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004434 <UART4_IRQHandler+0x164>)
 80043c8:	f023 0320 	bic.w	r3, r3, #32
 80043cc:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 80043ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <UART4_IRQHandler+0x168>)
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <UART4_IRQHandler+0x12e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 80043dc:	4b17      	ldr	r3, [pc, #92]	@ (800443c <UART4_IRQHandler+0x16c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <UART4_IRQHandler+0x12e>
	    	__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 80043e8:	4b14      	ldr	r3, [pc, #80]	@ (800443c <UART4_IRQHandler+0x16c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80043f0:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 80043f2:	4b10      	ldr	r3, [pc, #64]	@ (8004434 <UART4_IRQHandler+0x164>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004434 <UART4_IRQHandler+0x164>)
 80043f8:	f023 0310 	bic.w	r3, r3, #16
 80043fc:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 80043fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <UART4_IRQHandler+0x168>)
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d010      	beq.n	800442e <UART4_IRQHandler+0x15e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 800440c:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <UART4_IRQHandler+0x16c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <UART4_IRQHandler+0x15e>
	    	__usart_4_config__ ->ISR_Routines.Parity_ISR();
 8004418:	4b08      	ldr	r3, [pc, #32]	@ (800443c <UART4_IRQHandler+0x16c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004420:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8004422:	4b04      	ldr	r3, [pc, #16]	@ (8004434 <UART4_IRQHandler+0x164>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a03      	ldr	r2, [pc, #12]	@ (8004434 <UART4_IRQHandler+0x164>)
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	6013      	str	r3, [r2, #0]
	    }
	}

}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40004c00 	.word	0x40004c00
 8004438:	200000e8 	.word	0x200000e8
 800443c:	200000e4 	.word	0x200000e4

08004440 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 8004444:	4b57      	ldr	r3, [pc, #348]	@ (80045a4 <USART1_IRQHandler+0x164>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	b29a      	uxth	r2, r3
 800444a:	4b57      	ldr	r3, [pc, #348]	@ (80045a8 <USART1_IRQHandler+0x168>)
 800444c:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 800444e:	4b56      	ldr	r3, [pc, #344]	@ (80045a8 <USART1_IRQHandler+0x168>)
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004458:	2b00      	cmp	r3, #0
 800445a:	d010      	beq.n	800447e <USART1_IRQHandler+0x3e>
	{
	    if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 800445c:	4b53      	ldr	r3, [pc, #332]	@ (80045ac <USART1_IRQHandler+0x16c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <USART1_IRQHandler+0x3e>
	    	__usart_1_config__ ->ISR_Routines.CTS_ISR();
 8004468:	4b50      	ldr	r3, [pc, #320]	@ (80045ac <USART1_IRQHandler+0x16c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004470:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 8004472:	4b4c      	ldr	r3, [pc, #304]	@ (80045a4 <USART1_IRQHandler+0x164>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4b      	ldr	r2, [pc, #300]	@ (80045a4 <USART1_IRQHandler+0x164>)
 8004478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800447c:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 800447e:	4b4a      	ldr	r3, [pc, #296]	@ (80045a8 <USART1_IRQHandler+0x168>)
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d010      	beq.n	80044ae <USART1_IRQHandler+0x6e>
	{
	    if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 800448c:	4b47      	ldr	r3, [pc, #284]	@ (80045ac <USART1_IRQHandler+0x16c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <USART1_IRQHandler+0x6e>
	    	__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8004498:	4b44      	ldr	r3, [pc, #272]	@ (80045ac <USART1_IRQHandler+0x16c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044a0:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 80044a2:	4b40      	ldr	r3, [pc, #256]	@ (80045a4 <USART1_IRQHandler+0x164>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a3f      	ldr	r2, [pc, #252]	@ (80045a4 <USART1_IRQHandler+0x164>)
 80044a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044ac:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 80044ae:	4b3e      	ldr	r3, [pc, #248]	@ (80045a8 <USART1_IRQHandler+0x168>)
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <USART1_IRQHandler+0x9e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 80044bc:	4b3b      	ldr	r3, [pc, #236]	@ (80045ac <USART1_IRQHandler+0x16c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <USART1_IRQHandler+0x9e>
	    	__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 80044c8:	4b38      	ldr	r3, [pc, #224]	@ (80045ac <USART1_IRQHandler+0x16c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80044d0:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 80044d2:	4b34      	ldr	r3, [pc, #208]	@ (80045a4 <USART1_IRQHandler+0x164>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a33      	ldr	r2, [pc, #204]	@ (80045a4 <USART1_IRQHandler+0x164>)
 80044d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044dc:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 80044de:	4b32      	ldr	r3, [pc, #200]	@ (80045a8 <USART1_IRQHandler+0x168>)
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d010      	beq.n	800450e <USART1_IRQHandler+0xce>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 80044ec:	4b2f      	ldr	r3, [pc, #188]	@ (80045ac <USART1_IRQHandler+0x16c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <USART1_IRQHandler+0xce>
	    	__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 80044f8:	4b2c      	ldr	r3, [pc, #176]	@ (80045ac <USART1_IRQHandler+0x16c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004500:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8004502:	4b28      	ldr	r3, [pc, #160]	@ (80045a4 <USART1_IRQHandler+0x164>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a27      	ldr	r2, [pc, #156]	@ (80045a4 <USART1_IRQHandler+0x164>)
 8004508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800450c:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 800450e:	4b26      	ldr	r3, [pc, #152]	@ (80045a8 <USART1_IRQHandler+0x168>)
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d010      	beq.n	800453e <USART1_IRQHandler+0xfe>
	{
	    if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 800451c:	4b23      	ldr	r3, [pc, #140]	@ (80045ac <USART1_IRQHandler+0x16c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <USART1_IRQHandler+0xfe>
	    	__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8004528:	4b20      	ldr	r3, [pc, #128]	@ (80045ac <USART1_IRQHandler+0x16c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004530:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 8004532:	4b1c      	ldr	r3, [pc, #112]	@ (80045a4 <USART1_IRQHandler+0x164>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1b      	ldr	r2, [pc, #108]	@ (80045a4 <USART1_IRQHandler+0x164>)
 8004538:	f023 0320 	bic.w	r3, r3, #32
 800453c:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 800453e:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <USART1_IRQHandler+0x168>)
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d010      	beq.n	800456e <USART1_IRQHandler+0x12e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 800454c:	4b17      	ldr	r3, [pc, #92]	@ (80045ac <USART1_IRQHandler+0x16c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <USART1_IRQHandler+0x12e>
	    	__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 8004558:	4b14      	ldr	r3, [pc, #80]	@ (80045ac <USART1_IRQHandler+0x16c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004560:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8004562:	4b10      	ldr	r3, [pc, #64]	@ (80045a4 <USART1_IRQHandler+0x164>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a0f      	ldr	r2, [pc, #60]	@ (80045a4 <USART1_IRQHandler+0x164>)
 8004568:	f023 0310 	bic.w	r3, r3, #16
 800456c:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 800456e:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <USART1_IRQHandler+0x168>)
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d010      	beq.n	800459e <USART1_IRQHandler+0x15e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <USART1_IRQHandler+0x16c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <USART1_IRQHandler+0x15e>
	    	__usart_1_config__ ->ISR_Routines.Parity_ISR();
 8004588:	4b08      	ldr	r3, [pc, #32]	@ (80045ac <USART1_IRQHandler+0x16c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004590:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8004592:	4b04      	ldr	r3, [pc, #16]	@ (80045a4 <USART1_IRQHandler+0x164>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a03      	ldr	r2, [pc, #12]	@ (80045a4 <USART1_IRQHandler+0x164>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6013      	str	r3, [r2, #0]
	    }
	}

}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40011000 	.word	0x40011000
 80045a8:	200000e8 	.word	0x200000e8
 80045ac:	200000e0 	.word	0x200000e0

080045b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	6039      	str	r1, [r7, #0]
 80045ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	db0a      	blt.n	80045da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	490c      	ldr	r1, [pc, #48]	@ (80045fc <__NVIC_SetPriority+0x4c>)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	0112      	lsls	r2, r2, #4
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	440b      	add	r3, r1
 80045d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d8:	e00a      	b.n	80045f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4908      	ldr	r1, [pc, #32]	@ (8004600 <__NVIC_SetPriority+0x50>)
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	3b04      	subs	r3, #4
 80045e8:	0112      	lsls	r2, r2, #4
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	440b      	add	r3, r1
 80045ee:	761a      	strb	r2, [r3, #24]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000e100 	.word	0xe000e100
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004614:	d301      	bcc.n	800461a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004616:	2301      	movs	r3, #1
 8004618:	e00f      	b.n	800463a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461a:	4a0a      	ldr	r2, [pc, #40]	@ (8004644 <SysTick_Config+0x40>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004622:	210f      	movs	r1, #15
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	f7ff ffc2 	bl	80045b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800462c:	4b05      	ldr	r3, [pc, #20]	@ (8004644 <SysTick_Config+0x40>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004632:	4b04      	ldr	r3, [pc, #16]	@ (8004644 <SysTick_Config+0x40>)
 8004634:	2207      	movs	r2, #7
 8004636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	e000e010 	.word	0xe000e010

08004648 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	SystemInit();
 800464e:	f000 fb43 	bl	8004cd8 <SystemInit>

	uint8_t pll_m = 8;
 8004652:	2308      	movs	r3, #8
 8004654:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8004656:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800465a:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8004660:	2307      	movs	r3, #7
 8004662:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 8004664:	4b3c      	ldr	r3, [pc, #240]	@ (8004758 <MCU_Clock_Setup+0x110>)
 8004666:	2200      	movs	r2, #0
 8004668:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800466a:	4b3b      	ldr	r3, [pc, #236]	@ (8004758 <MCU_Clock_Setup+0x110>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3a      	ldr	r2, [pc, #232]	@ (8004758 <MCU_Clock_Setup+0x110>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004674:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8004676:	bf00      	nop
 8004678:	4b37      	ldr	r3, [pc, #220]	@ (8004758 <MCU_Clock_Setup+0x110>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f9      	beq.n	8004678 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8004684:	4b34      	ldr	r3, [pc, #208]	@ (8004758 <MCU_Clock_Setup+0x110>)
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	4a33      	ldr	r2, [pc, #204]	@ (8004758 <MCU_Clock_Setup+0x110>)
 800468a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800468e:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8004690:	4b32      	ldr	r3, [pc, #200]	@ (800475c <MCU_Clock_Setup+0x114>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a31      	ldr	r2, [pc, #196]	@ (800475c <MCU_Clock_Setup+0x114>)
 8004696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800469a:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 800469c:	4b30      	ldr	r3, [pc, #192]	@ (8004760 <MCU_Clock_Setup+0x118>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004760 <MCU_Clock_Setup+0x118>)
 80046a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046a6:	f043 0305 	orr.w	r3, r3, #5
 80046aa:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80046ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	78ba      	ldrb	r2, [r7, #2]
 80046b2:	0611      	lsls	r1, r2, #24
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	0412      	lsls	r2, r2, #16
 80046b8:	4311      	orrs	r1, r2
 80046ba:	88ba      	ldrh	r2, [r7, #4]
 80046bc:	0192      	lsls	r2, r2, #6
 80046be:	4311      	orrs	r1, r2
 80046c0:	79fa      	ldrb	r2, [r7, #7]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	4611      	mov	r1, r2
 80046c6:	4a24      	ldr	r2, [pc, #144]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 80046cc:	4b22      	ldr	r3, [pc, #136]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4a21      	ldr	r2, [pc, #132]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046d6:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 80046d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046da:	4a1f      	ldr	r2, [pc, #124]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80046e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046e6:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80046ea:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80046ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a19      	ldr	r2, [pc, #100]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046f6:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 80046f8:	4b17      	ldr	r3, [pc, #92]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a16      	ldr	r2, [pc, #88]	@ (8004758 <MCU_Clock_Setup+0x110>)
 80046fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004702:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004704:	bf00      	nop
 8004706:	4b14      	ldr	r3, [pc, #80]	@ (8004758 <MCU_Clock_Setup+0x110>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f9      	beq.n	8004706 <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8004712:	4b11      	ldr	r3, [pc, #68]	@ (8004758 <MCU_Clock_Setup+0x110>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	4a10      	ldr	r2, [pc, #64]	@ (8004758 <MCU_Clock_Setup+0x110>)
 8004718:	f043 0302 	orr.w	r3, r3, #2
 800471c:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 800471e:	bf00      	nop
 8004720:	4b0d      	ldr	r3, [pc, #52]	@ (8004758 <MCU_Clock_Setup+0x110>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b08      	cmp	r3, #8
 800472a:	d1f9      	bne.n	8004720 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 800472c:	f000 fae6 	bl	8004cfc <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8004730:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <MCU_Clock_Setup+0x11c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	08db      	lsrs	r3, r3, #3
 8004736:	4a0c      	ldr	r2, [pc, #48]	@ (8004768 <MCU_Clock_Setup+0x120>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff ff60 	bl	8004604 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004744:	4b04      	ldr	r3, [pc, #16]	@ (8004758 <MCU_Clock_Setup+0x110>)
 8004746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004748:	4a03      	ldr	r2, [pc, #12]	@ (8004758 <MCU_Clock_Setup+0x110>)
 800474a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800474e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40023800 	.word	0x40023800
 800475c:	40007000 	.word	0x40007000
 8004760:	40023c00 	.word	0x40023c00
 8004764:	20000000 	.word	0x20000000
 8004768:	18618619 	.word	0x18618619

0800476c <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	2101      	movs	r1, #1
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	fa01 f202 	lsl.w	r2, r1, r2
 8004782:	43d2      	mvns	r2, r2
 8004784:	401a      	ands	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	615a      	str	r2, [r3, #20]
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	2101      	movs	r1, #1
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	fa01 f202 	lsl.w	r2, r1, r2
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	615a      	str	r2, [r3, #20]
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <Timer_Trigger>:
void Timer_Init(Timer_Config *config);
//void Timer_Trigger(Timer_Config *config);
//void Timer_Disable(Timer_Config *config);

__STATIC_INLINE void Timer_Trigger(Timer_Config *config)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
	config -> Port -> CR1 |= TIM_CR1_CEN;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <H1_L1>:
volatile uint16_t heater2_delay_off_timer_tick = 0;



void H1_L1(bool on_off)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
	if(on_off){
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <H1_L1+0x20>
		GPIO_Pin_High(GPIOA, 4);
 80047f4:	2104      	movs	r1, #4
 80047f6:	4809      	ldr	r0, [pc, #36]	@ (800481c <H1_L1+0x38>)
 80047f8:	f7ff ffcd 	bl	8004796 <GPIO_Pin_High>
		Heater_Flag_1 = On;
 80047fc:	4b08      	ldr	r3, [pc, #32]	@ (8004820 <H1_L1+0x3c>)
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
	else{
		GPIO_Pin_Low(GPIOA, 4);
		Heater_Flag_1 = Off;
	}

}
 8004802:	e006      	b.n	8004812 <H1_L1+0x2e>
		GPIO_Pin_Low(GPIOA, 4);
 8004804:	2104      	movs	r1, #4
 8004806:	4805      	ldr	r0, [pc, #20]	@ (800481c <H1_L1+0x38>)
 8004808:	f7ff ffb0 	bl	800476c <GPIO_Pin_Low>
		Heater_Flag_1 = Off;
 800480c:	4b04      	ldr	r3, [pc, #16]	@ (8004820 <H1_L1+0x3c>)
 800480e:	2202      	movs	r2, #2
 8004810:	701a      	strb	r2, [r3, #0]
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40020000 	.word	0x40020000
 8004820:	200001a1 	.word	0x200001a1

08004824 <H1_L2>:

void H1_L2(bool on_off)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	71fb      	strb	r3, [r7, #7]
	if(on_off){
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <H1_L2+0x20>
		GPIO_Pin_High(GPIOA, 5);
 8004834:	2105      	movs	r1, #5
 8004836:	4809      	ldr	r0, [pc, #36]	@ (800485c <H1_L2+0x38>)
 8004838:	f7ff ffad 	bl	8004796 <GPIO_Pin_High>
		Heater_Flag_1 = On;
 800483c:	4b08      	ldr	r3, [pc, #32]	@ (8004860 <H1_L2+0x3c>)
 800483e:	2201      	movs	r2, #1
 8004840:	701a      	strb	r2, [r3, #0]
	else{
		GPIO_Pin_Low(GPIOA, 5);
		Heater_Flag_1 = Off;
	}

}
 8004842:	e006      	b.n	8004852 <H1_L2+0x2e>
		GPIO_Pin_Low(GPIOA, 5);
 8004844:	2105      	movs	r1, #5
 8004846:	4805      	ldr	r0, [pc, #20]	@ (800485c <H1_L2+0x38>)
 8004848:	f7ff ff90 	bl	800476c <GPIO_Pin_Low>
		Heater_Flag_1 = Off;
 800484c:	4b04      	ldr	r3, [pc, #16]	@ (8004860 <H1_L2+0x3c>)
 800484e:	2202      	movs	r2, #2
 8004850:	701a      	strb	r2, [r3, #0]
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40020000 	.word	0x40020000
 8004860:	200001a1 	.word	0x200001a1

08004864 <H2_L1>:

void H2_L1(bool on_off)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	71fb      	strb	r3, [r7, #7]
	if(on_off){
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d007      	beq.n	8004884 <H2_L1+0x20>
		GPIO_Pin_High(GPIOA, 6);
 8004874:	2106      	movs	r1, #6
 8004876:	4809      	ldr	r0, [pc, #36]	@ (800489c <H2_L1+0x38>)
 8004878:	f7ff ff8d 	bl	8004796 <GPIO_Pin_High>
		Heater_Flag_1 = On;
 800487c:	4b08      	ldr	r3, [pc, #32]	@ (80048a0 <H2_L1+0x3c>)
 800487e:	2201      	movs	r2, #1
 8004880:	701a      	strb	r2, [r3, #0]
	else{
		GPIO_Pin_Low(GPIOA, 6);
		Heater_Flag_1 = Off;
	}

}
 8004882:	e006      	b.n	8004892 <H2_L1+0x2e>
		GPIO_Pin_Low(GPIOA, 6);
 8004884:	2106      	movs	r1, #6
 8004886:	4805      	ldr	r0, [pc, #20]	@ (800489c <H2_L1+0x38>)
 8004888:	f7ff ff70 	bl	800476c <GPIO_Pin_Low>
		Heater_Flag_1 = Off;
 800488c:	4b04      	ldr	r3, [pc, #16]	@ (80048a0 <H2_L1+0x3c>)
 800488e:	2202      	movs	r2, #2
 8004890:	701a      	strb	r2, [r3, #0]
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40020000 	.word	0x40020000
 80048a0:	200001a1 	.word	0x200001a1

080048a4 <H2_L2>:

void H2_L2(bool on_off)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
	if(on_off){
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <H2_L2+0x20>
		GPIO_Pin_High(GPIOA, 7);
 80048b4:	2107      	movs	r1, #7
 80048b6:	4809      	ldr	r0, [pc, #36]	@ (80048dc <H2_L2+0x38>)
 80048b8:	f7ff ff6d 	bl	8004796 <GPIO_Pin_High>
		Heater_Flag_2 = On;
 80048bc:	4b08      	ldr	r3, [pc, #32]	@ (80048e0 <H2_L2+0x3c>)
 80048be:	2201      	movs	r2, #1
 80048c0:	701a      	strb	r2, [r3, #0]
	else{
		GPIO_Pin_Low(GPIOA, 7);
		Heater_Flag_2 = Off;
	}

}
 80048c2:	e006      	b.n	80048d2 <H2_L2+0x2e>
		GPIO_Pin_Low(GPIOA, 7);
 80048c4:	2107      	movs	r1, #7
 80048c6:	4805      	ldr	r0, [pc, #20]	@ (80048dc <H2_L2+0x38>)
 80048c8:	f7ff ff50 	bl	800476c <GPIO_Pin_Low>
		Heater_Flag_2 = Off;
 80048cc:	4b04      	ldr	r3, [pc, #16]	@ (80048e0 <H2_L2+0x3c>)
 80048ce:	2202      	movs	r2, #2
 80048d0:	701a      	strb	r2, [r3, #0]
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40020000 	.word	0x40020000
 80048e0:	200001a2 	.word	0x200001a2

080048e4 <Speed_Tap_1>:

void Speed_Tap_1(bool on_off)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	71fb      	strb	r3, [r7, #7]
	if(on_off){
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <Speed_Tap_1+0x20>
		GPIO_Pin_High(GPIOA, 8);
 80048f4:	2108      	movs	r1, #8
 80048f6:	4809      	ldr	r0, [pc, #36]	@ (800491c <Speed_Tap_1+0x38>)
 80048f8:	f7ff ff4d 	bl	8004796 <GPIO_Pin_High>
		Speed_Tap1_Flag = On;
 80048fc:	4b08      	ldr	r3, [pc, #32]	@ (8004920 <Speed_Tap_1+0x3c>)
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]
	else {
		GPIO_Pin_Low(GPIOA, 8);
		Speed_Tap1_Flag = Off;
	}

}
 8004902:	e006      	b.n	8004912 <Speed_Tap_1+0x2e>
		GPIO_Pin_Low(GPIOA, 8);
 8004904:	2108      	movs	r1, #8
 8004906:	4805      	ldr	r0, [pc, #20]	@ (800491c <Speed_Tap_1+0x38>)
 8004908:	f7ff ff30 	bl	800476c <GPIO_Pin_Low>
		Speed_Tap1_Flag = Off;
 800490c:	4b04      	ldr	r3, [pc, #16]	@ (8004920 <Speed_Tap_1+0x3c>)
 800490e:	2202      	movs	r2, #2
 8004910:	701a      	strb	r2, [r3, #0]
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40020000 	.word	0x40020000
 8004920:	2000019f 	.word	0x2000019f

08004924 <Speed_Tap_2>:

void Speed_Tap_2(bool on_off)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
	if(on_off){
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <Speed_Tap_2+0x20>
		GPIO_Pin_High(GPIOA, 9);
 8004934:	2109      	movs	r1, #9
 8004936:	4809      	ldr	r0, [pc, #36]	@ (800495c <Speed_Tap_2+0x38>)
 8004938:	f7ff ff2d 	bl	8004796 <GPIO_Pin_High>
		Speed_Tap2_Flag = On;
 800493c:	4b08      	ldr	r3, [pc, #32]	@ (8004960 <Speed_Tap_2+0x3c>)
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
	else {
		GPIO_Pin_Low(GPIOA, 9);
		Speed_Tap2_Flag = Off;
	}

}
 8004942:	e006      	b.n	8004952 <Speed_Tap_2+0x2e>
		GPIO_Pin_Low(GPIOA, 9);
 8004944:	2109      	movs	r1, #9
 8004946:	4805      	ldr	r0, [pc, #20]	@ (800495c <Speed_Tap_2+0x38>)
 8004948:	f7ff ff10 	bl	800476c <GPIO_Pin_Low>
		Speed_Tap2_Flag = Off;
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <Speed_Tap_2+0x3c>)
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40020000 	.word	0x40020000
 8004960:	200001a0 	.word	0x200001a0

08004964 <Delay_Timer_ISR>:
	// optionally disable Timer6 and interrupts
}


void Delay_Timer_ISR()
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
	timer_tick += 1;
 8004968:	4b6a      	ldr	r3, [pc, #424]	@ (8004b14 <Delay_Timer_ISR+0x1b0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	4a69      	ldr	r2, [pc, #420]	@ (8004b14 <Delay_Timer_ISR+0x1b0>)
 8004970:	6013      	str	r3, [r2, #0]

	if(G_Flag == On)
 8004972:	4b69      	ldr	r3, [pc, #420]	@ (8004b18 <Delay_Timer_ISR+0x1b4>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d11e      	bne.n	80049ba <Delay_Timer_ISR+0x56>
	{
		if((Speed_Tap2_Flag == Undefined) || (Speed_Tap2_Flag == Off))
 800497c:	4b67      	ldr	r3, [pc, #412]	@ (8004b1c <Delay_Timer_ISR+0x1b8>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <Delay_Timer_ISR+0x2c>
 8004986:	4b65      	ldr	r3, [pc, #404]	@ (8004b1c <Delay_Timer_ISR+0x1b8>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d114      	bne.n	80049ba <Delay_Timer_ISR+0x56>
		{
			fan1_delay_on_timer_tick += 1;
 8004990:	4b63      	ldr	r3, [pc, #396]	@ (8004b20 <Delay_Timer_ISR+0x1bc>)
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	3301      	adds	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	4b61      	ldr	r3, [pc, #388]	@ (8004b20 <Delay_Timer_ISR+0x1bc>)
 800499c:	801a      	strh	r2, [r3, #0]
			if(fan1_delay_on_timer_tick >= FAN1_ON_DELAY)
 800499e:	4b60      	ldr	r3, [pc, #384]	@ (8004b20 <Delay_Timer_ISR+0x1bc>)
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d908      	bls.n	80049ba <Delay_Timer_ISR+0x56>
			{
				Speed_Tap_1(true);
 80049a8:	2001      	movs	r0, #1
 80049aa:	f7ff ff9b 	bl	80048e4 <Speed_Tap_1>
				G_Flag = Undefined;
 80049ae:	4b5a      	ldr	r3, [pc, #360]	@ (8004b18 <Delay_Timer_ISR+0x1b4>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
				fan1_delay_on_timer_tick = 0;
 80049b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b20 <Delay_Timer_ISR+0x1bc>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	801a      	strh	r2, [r3, #0]
			}
		}

	}

	if(G_Flag == Off)
 80049ba:	4b57      	ldr	r3, [pc, #348]	@ (8004b18 <Delay_Timer_ISR+0x1b4>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d114      	bne.n	80049ee <Delay_Timer_ISR+0x8a>
	{
		fan1_delay_off_timer_tick += 1;
 80049c4:	4b57      	ldr	r3, [pc, #348]	@ (8004b24 <Delay_Timer_ISR+0x1c0>)
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3301      	adds	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	4b55      	ldr	r3, [pc, #340]	@ (8004b24 <Delay_Timer_ISR+0x1c0>)
 80049d0:	801a      	strh	r2, [r3, #0]
		if(fan1_delay_off_timer_tick >= FAN1_OFF_DELAY)
 80049d2:	4b54      	ldr	r3, [pc, #336]	@ (8004b24 <Delay_Timer_ISR+0x1c0>)
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b0e      	cmp	r3, #14
 80049da:	d908      	bls.n	80049ee <Delay_Timer_ISR+0x8a>
		{
			Speed_Tap_1(false);
 80049dc:	2000      	movs	r0, #0
 80049de:	f7ff ff81 	bl	80048e4 <Speed_Tap_1>
			G_Flag = Undefined;
 80049e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004b18 <Delay_Timer_ISR+0x1b4>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
			fan1_delay_off_timer_tick = 0;
 80049e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004b24 <Delay_Timer_ISR+0x1c0>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	801a      	strh	r2, [r3, #0]
		}
	}



	if(W_Flag == On)
 80049ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004b28 <Delay_Timer_ISR+0x1c4>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d156      	bne.n	8004aa6 <Delay_Timer_ISR+0x142>
	{

		Speed_Tap_1(false);
 80049f8:	2000      	movs	r0, #0
 80049fa:	f7ff ff73 	bl	80048e4 <Speed_Tap_1>
		fan1_delay_off_timer_tick = 0;
 80049fe:	4b49      	ldr	r3, [pc, #292]	@ (8004b24 <Delay_Timer_ISR+0x1c0>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	801a      	strh	r2, [r3, #0]
		fan1_delay_on_timer_tick = 0;
 8004a04:	4b46      	ldr	r3, [pc, #280]	@ (8004b20 <Delay_Timer_ISR+0x1bc>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	801a      	strh	r2, [r3, #0]
		fan2_delay_on_timer_tick += 1;
 8004a0a:	4b48      	ldr	r3, [pc, #288]	@ (8004b2c <Delay_Timer_ISR+0x1c8>)
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3301      	adds	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	4b45      	ldr	r3, [pc, #276]	@ (8004b2c <Delay_Timer_ISR+0x1c8>)
 8004a16:	801a      	strh	r2, [r3, #0]
		if(fan2_delay_on_timer_tick >= FAN2_ON_DELAY)
 8004a18:	4b44      	ldr	r3, [pc, #272]	@ (8004b2c <Delay_Timer_ISR+0x1c8>)
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d902      	bls.n	8004a28 <Delay_Timer_ISR+0xc4>
		{
			Speed_Tap_2(true);
 8004a22:	2001      	movs	r0, #1
 8004a24:	f7ff ff7e 	bl	8004924 <Speed_Tap_2>
		}

		heater1_delay_on_timer_tick += 1;
 8004a28:	4b41      	ldr	r3, [pc, #260]	@ (8004b30 <Delay_Timer_ISR+0x1cc>)
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	4b3f      	ldr	r3, [pc, #252]	@ (8004b30 <Delay_Timer_ISR+0x1cc>)
 8004a34:	801a      	strh	r2, [r3, #0]
		if(heater1_delay_on_timer_tick >= HEATER1_ON_TIMER_DELAY)
 8004a36:	4b3e      	ldr	r3, [pc, #248]	@ (8004b30 <Delay_Timer_ISR+0x1cc>)
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b0e      	cmp	r3, #14
 8004a3e:	d905      	bls.n	8004a4c <Delay_Timer_ISR+0xe8>
		{
			H1_L1(true);
 8004a40:	2001      	movs	r0, #1
 8004a42:	f7ff fecf 	bl	80047e4 <H1_L1>
			H1_L2(true);
 8004a46:	2001      	movs	r0, #1
 8004a48:	f7ff feec 	bl	8004824 <H1_L2>
		}

		heater2_delay_on_timer_tick += 1;
 8004a4c:	4b39      	ldr	r3, [pc, #228]	@ (8004b34 <Delay_Timer_ISR+0x1d0>)
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3301      	adds	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	4b37      	ldr	r3, [pc, #220]	@ (8004b34 <Delay_Timer_ISR+0x1d0>)
 8004a58:	801a      	strh	r2, [r3, #0]
		if(heater2_delay_on_timer_tick >= HEATER2_ON_TIMER_DELAY)
 8004a5a:	4b36      	ldr	r3, [pc, #216]	@ (8004b34 <Delay_Timer_ISR+0x1d0>)
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d905      	bls.n	8004a70 <Delay_Timer_ISR+0x10c>
		{
			H2_L1(true);
 8004a64:	2001      	movs	r0, #1
 8004a66:	f7ff fefd 	bl	8004864 <H2_L1>
			H2_L2(true);
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	f7ff ff1a 	bl	80048a4 <H2_L2>
		}

		W_Flag_Count_ON++;
 8004a70:	4b31      	ldr	r3, [pc, #196]	@ (8004b38 <Delay_Timer_ISR+0x1d4>)
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3301      	adds	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b38 <Delay_Timer_ISR+0x1d4>)
 8004a7c:	801a      	strh	r2, [r3, #0]
		if (W_Flag_Count_ON >= (FAN2_ON_DELAY + HEATER1_ON_TIMER_DELAY + HEATER2_ON_TIMER_DELAY))
 8004a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004b38 <Delay_Timer_ISR+0x1d4>)
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b24      	cmp	r3, #36	@ 0x24
 8004a86:	d90e      	bls.n	8004aa6 <Delay_Timer_ISR+0x142>
		{
			W_Flag = Undefined;
 8004a88:	4b27      	ldr	r3, [pc, #156]	@ (8004b28 <Delay_Timer_ISR+0x1c4>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
			W_Flag_Count_ON = 0;
 8004a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b38 <Delay_Timer_ISR+0x1d4>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	801a      	strh	r2, [r3, #0]
			fan2_delay_on_timer_tick = 0;
 8004a94:	4b25      	ldr	r3, [pc, #148]	@ (8004b2c <Delay_Timer_ISR+0x1c8>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	801a      	strh	r2, [r3, #0]
			heater1_delay_on_timer_tick = 0;
 8004a9a:	4b25      	ldr	r3, [pc, #148]	@ (8004b30 <Delay_Timer_ISR+0x1cc>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	801a      	strh	r2, [r3, #0]
			heater2_delay_on_timer_tick = 0;
 8004aa0:	4b24      	ldr	r3, [pc, #144]	@ (8004b34 <Delay_Timer_ISR+0x1d0>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	801a      	strh	r2, [r3, #0]
		}
	}

	if(W_Flag == Off)
 8004aa6:	4b20      	ldr	r3, [pc, #128]	@ (8004b28 <Delay_Timer_ISR+0x1c4>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d12f      	bne.n	8004b10 <Delay_Timer_ISR+0x1ac>
	{


		H2_L1(false);
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	f7ff fed7 	bl	8004864 <H2_L1>
		H2_L2(false);
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f7ff fef4 	bl	80048a4 <H2_L2>

		H1_L1(false);
 8004abc:	2000      	movs	r0, #0
 8004abe:	f7ff fe91 	bl	80047e4 <H1_L1>
		H1_L2(false);
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f7ff feae 	bl	8004824 <H1_L2>


		fan2_delay_off_timer_tick += 1;
 8004ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b3c <Delay_Timer_ISR+0x1d8>)
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b3c <Delay_Timer_ISR+0x1d8>)
 8004ad4:	801a      	strh	r2, [r3, #0]
		if((fan2_delay_off_timer_tick >= FAN2_OFF_DELAY))
 8004ad6:	4b19      	ldr	r3, [pc, #100]	@ (8004b3c <Delay_Timer_ISR+0x1d8>)
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b0e      	cmp	r3, #14
 8004ade:	d902      	bls.n	8004ae6 <Delay_Timer_ISR+0x182>
		{
			Speed_Tap_2(false);
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f7ff ff1f 	bl	8004924 <Speed_Tap_2>
		}

		W_Flag_Count_OFF++;
 8004ae6:	4b16      	ldr	r3, [pc, #88]	@ (8004b40 <Delay_Timer_ISR+0x1dc>)
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3301      	adds	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	4b13      	ldr	r3, [pc, #76]	@ (8004b40 <Delay_Timer_ISR+0x1dc>)
 8004af2:	801a      	strh	r2, [r3, #0]

		if (W_Flag_Count_OFF >= FAN2_OFF_DELAY)
 8004af4:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <Delay_Timer_ISR+0x1dc>)
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b0e      	cmp	r3, #14
 8004afc:	d908      	bls.n	8004b10 <Delay_Timer_ISR+0x1ac>
		{
			W_Flag = Undefined;
 8004afe:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <Delay_Timer_ISR+0x1c4>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
			W_Flag_Count_OFF = 0;
 8004b04:	4b0e      	ldr	r3, [pc, #56]	@ (8004b40 <Delay_Timer_ISR+0x1dc>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	801a      	strh	r2, [r3, #0]
			fan2_delay_off_timer_tick = 0;
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b3c <Delay_Timer_ISR+0x1d8>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8004b10:	bf00      	nop
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	200000ec 	.word	0x200000ec
 8004b18:	2000019c 	.word	0x2000019c
 8004b1c:	200001a0 	.word	0x200001a0
 8004b20:	200001a8 	.word	0x200001a8
 8004b24:	200001b0 	.word	0x200001b0
 8004b28:	2000019d 	.word	0x2000019d
 8004b2c:	200001aa 	.word	0x200001aa
 8004b30:	200001ac 	.word	0x200001ac
 8004b34:	200001ae 	.word	0x200001ae
 8004b38:	200001a4 	.word	0x200001a4
 8004b3c:	200001b2 	.word	0x200001b2
 8004b40:	200001a6 	.word	0x200001a6

08004b44 <main>:
void W_Call_ISR(void);
void Output_func(void);
void Input_Func(void);

int main(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8004b4a:	f7ff fd7d 	bl	8004648 <MCU_Clock_Setup>




	Output_func();
 8004b4e:	f000 f865 	bl	8004c1c <Output_func>


	bool pin = (Thermostat_Port->IDR & GPIO_IDR_ID0);
 8004b52:	4b2b      	ldr	r3, [pc, #172]	@ (8004c00 <main+0xbc>)
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bf14      	ite	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	2300      	moveq	r3, #0
 8004b62:	71fb      	strb	r3, [r7, #7]

	if(pin == true){
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <main+0x2e>
		G_Flag = On;
 8004b6a:	4b26      	ldr	r3, [pc, #152]	@ (8004c04 <main+0xc0>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	e002      	b.n	8004b78 <main+0x34>
	}
	else
	{
		G_Flag = Off;
 8004b72:	4b24      	ldr	r3, [pc, #144]	@ (8004c04 <main+0xc0>)
 8004b74:	2202      	movs	r2, #2
 8004b76:	701a      	strb	r2, [r3, #0]
	}

	pin = (Thermostat_Port->IDR & GPIO_IDR_ID1);
 8004b78:	4b21      	ldr	r3, [pc, #132]	@ (8004c00 <main+0xbc>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	71fb      	strb	r3, [r7, #7]

	if(pin == true){
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <main+0x54>
		W_Flag = On;
 8004b90:	4b1d      	ldr	r3, [pc, #116]	@ (8004c08 <main+0xc4>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e002      	b.n	8004b9e <main+0x5a>
	}
	else
	{
		W_Flag = Off;
 8004b98:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <main+0xc4>)
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	701a      	strb	r2, [r3, #0]
	}


	Delay_Flag = 0;
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c0c <main+0xc8>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
	Delay_Timer.Port = TIM6;
 8004ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c10 <main+0xcc>)
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c14 <main+0xd0>)
 8004ba8:	601a      	str	r2, [r3, #0]
	Delay_Timer.Mode = Timer_Configurations.Mode.Update;
 8004baa:	2220      	movs	r2, #32
 8004bac:	4b18      	ldr	r3, [pc, #96]	@ (8004c10 <main+0xcc>)
 8004bae:	711a      	strb	r2, [r3, #4]
	Delay_Timer.Clock_Source = Timer_Configurations.Clock_Source.Internal;
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	4b17      	ldr	r3, [pc, #92]	@ (8004c10 <main+0xcc>)
 8004bb4:	715a      	strb	r2, [r3, #5]
	Delay_Timer.DMA_Enable = false;
 8004bb6:	4b16      	ldr	r3, [pc, #88]	@ (8004c10 <main+0xcc>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	Delay_Timer.Direction = Timer_Configurations.Direction.Upcounting;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <main+0xcc>)
 8004bcc:	719a      	strb	r2, [r3, #6]
	Delay_Timer.Interrupt_Request = Timer_Configurations.Interrupt_Request.Update_Interrupt;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004c10 <main+0xcc>)
 8004bd4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	Delay_Timer.ISR_Routines.Update_ISR = Delay_Timer_ISR;
 8004bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8004c10 <main+0xcc>)
 8004bda:	4a0f      	ldr	r2, [pc, #60]	@ (8004c18 <main+0xd4>)
 8004bdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	Delay_Timer.Prescaler = (uint16_t)(8400)-1;
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <main+0xcc>)
 8004be2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8004be6:	819a      	strh	r2, [r3, #12]
	Delay_Timer.Autoreload_Value = 10000-1;
 8004be8:	4b09      	ldr	r3, [pc, #36]	@ (8004c10 <main+0xcc>)
 8004bea:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004bee:	81da      	strh	r2, [r3, #14]
	Timer_Init(&Delay_Timer);
 8004bf0:	4807      	ldr	r0, [pc, #28]	@ (8004c10 <main+0xcc>)
 8004bf2:	f7ff fa69 	bl	80040c8 <Timer_Init>
	Timer_Trigger(&Delay_Timer);
 8004bf6:	4806      	ldr	r0, [pc, #24]	@ (8004c10 <main+0xcc>)
 8004bf8:	f7ff fde1 	bl	80047be <Timer_Trigger>





	for(;;)
 8004bfc:	bf00      	nop
 8004bfe:	e7fd      	b.n	8004bfc <main+0xb8>
 8004c00:	40020000 	.word	0x40020000
 8004c04:	2000019c 	.word	0x2000019c
 8004c08:	2000019d 	.word	0x2000019d
 8004c0c:	2000019e 	.word	0x2000019e
 8004c10:	200000f0 	.word	0x200000f0
 8004c14:	40001000 	.word	0x40001000
 8004c18:	08004965 	.word	0x08004965

08004c1c <Output_func>:
	GPIO_Interrupt_Setup(Thermostat_Port,1, GPIO_Configuration.Interrupt_Edge.RISING_FALLING_EDGE, 0, W_Call_ISR);

}

void Output_func(void)
{
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af04      	add	r7, sp, #16
	GPIO_Pin_Init(Relay_Output_Port, 4,
			GPIO_Configuration.Mode.General_Purpose_Output,
 8004c22:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 8004c24:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 8004c26:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.Pull_Down,
 8004c28:	2202      	movs	r2, #2
			GPIO_Configuration.Alternate_Functions.None);
 8004c2a:	2100      	movs	r1, #0
	GPIO_Pin_Init(Relay_Output_Port, 4,
 8004c2c:	9102      	str	r1, [sp, #8]
 8004c2e:	9201      	str	r2, [sp, #4]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	4623      	mov	r3, r4
 8004c34:	4602      	mov	r2, r0
 8004c36:	2104      	movs	r1, #4
 8004c38:	4826      	ldr	r0, [pc, #152]	@ (8004cd4 <Output_func+0xb8>)
 8004c3a:	f7fd f99b 	bl	8001f74 <GPIO_Pin_Init>

	GPIO_Pin_Init(Relay_Output_Port, 5,
			GPIO_Configuration.Mode.General_Purpose_Output,
 8004c3e:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 8004c40:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 8004c42:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.Pull_Down,
 8004c44:	2202      	movs	r2, #2
			GPIO_Configuration.Alternate_Functions.None);
 8004c46:	2100      	movs	r1, #0
	GPIO_Pin_Init(Relay_Output_Port, 5,
 8004c48:	9102      	str	r1, [sp, #8]
 8004c4a:	9201      	str	r2, [sp, #4]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4623      	mov	r3, r4
 8004c50:	4602      	mov	r2, r0
 8004c52:	2105      	movs	r1, #5
 8004c54:	481f      	ldr	r0, [pc, #124]	@ (8004cd4 <Output_func+0xb8>)
 8004c56:	f7fd f98d 	bl	8001f74 <GPIO_Pin_Init>

	GPIO_Pin_Init(Relay_Output_Port, 6,
			GPIO_Configuration.Mode.General_Purpose_Output,
 8004c5a:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 8004c5c:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 8004c5e:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.Pull_Down,
 8004c60:	2202      	movs	r2, #2
			GPIO_Configuration.Alternate_Functions.None);
 8004c62:	2100      	movs	r1, #0
	GPIO_Pin_Init(Relay_Output_Port, 6,
 8004c64:	9102      	str	r1, [sp, #8]
 8004c66:	9201      	str	r2, [sp, #4]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	2106      	movs	r1, #6
 8004c70:	4818      	ldr	r0, [pc, #96]	@ (8004cd4 <Output_func+0xb8>)
 8004c72:	f7fd f97f 	bl	8001f74 <GPIO_Pin_Init>

	GPIO_Pin_Init(Relay_Output_Port, 7,
			GPIO_Configuration.Mode.General_Purpose_Output,
 8004c76:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 8004c78:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 8004c7a:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.Pull_Down,
 8004c7c:	2202      	movs	r2, #2
			GPIO_Configuration.Alternate_Functions.None);
 8004c7e:	2100      	movs	r1, #0
	GPIO_Pin_Init(Relay_Output_Port, 7,
 8004c80:	9102      	str	r1, [sp, #8]
 8004c82:	9201      	str	r2, [sp, #4]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	4623      	mov	r3, r4
 8004c88:	4602      	mov	r2, r0
 8004c8a:	2107      	movs	r1, #7
 8004c8c:	4811      	ldr	r0, [pc, #68]	@ (8004cd4 <Output_func+0xb8>)
 8004c8e:	f7fd f971 	bl	8001f74 <GPIO_Pin_Init>

	GPIO_Pin_Init(Relay_Output_Port, 8,
			GPIO_Configuration.Mode.General_Purpose_Output,
 8004c92:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 8004c94:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 8004c96:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.Pull_Down,
 8004c98:	2202      	movs	r2, #2
			GPIO_Configuration.Alternate_Functions.None);
 8004c9a:	2100      	movs	r1, #0
	GPIO_Pin_Init(Relay_Output_Port, 8,
 8004c9c:	9102      	str	r1, [sp, #8]
 8004c9e:	9201      	str	r2, [sp, #4]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	2108      	movs	r1, #8
 8004ca8:	480a      	ldr	r0, [pc, #40]	@ (8004cd4 <Output_func+0xb8>)
 8004caa:	f7fd f963 	bl	8001f74 <GPIO_Pin_Init>

	GPIO_Pin_Init(Relay_Output_Port, 9,
			GPIO_Configuration.Mode.General_Purpose_Output,
 8004cae:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 8004cb0:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 8004cb2:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.Pull_Down,
 8004cb4:	2202      	movs	r2, #2
			GPIO_Configuration.Alternate_Functions.None);
 8004cb6:	2100      	movs	r1, #0
	GPIO_Pin_Init(Relay_Output_Port, 9,
 8004cb8:	9102      	str	r1, [sp, #8]
 8004cba:	9201      	str	r2, [sp, #4]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4623      	mov	r3, r4
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	2109      	movs	r1, #9
 8004cc4:	4803      	ldr	r0, [pc, #12]	@ (8004cd4 <Output_func+0xb8>)
 8004cc6:	f7fd f955 	bl	8001f74 <GPIO_Pin_Init>
}
 8004cca:	bf00      	nop
 8004ccc:	3704      	adds	r7, #4
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd90      	pop	{r4, r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40020000 	.word	0x40020000

08004cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cdc:	4b06      	ldr	r3, [pc, #24]	@ (8004cf8 <SystemInit+0x20>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce2:	4a05      	ldr	r2, [pc, #20]	@ (8004cf8 <SystemInit+0x20>)
 8004ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	e000ed00 	.word	0xe000ed00

08004cfc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	2302      	movs	r3, #2
 8004d14:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004d16:	4b34      	ldr	r3, [pc, #208]	@ (8004de8 <SystemCoreClockUpdate+0xec>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
 8004d1e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d011      	beq.n	8004d4a <SystemCoreClockUpdate+0x4e>
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d844      	bhi.n	8004db6 <SystemCoreClockUpdate+0xba>
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <SystemCoreClockUpdate+0x3e>
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d004      	beq.n	8004d42 <SystemCoreClockUpdate+0x46>
 8004d38:	e03d      	b.n	8004db6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004dec <SystemCoreClockUpdate+0xf0>)
 8004d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8004df0 <SystemCoreClockUpdate+0xf4>)
 8004d3e:	601a      	str	r2, [r3, #0]
      break;
 8004d40:	e03d      	b.n	8004dbe <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004d42:	4b2a      	ldr	r3, [pc, #168]	@ (8004dec <SystemCoreClockUpdate+0xf0>)
 8004d44:	4a2b      	ldr	r2, [pc, #172]	@ (8004df4 <SystemCoreClockUpdate+0xf8>)
 8004d46:	601a      	str	r2, [r3, #0]
      break;
 8004d48:	e039      	b.n	8004dbe <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004d4a:	4b27      	ldr	r3, [pc, #156]	@ (8004de8 <SystemCoreClockUpdate+0xec>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	0d9b      	lsrs	r3, r3, #22
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d56:	4b24      	ldr	r3, [pc, #144]	@ (8004de8 <SystemCoreClockUpdate+0xec>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d5e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00c      	beq.n	8004d80 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004d66:	4a23      	ldr	r2, [pc, #140]	@ (8004df4 <SystemCoreClockUpdate+0xf8>)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004de8 <SystemCoreClockUpdate+0xec>)
 8004d70:	6852      	ldr	r2, [r2, #4]
 8004d72:	0992      	lsrs	r2, r2, #6
 8004d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d78:	fb02 f303 	mul.w	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	e00b      	b.n	8004d98 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004d80:	4a1b      	ldr	r2, [pc, #108]	@ (8004df0 <SystemCoreClockUpdate+0xf4>)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	4a17      	ldr	r2, [pc, #92]	@ (8004de8 <SystemCoreClockUpdate+0xec>)
 8004d8a:	6852      	ldr	r2, [r2, #4]
 8004d8c:	0992      	lsrs	r2, r2, #6
 8004d8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004d98:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <SystemCoreClockUpdate+0xec>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	3301      	adds	r3, #1
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	4a0e      	ldr	r2, [pc, #56]	@ (8004dec <SystemCoreClockUpdate+0xf0>)
 8004db2:	6013      	str	r3, [r2, #0]
      break;
 8004db4:	e003      	b.n	8004dbe <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004db6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <SystemCoreClockUpdate+0xf0>)
 8004db8:	4a0d      	ldr	r2, [pc, #52]	@ (8004df0 <SystemCoreClockUpdate+0xf4>)
 8004dba:	601a      	str	r2, [r3, #0]
      break;
 8004dbc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <SystemCoreClockUpdate+0xec>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	091b      	lsrs	r3, r3, #4
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8004df8 <SystemCoreClockUpdate+0xfc>)
 8004dca:	5cd3      	ldrb	r3, [r2, r3]
 8004dcc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004dce:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <SystemCoreClockUpdate+0xf0>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd8:	4a04      	ldr	r2, [pc, #16]	@ (8004dec <SystemCoreClockUpdate+0xf0>)
 8004dda:	6013      	str	r3, [r2, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	40023800 	.word	0x40023800
 8004dec:	20000000 	.word	0x20000000
 8004df0:	00f42400 	.word	0x00f42400
 8004df4:	017d7840 	.word	0x017d7840
 8004df8:	08004eb0 	.word	0x08004eb0

08004dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004dfc:	480d      	ldr	r0, [pc, #52]	@ (8004e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004dfe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004e00:	f7ff ff6a 	bl	8004cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e04:	480c      	ldr	r0, [pc, #48]	@ (8004e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8004e06:	490d      	ldr	r1, [pc, #52]	@ (8004e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e08:	4a0d      	ldr	r2, [pc, #52]	@ (8004e40 <LoopForever+0xe>)
  movs r3, #0
 8004e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e0c:	e002      	b.n	8004e14 <LoopCopyDataInit>

08004e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e12:	3304      	adds	r3, #4

08004e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e18:	d3f9      	bcc.n	8004e0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8004e48 <LoopForever+0x16>)
  movs r3, #0
 8004e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e20:	e001      	b.n	8004e26 <LoopFillZerobss>

08004e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e24:	3204      	adds	r2, #4

08004e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e28:	d3fb      	bcc.n	8004e22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004e2a:	f000 f811 	bl	8004e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e2e:	f7ff fe89 	bl	8004b44 <main>

08004e32 <LoopForever>:

LoopForever:
  b LoopForever
 8004e32:	e7fe      	b.n	8004e32 <LoopForever>
  ldr   r0, =_estack
 8004e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e3c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8004e40:	08004ec8 	.word	0x08004ec8
  ldr r2, =_sbss
 8004e44:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8004e48:	200001b4 	.word	0x200001b4

08004e4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e4c:	e7fe      	b.n	8004e4c <ADC_IRQHandler>
	...

08004e50 <__libc_init_array>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	4d0d      	ldr	r5, [pc, #52]	@ (8004e88 <__libc_init_array+0x38>)
 8004e54:	4c0d      	ldr	r4, [pc, #52]	@ (8004e8c <__libc_init_array+0x3c>)
 8004e56:	1b64      	subs	r4, r4, r5
 8004e58:	10a4      	asrs	r4, r4, #2
 8004e5a:	2600      	movs	r6, #0
 8004e5c:	42a6      	cmp	r6, r4
 8004e5e:	d109      	bne.n	8004e74 <__libc_init_array+0x24>
 8004e60:	4d0b      	ldr	r5, [pc, #44]	@ (8004e90 <__libc_init_array+0x40>)
 8004e62:	4c0c      	ldr	r4, [pc, #48]	@ (8004e94 <__libc_init_array+0x44>)
 8004e64:	f000 f818 	bl	8004e98 <_init>
 8004e68:	1b64      	subs	r4, r4, r5
 8004e6a:	10a4      	asrs	r4, r4, #2
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	42a6      	cmp	r6, r4
 8004e70:	d105      	bne.n	8004e7e <__libc_init_array+0x2e>
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e78:	4798      	blx	r3
 8004e7a:	3601      	adds	r6, #1
 8004e7c:	e7ee      	b.n	8004e5c <__libc_init_array+0xc>
 8004e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e82:	4798      	blx	r3
 8004e84:	3601      	adds	r6, #1
 8004e86:	e7f2      	b.n	8004e6e <__libc_init_array+0x1e>
 8004e88:	08004ec0 	.word	0x08004ec0
 8004e8c:	08004ec0 	.word	0x08004ec0
 8004e90:	08004ec0 	.word	0x08004ec0
 8004e94:	08004ec4 	.word	0x08004ec4

08004e98 <_init>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr

08004ea4 <_fini>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	bf00      	nop
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr
